{"ast":null,"code":"var _jsxFileName = \"/Users/kian/HAKEE/annotator_app/frontend/src/VideoPlayer.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport videojs from \"video.js\";\nimport \"video.js/dist/video-js.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const VideoJS = props => {\n  _s();\n\n  const videoRef = React.useRef(null);\n  const playerRef = React.useRef(null);\n  const {\n    options,\n    onReady\n  } = props;\n  React.useEffect(() => {\n    // make sure Video.js player is only initialized once\n    if (!playerRef.current) {\n      const videoElement = videoRef.current;\n      if (!videoElement) return;\n      const player = playerRef.current = videojs(videoElement, options, () => {\n        console.log(\"player is ready\");\n        onReady && onReady(player);\n      });\n    } else {// you can update player here [update player through props]\n      // const player = playerRef.current;\n      // player.autoplay(options.autoplay);\n      // player.src(options.sources);\n    }\n  }, [options]); // Dispose the Video.js player when the functional component unmounts\n\n  React.useEffect(() => {\n    return () => {\n      if (playerRef.current) {\n        playerRef.current.dispose();\n        playerRef.current = null;\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    \"data-vjs-player\": true,\n    children: /*#__PURE__*/_jsxDEV(\"video\", {\n      ref: videoRef,\n      className: \"video-js vjs-big-play-centered\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n};\n\n_s(VideoJS, \"bnDqIex76F+3YH3m5e6j2tGQJQ0=\");\n\n_c = VideoJS;\nexport default VideoJS;\n\nvar _c;\n\n$RefreshReg$(_c, \"VideoJS\");","map":{"version":3,"sources":["/Users/kian/HAKEE/annotator_app/frontend/src/VideoPlayer.js"],"names":["React","videojs","VideoJS","props","videoRef","useRef","playerRef","options","onReady","useEffect","current","videoElement","player","console","log","dispose"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,UAApB;AACA,OAAO,4BAAP;;AAEA,OAAO,MAAMC,OAAO,GAAIC,KAAD,IAAW;AAAA;;AAE9B,QAAMC,QAAQ,GAAGJ,KAAK,CAACK,MAAN,CAAa,IAAb,CAAjB;AACA,QAAMC,SAAS,GAAGN,KAAK,CAACK,MAAN,CAAa,IAAb,CAAlB;AACA,QAAM;AAAEE,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAuBL,KAA7B;AAEAH,EAAAA,KAAK,CAACS,SAAN,CAAgB,MAAM;AAClB;AACA,QAAI,CAACH,SAAS,CAACI,OAAf,EAAwB;AACpB,YAAMC,YAAY,GAAGP,QAAQ,CAACM,OAA9B;AACA,UAAI,CAACC,YAAL,EAAmB;AAEnB,YAAMC,MAAM,GAAGN,SAAS,CAACI,OAAV,GAAoBT,OAAO,CAACU,YAAD,EAAeJ,OAAf,EAAwB,MAAM;AACpEM,QAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACAN,QAAAA,OAAO,IAAIA,OAAO,CAACI,MAAD,CAAlB;AACH,OAHyC,CAA1C;AAIH,KARD,MAQO,CACH;AACA;AACA;AACA;AACH;AACJ,GAhBD,EAgBG,CAACL,OAAD,CAhBH,EAN8B,CAwB9B;;AACAP,EAAAA,KAAK,CAACS,SAAN,CAAgB,MAAM;AAClB,WAAO,MAAM;AACT,UAAIH,SAAS,CAACI,OAAd,EAAuB;AACnBJ,QAAAA,SAAS,CAACI,OAAV,CAAkBK,OAAlB;AACAT,QAAAA,SAAS,CAACI,OAAV,GAAoB,IAApB;AACH;AACJ,KALD;AAMH,GAPD,EAOG,EAPH;AASA,sBACI;AAAK,2BAAL;AAAA,2BACI;AAAO,MAAA,GAAG,EAAEN,QAAZ;AAAsB,MAAA,SAAS,EAAC;AAAhC;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAvCM;;GAAMF,O;;KAAAA,O;AAyCb,eAAeA,OAAf","sourcesContent":["import React from \"react\";\nimport videojs from \"video.js\";\nimport \"video.js/dist/video-js.css\";\n\nexport const VideoJS = (props) => {\n\n    const videoRef = React.useRef(null);\n    const playerRef = React.useRef(null);\n    const { options, onReady } = props;\n\n    React.useEffect(() => {\n        // make sure Video.js player is only initialized once\n        if (!playerRef.current) {\n            const videoElement = videoRef.current;\n            if (!videoElement) return;\n\n            const player = playerRef.current = videojs(videoElement, options, () => {\n                console.log(\"player is ready\");\n                onReady && onReady(player);\n            });\n        } else {\n            // you can update player here [update player through props]\n            // const player = playerRef.current;\n            // player.autoplay(options.autoplay);\n            // player.src(options.sources);\n        }\n    }, [options]);\n\n    // Dispose the Video.js player when the functional component unmounts\n    React.useEffect(() => {\n        return () => {\n            if (playerRef.current) {\n                playerRef.current.dispose();\n                playerRef.current = null;\n            }\n        };\n    }, []);\n\n    return (\n        <div data-vjs-player>\n            <video ref={videoRef} className=\"video-js vjs-big-play-centered\" />\n        </div>\n    );\n}\n\nexport default VideoJS;"]},"metadata":{},"sourceType":"module"}