{"ast":null,"code":"var _jsxFileName = \"/Users/kian/HAKEE/annotator_app/frontend/src/components/DescriptionPane.jsx\";\nimport React from \"react\";\nimport StepDescription from \"./StepDescription\";\nimport \"./DescriptionPane.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class DescriptionPane extends React.Component {\n  constructor(props) {\n    super(props);\n    this.counter = 0;\n    this.state = {\n      descriptions: [{\n        key: 0,\n        mode: \"writing\",\n        level: 1,\n        selected: false\n      }]\n    };\n    this.counter += 1;\n    this.setModeByKey = this.setModeByKey.bind(this);\n    this.getMode = this.getMode.bind(this);\n    this.addStepAfter = this.addStepAfter.bind(this);\n    this.removeWritingStep = this.removeWritingStep.bind(this);\n    this.getSelected = this.getSelected.bind(this);\n    this.deselectAll = this.deselectAll.bind(this);\n    this.getIndex = this.getIndex.bind(this);\n    this.getWritingIndex = this.getWritingIndex.bind(this);\n    this.removeItem = this.removeItem.bind(this);\n    this.updateDescendents = this.updateDescendents.bind(this);\n    this.getDescendents = this.getDescendents.bind(this);\n    this.deleteItems = this.deleteItems.bind(this);\n    this.getPrevSibling = this.getPrevSibling.bind(this);\n    this.handleSingleClick = this.handleSingleClick.bind(this);\n    this.handleDoubleClick = this.handleDoubleClick.bind(this);\n    this.handleBlur = this.handleBlur.bind(this);\n    this.handleKeyAction = this.handleKeyAction.bind(this);\n  }\n\n  render() {\n    let descriptions = this.state.descriptions;\n    let descriptionList = descriptions.map((item, index) => /*#__PURE__*/_jsxDEV(StepDescription, {\n      id: item.key.toString(),\n      onSingleClick: this.handleSingleClick,\n      onDoubleClick: this.handleDoubleClick,\n      onBlur: this.handleBlur,\n      onKeyPress: this.handleKeyAction,\n      mode: item.mode,\n      selected: item.selected,\n      level: item.level\n    }, item.key.toString(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 32\n    }, this));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"description-pane-container\",\n      children: descriptionList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 16\n    }, this);\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"keydown\", event => this.handleKeyAction(null, \"\", event));\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"keydown\", event => this.handleKeyAction(null, \"\", event));\n  }\n\n  handleSingleClick(key, txt, event) {\n    if (txt === \"\") {\n      let items = this.setModeByKey(this.state.descriptions, key, \"writing\");\n      this.setState({\n        descriptions: items\n      });\n    } else if (event.shiftKey) {\n      // it is non-writing\n      const currentStepMode = this.getMode(this.state.descriptions, key, 0);\n      const nextStepMode = this.getMode(this.state.descriptions, key, 1);\n\n      if (currentStepMode === \"not_writing\" && (nextStepMode !== \"writing\" || nextStepMode === undefined)) {\n        // remove existing writing step\n        let items = this.removeWritingStep(this.state.descriptions); // select the current step\n\n        items = this.deselectAll(items);\n        items[this.getIndex(items, key, 0)].selected = true;\n        this.setState({\n          descriptions: items\n        });\n      }\n    }\n  }\n\n  handleDoubleClick(key) {\n    let items = this.deselectAll(this.state.descriptions); // update the selected step\n\n    const currentIndex = this.getIndex(items, key, 0);\n    const oldWritingIndex = this.getWritingIndex(items);\n\n    if (items[currentIndex].mode !== 'writing') {\n      items[currentIndex].mode = \"writing\";\n\n      if (currentIndex > 0) {\n        items[currentIndex - 1].selected = true;\n      }\n\n      if (oldWritingIndex > 0) {\n        items = this.removeItem(items, oldWritingIndex);\n      }\n\n      this.setState({\n        descriptions: items\n      });\n    }\n  }\n\n  handleBlur(key, txt) {\n    let items = [...this.state.descriptions];\n\n    if (txt !== \"\") {\n      items = this.setModeByKey(items, key, \"not_writing\");\n      this.setState({\n        descriptions: items\n      });\n    } else if (txt === \"\" && this.state.descriptions.length > 1) {\n      items = this.removeWritingStep(items);\n      this.setState({\n        descriptions: items\n      });\n    }\n  }\n\n  handleKeyAction(key, txt, event) {\n    event.stopImmediatePropagation();\n    let items = [...this.state.descriptions];\n\n    if (event.which === 46) {\n      console.log(\"delete event\");\n      let currentStepIndex = null;\n\n      if (key === null) {\n        // delete (window listener)\n        currentStepIndex = this.getSelected(items);\n      } else {\n        // delete (<input> listener)\n        currentStepIndex = this.getIndex(items, key, 0);\n      }\n\n      if (items[currentStepIndex].selected && items.length >= 2) {\n        // select the previous/next step\n        items = this.deselectAll(items);\n        const descIndexList = this.getDescendents(items, currentStepIndex);\n\n        if (currentStepIndex === 0) {\n          items[currentStepIndex + descIndexList.length].selected = true;\n        } else {\n          const prevSiblingIndex = this.getPrevSibling(items, currentStepIndex);\n          let offset = 1;\n\n          if (!(prevSiblingIndex == null)) {\n            const prevStepDescIndexList = this.getDescendents(items, prevSiblingIndex);\n            offset = prevStepDescIndexList.length;\n          }\n\n          items[currentStepIndex - offset].selected = true;\n        } // do not delete everything\n\n\n        if (descIndexList.length < items.length) {\n          items = this.deleteItems(items, descIndexList);\n          this.setState({\n            descriptions: items\n          });\n        }\n      }\n    } // Enter --> nex step (writing)\n    else if (event.which === 13 && txt !== \"\") {\n      const currentStepMode = this.getMode(items, key, 0);\n      const curretnStepIndex = this.getIndex(items, key, 0);\n\n      if (currentStepMode === \"writing\" || currentStepMode === \"not_writing\" && items[curretnStepIndex].selected) {\n        // change the current step to non-writing and add one writing step after it\n        items = this.setModeByKey(items, key, \"not_writing\"); // deselect all\n\n        items = this.deselectAll(items);\n        items[curretnStepIndex].selected = true;\n        items = this.addStepAfter(items, key, \"writing\", null);\n        this.setState({\n          descriptions: items\n        });\n      }\n    } // Tab or Shift + Tab\n    // TODO: shif + tab --> update the selected step\n    else if (event.which === 9) {\n      event.preventDefault(); // perform indention if it is writing\n\n      const currentStepIndex = this.getIndex(items, key, 0);\n\n      if (currentStepIndex > 0) {\n        const descIndexList = this.getDescendents(items, currentStepIndex); // only tab\n\n        if (!event.shiftKey) {\n          if (items[currentStepIndex].mode === \"writing\" && items.length > 1) {\n            if (items[currentStepIndex - 1].level >= items[currentStepIndex].level && items[currentStepIndex].level <= 2) {\n              items[currentStepIndex].level += 1;\n              items = this.updateDescendents(items, descIndexList, \"level_increase\");\n            }\n          }\n        } else {\n          // shift + tab\n          if (items[currentStepIndex].level >= 2) items[currentStepIndex].level -= 1;\n          items = this.updateDescendents(items, descIndexList, \"level_decrease\");\n        }\n\n        this.setState({\n          descriptions: items\n        });\n      } // TODO: \n      // up-down arrows\n      // change the selected item\n      // if (event.which) {\n      //     index = this.getSelected(this.state.descriptions);\n      // }\n\n    } // TODO: drag to rearrange\n\n  } // TODO: \n  // 1) next-prev video\n  // 2) saving the description\n  // 3) styling the description pane\n  // 4) add guiddance (key bindings, ...)\n  // 5) record timestamp\n  // 6) record video control events (number of times, and types (jump to the future/past))\n\n\n  getIndex(stateItems, descriptionKey, offset) {\n    let items = [...stateItems];\n    let itemIndex = items.map(item => item.key).indexOf(parseInt(descriptionKey));\n\n    if (itemIndex >= 0) {\n      return itemIndex + offset;\n    }\n\n    return -1;\n  }\n\n  getWritingIndex(items) {\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].mode === \"writing\") {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  setModeByKey(stateItems, descriptionKey, mode) {\n    let items = [...stateItems];\n    let itemIndex = items.map(item => item.key).indexOf(parseInt(descriptionKey));\n\n    if (itemIndex >= 0) {\n      items[itemIndex].mode = mode;\n    } else {\n      console.log(\"step description does not exist\");\n    }\n\n    return items;\n  }\n\n  getMode(stateItems, descriptionKey, offset) {\n    let items = [...stateItems];\n    let itemIndex = items.map(item => item.key).indexOf(parseInt(descriptionKey));\n\n    if (items[itemIndex + offset] !== undefined) {\n      return items[itemIndex + offset].mode;\n    }\n\n    return undefined;\n  }\n\n  getSelected(items) {\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].selected) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  deselectAll(items) {\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].selected) {\n        items[i].selected = false;\n      }\n    }\n\n    return items;\n  }\n\n  addStepAfter(itemsState, key, mode, level) {\n    let items = [...itemsState];\n    let itemIndex = items.map(item => item.key).indexOf(parseInt(key));\n\n    if (items[itemIndex].mode !== \"writing\") {\n      // add the new step\n      let mLevel = level;\n\n      if (level === null) {\n        mLevel = items[itemIndex].level;\n      }\n\n      const descIndexList = this.getDescendents(items, itemIndex);\n      const newItemIndex = descIndexList[descIndexList.length - 1] + 1;\n      items.splice(newItemIndex, 0, {\n        key: this.counter,\n        mode: mode,\n        level: mLevel,\n        selected: false\n      });\n      this.counter += 1;\n    }\n\n    return items;\n  }\n\n  removeWritingStep(itemsState) {\n    let items = [...itemsState];\n    let newItems = [...items];\n\n    for (let i = 1; i < items.length; i++) {\n      if (items[i].mode === \"writing\") {\n        console.log(i);\n        newItems.splice(i, 1);\n        return newItems;\n      }\n    }\n\n    console.log(\"Didn't find the item, to remove\");\n    return newItems;\n  }\n\n  removeItem(items, index) {\n    items.splice(index, 1);\n    return items;\n  }\n\n  getDescendents(items, index) {\n    let descIndexList = [index];\n    const currentStepLevel = items[index].level;\n\n    for (let i = index + 1; i < items.length; i++) {\n      if (items[i].level > currentStepLevel) {\n        descIndexList.push(i);\n      } else {\n        break;\n      }\n    }\n\n    return descIndexList;\n  }\n\n  updateDescendents(items, desIndexList, action) {\n    for (let i = 1; i < desIndexList.length; i++) {\n      if (action === \"level_increase\") {\n        items[desIndexList[i]].level += 1;\n      } else if (action === \"level_decrease\") {\n        items[desIndexList[i]].level -= 1;\n      }\n    }\n\n    return items;\n  }\n\n  deleteItems(items, indexList) {\n    let newItems = [];\n    items.forEach((item, index) => {\n      if (!indexList.includes(index)) {\n        newItems.push(item);\n      }\n    });\n    return newItems;\n  }\n\n  getPrevSibling(items, index) {\n    // pre-condition: index > 0\n    for (let i = index - 1; i > 0; i--) {\n      if (items[i].level < items[index].level) {\n        return null;\n      }\n\n      if (items[index].level === items[i].level) {\n        return i;\n      }\n    }\n\n    return null;\n  }\n\n}","map":{"version":3,"sources":["/Users/kian/HAKEE/annotator_app/frontend/src/components/DescriptionPane.jsx"],"names":["React","StepDescription","DescriptionPane","Component","constructor","props","counter","state","descriptions","key","mode","level","selected","setModeByKey","bind","getMode","addStepAfter","removeWritingStep","getSelected","deselectAll","getIndex","getWritingIndex","removeItem","updateDescendents","getDescendents","deleteItems","getPrevSibling","handleSingleClick","handleDoubleClick","handleBlur","handleKeyAction","render","descriptionList","map","item","index","toString","componentDidMount","window","addEventListener","event","componentWillUnmount","removeEventListener","txt","items","setState","shiftKey","currentStepMode","nextStepMode","undefined","currentIndex","oldWritingIndex","length","stopImmediatePropagation","which","console","log","currentStepIndex","descIndexList","prevSiblingIndex","offset","prevStepDescIndexList","curretnStepIndex","preventDefault","stateItems","descriptionKey","itemIndex","indexOf","parseInt","i","itemsState","mLevel","newItemIndex","splice","newItems","currentStepLevel","push","desIndexList","action","indexList","forEach","includes"],"mappings":"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","sourcesContent":["import React from \"react\"\n\nimport StepDescription from \"./StepDescription\"\n\nimport \"./DescriptionPane.css\"\n\n\nexport default class DescriptionPane extends React.Component {\n    constructor(props) {\n        super(props);\n        this.counter = 0;\n        this.state = {descriptions: [{key: 0, mode: \"writing\", level: 1, selected: false}]};\n        this.counter += 1;\n\n        this.setModeByKey = this.setModeByKey.bind(this);\n        this.getMode = this.getMode.bind(this);\n        this.addStepAfter = this.addStepAfter.bind(this);\n        this.removeWritingStep = this.removeWritingStep.bind(this);\n        this.getSelected = this.getSelected.bind(this);\n        this.deselectAll = this.deselectAll.bind(this);\n        this.getIndex = this.getIndex.bind(this);\n        this.getWritingIndex = this.getWritingIndex.bind(this);\n        this.removeItem = this.removeItem.bind(this);\n        this.updateDescendents = this.updateDescendents.bind(this);\n        this.getDescendents = this.getDescendents.bind(this);\n        this.deleteItems = this.deleteItems.bind(this);\n        this.getPrevSibling = this.getPrevSibling.bind(this);\n\n        this.handleSingleClick = this.handleSingleClick.bind(this);\n        this.handleDoubleClick = this.handleDoubleClick.bind(this);\n        this.handleBlur = this.handleBlur.bind(this);\n        this.handleKeyAction = this.handleKeyAction.bind(this);\n\n\n    }\n\n    render() {\n        let descriptions = this.state.descriptions;\n        let descriptionList = descriptions.map((item, index) => \n                               <StepDescription id={item.key.toString()} \n                                                key={item.key.toString()} \n                                                onSingleClick={this.handleSingleClick} \n                                                onDoubleClick={this.handleDoubleClick}\n                                                onBlur={this.handleBlur}\n                                                onKeyPress={this.handleKeyAction} \n                                                mode={item.mode}\n                                                selected={item.selected} \n                                                level={item.level}/>)\n        return <div id=\"description-pane-container\">{descriptionList}</div>\n        \n    }\n\n    componentDidMount() {\n        window.addEventListener(\"keydown\", (event) => this.handleKeyAction(null, \"\", event));\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"keydown\", (event) => this.handleKeyAction(null, \"\", event));\n    }\n\n\n    handleSingleClick(key, txt, event) {\n        if (txt === \"\") {\n            let items = this.setModeByKey(this.state.descriptions, key, \"writing\");\n            this.setState({descriptions: items});\n        } else if (event.shiftKey) { // it is non-writing\n            const currentStepMode = this.getMode(this.state.descriptions, key, 0);\n            const nextStepMode = this.getMode(this.state.descriptions, key, 1);\n            if (currentStepMode === \"not_writing\" && (nextStepMode !== \"writing\" || nextStepMode === undefined)) {\n                // remove existing writing step\n                let items = this.removeWritingStep(this.state.descriptions)\n                // select the current step\n                items = this.deselectAll(items);\n                items[this.getIndex(items, key, 0)].selected = true;\n                this.setState({descriptions: items});\n            }\n        }\n    }\n\n    handleDoubleClick(key) {\n        let items = this.deselectAll(this.state.descriptions);\n        // update the selected step\n        const currentIndex = this.getIndex(items, key, 0);\n        const oldWritingIndex = this.getWritingIndex(items);\n        if (items[currentIndex].mode !== 'writing') {\n            items[currentIndex].mode = \"writing\";\n            if (currentIndex > 0) {\n                items[currentIndex-1].selected = true;\n            }\n            if (oldWritingIndex > 0) {\n                items = this.removeItem(items, oldWritingIndex)\n            }\n            this.setState({descriptions: items});\n        }\n    }\n\n    handleBlur(key, txt) {\n        let items = [...this.state.descriptions];\n        if (txt !== \"\") {\n            items = this.setModeByKey(items, key, \"not_writing\");\n            this.setState({descriptions: items});\n        } else if(txt === \"\" && this.state.descriptions.length > 1) {\n            items = this.removeWritingStep(items);\n            this.setState({descriptions: items});\n        }\n    }\n\n    handleKeyAction(key, txt, event) {\n        event.stopImmediatePropagation();\n        let items = [...this.state.descriptions];\n\n        if (event.which === 46) {\n            console.log(\"delete event\")\n            let currentStepIndex = null;\n            if (key === null) {    // delete (window listener)\n                currentStepIndex = this.getSelected(items);\n            } else {              // delete (<input> listener)\n                currentStepIndex = this.getIndex(items, key, 0);\n            }\n\n            if (items[currentStepIndex].selected && items.length >= 2) {\n                // select the previous/next step\n                items = this.deselectAll(items);\n                const descIndexList = this.getDescendents(items, currentStepIndex);\n                if (currentStepIndex === 0) {\n                    items[currentStepIndex + descIndexList.length].selected = true;\n                } else {\n                    const prevSiblingIndex = this.getPrevSibling(items, currentStepIndex);\n                    let offset = 1;\n                    if (!(prevSiblingIndex == null)) { \n                        const prevStepDescIndexList = this.getDescendents(items, prevSiblingIndex);\n                        offset =  prevStepDescIndexList.length\n                    }\n                    items[currentStepIndex - offset].selected = true;\n                }\n                // do not delete everything\n                if (descIndexList.length < items.length) {\n                    items = this.deleteItems(items, descIndexList);\n                    this.setState({descriptions: items});\n                }\n            }\n        }\n\n        // Enter --> nex step (writing)\n        else if (event.which === 13 && txt !== \"\") {\n            const currentStepMode = this.getMode(items, key, 0);\n            const curretnStepIndex = this.getIndex(items, key, 0);\n            if (currentStepMode === \"writing\" || (currentStepMode === \"not_writing\" && items[curretnStepIndex].selected)) {\n                // change the current step to non-writing and add one writing step after it\n                items = this.setModeByKey(items, key, \"not_writing\");\n                // deselect all\n                items = this.deselectAll(items)\n                items[curretnStepIndex].selected = true;\n                items = this.addStepAfter(items, key, \"writing\", null);\n                this.setState({descriptions: items});\n            }\n        }\n\n        // Tab or Shift + Tab\n        // TODO: shif + tab --> update the selected step\n        else if (event.which === 9) { \n            event.preventDefault();\n            // perform indention if it is writing\n            const currentStepIndex = this.getIndex(items, key, 0);\n            \n            if (currentStepIndex > 0) {\n                const descIndexList = this.getDescendents(items, currentStepIndex);\n                // only tab\n                if (!event.shiftKey) {\n                    if (items[currentStepIndex].mode === \"writing\" && items.length > 1) {\n                        if (items[currentStepIndex-1].level >= items[currentStepIndex].level && items[currentStepIndex].level <=2) {\n                            items[currentStepIndex].level += 1;\n                            items = this.updateDescendents(items, descIndexList, \"level_increase\");\n                        } \n                    }\n                } else { // shift + tab\n                    if (items[currentStepIndex].level >= 2)\n                    items[currentStepIndex].level -= 1\n                    items = this.updateDescendents(items, descIndexList, \"level_decrease\");\n                }\n                this.setState({descriptions: items});\n            }\n            \n        // TODO: \n        // up-down arrows\n        // change the selected item\n        // if (event.which) {\n        //     index = this.getSelected(this.state.descriptions);\n        // }\n        \n        }\n\n    // TODO: drag to rearrange\n    }\n\n    // TODO: \n    // 1) next-prev video\n    // 2) saving the description\n    // 3) styling the description pane\n    // 4) add guiddance (key bindings, ...)\n    // 5) record timestamp\n    // 6) record video control events (number of times, and types (jump to the future/past))\n\n    getIndex(stateItems, descriptionKey, offset) {\n        let items = [...stateItems];\n        let itemIndex = items.map(item => item.key).indexOf(parseInt(descriptionKey));\n        if (itemIndex >= 0) {\n            return itemIndex + offset;\n        }\n        return -1;\n    }\n\n    getWritingIndex(items) {\n        for (let i = 0; i < items.length; i++) {\n            if (items[i].mode === \"writing\") {\n                return i;\n            }\n        }\n        return -1 \n    }\n\n    setModeByKey(stateItems, descriptionKey, mode) {\n        let items = [...stateItems];\n        let itemIndex = items.map(item => item.key).indexOf(parseInt(descriptionKey));\n        if (itemIndex >= 0) {\n            items[itemIndex].mode = mode;\n        } else {\n            console.log(\"step description does not exist\")\n        }\n        \n        return items;\n    \n    }\n\n\n    getMode(stateItems, descriptionKey, offset) {\n        let items = [...stateItems];\n        let itemIndex = items.map(item => item.key).indexOf(parseInt(descriptionKey));\n        if (items[itemIndex + offset] !== undefined) {\n            return items[itemIndex + offset].mode; \n        } \n        return undefined\n    }\n\n\n    getSelected(items) {\n        for (let i = 0; i < items.length; i++) {\n            if (items[i].selected) {\n                return i;\n            }\n        }\n        return -1\n    }\n\n    deselectAll(items) {\n        for (let i = 0; i < items.length; i++) {\n            if(items[i].selected) {\n                items[i].selected = false;\n            }\n        }\n        return items\n    }\n\n    addStepAfter(itemsState, key, mode, level) {\n        let items = [...itemsState];\n        let itemIndex = items.map(item => item.key).indexOf(parseInt(key));\n        if (items[itemIndex].mode !== \"writing\") {\n            // add the new step\n            let mLevel = level;\n            if (level === null) {\n                mLevel = items[itemIndex].level;\n            }\n            const descIndexList = this.getDescendents(items, itemIndex);\n            const newItemIndex =  descIndexList[descIndexList.length-1] + 1;\n            items.splice(newItemIndex, 0, {key: this.counter, mode: mode, level: mLevel, selected: false})\n            this.counter += 1\n        }\n        return items;\n    }\n\n    removeWritingStep(itemsState) {\n        let items = [...itemsState];\n        let newItems = [...items];\n        for (let i = 1; i < items.length; i++) {\n            if (items[i].mode === \"writing\") {\n                console.log(i)\n                newItems.splice(i, 1)\n                return newItems\n            }\n        }\n        console.log(\"Didn't find the item, to remove\")\n        return newItems  \n\n    }\n\n    removeItem(items, index) {\n        items.splice(index, 1);\n        return items;\n    }\n\n    getDescendents(items, index) {\n        let descIndexList = [index]\n        const currentStepLevel = items[index].level;\n        for (let i = index + 1; i < items.length; i++) {\n            if (items[i].level > currentStepLevel) {\n                descIndexList.push(i);\n            } else {\n                break;\n            }\n        }\n        return descIndexList;\n\n    }\n\n    updateDescendents(items, desIndexList, action) {\n        for (let i = 1; i < desIndexList.length; i ++) {\n            if (action === \"level_increase\") {\n                items[desIndexList[i]].level += 1;\n            } else if (action === \"level_decrease\") {\n                items[desIndexList[i]].level -= 1;\n            }\n        }\n\n        return items;\n    }\n\n    deleteItems(items, indexList) {\n        let newItems = []\n        items.forEach((item, index) => {\n            if (!indexList.includes(index)) {\n                newItems.push(item)\n            }\n        });\n        return newItems;\n    }\n\n    getPrevSibling(items, index) {\n        // pre-condition: index > 0\n        for (let i = index - 1; i > 0; i--) {\n            if (items[i].level < items[index].level) {\n                return null;\n            }\n            if (items[index].level === items[i].level) {\n                return i;\n            }\n        }\n        return null;\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}