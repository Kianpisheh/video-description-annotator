{"ast":null,"code":"var _jsxFileName = \"/Users/kian/HAKEE/annotator_app/frontend/src/components/DescriptionPane.jsx\";\nimport React from \"react\";\nimport StepDescription from \"./StepDescription\";\nimport \"./DescriptionPane.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class DescriptionPane extends React.Component {\n  constructor(props) {\n    super(props);\n    this.counter = 0;\n    this.state = {\n      descriptions: [{\n        key: 0,\n        mode: \"writing\",\n        level: 1,\n        selected: false\n      }]\n    };\n    this.counter += 1;\n    this.setModeByKey = this.setModeByKey.bind(this);\n    this.getMode = this.getMode.bind(this);\n    this.addStepAfter = this.addStepAfter.bind(this);\n    this.removeWritingStep = this.removeWritingStep.bind(this);\n    this.getSelected = this.getSelected.bind(this);\n    this.deselectAll = this.deselectAll.bind(this);\n    this.getIndex = this.getIndex.bind(this);\n    this.getWritingIndex = this.getWritingIndex.bind(this);\n    this.removeItem = this.removeItem.bind(this);\n    this.updateDescendents = this.updateDescendents.bind(this);\n    this.getDescendents = this.getDescendents.bind(this);\n    this.deleteItems = this.deleteItems.bind(this);\n    this.getPrevSibling = this.getPrevSibling.bind(this);\n    this.handleSingleClick = this.handleSingleClick.bind(this);\n    this.handleDoubleClick = this.handleDoubleClick.bind(this);\n    this.handleBlur = this.handleBlur.bind(this);\n    this.handleKeyAction = this.handleKeyAction.bind(this);\n  }\n\n  render() {\n    let descriptions = this.state.descriptions;\n    let descriptionListG = [];\n    let stepDescriptionList = [];\n\n    for (let i = 0; i < descriptions.length; i++) {\n      // new step\n      if (descriptions[i].level === 1) {\n        if (stepDescriptionList.length) {\n          descriptionListG.push(stepDescriptionList);\n        }\n\n        stepDescriptionList = [descriptions[i]];\n      } else {\n        // descendents\n        stepDescriptionList.push(descriptions[i]);\n      }\n\n      if (i === descriptions.length - 1) {\n        if (stepDescriptionList.length) {\n          descriptionListG.push(stepDescriptionList);\n        }\n      }\n    }\n\n    let x = 1;\n    let stepComponentsList = descriptionListG.map((stepList, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      id: index.toString(),\n      className: \"step-div\",\n      children: stepList.map(item => /*#__PURE__*/_jsxDEV(StepDescription, {\n        id: item.key.toString(),\n        onSingleClick: this.handleSingleClick,\n        onDoubleClick: this.handleDoubleClick,\n        onBlur: this.handleBlur,\n        onKeyPress: this.handleKeyAction,\n        mode: item.mode,\n        selected: item.selected,\n        level: item.level\n      }, item.key.toString(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this))\n    }, index.toString(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)); // let descriptionList = descriptions.map((item) =>\n    //                        <StepDescription id={item.key.toString()}\n    //                                         key={item.key.toString()}\n    //                                         onSingleClick={this.handleSingleClick}\n    //                                         onDoubleClick={this.handleDoubleClick}\n    //                                         onBlur={this.handleBlur}\n    //                                         onKeyPress={this.handleKeyAction}\n    //                                         mode={item.mode}\n    //                                         selected={item.selected}\n    //                                         level={item.level}/>)\n    // return <React.Fragment >{descriptionList}</React.Fragment>\n\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: stepComponentsList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 12\n    }, this);\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"keydown\", event => this.handleKeyAction(null, \"\", event));\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"keydown\", event => this.handleKeyAction(null, \"\", event));\n  }\n\n  handleSingleClick(key, txt, event) {\n    if (txt === \"\") {\n      let items = this.setModeByKey(this.state.descriptions, key, \"writing\");\n      this.setState({\n        descriptions: items\n      });\n    } else if (event.shiftKey) {\n      // it is non-writing\n      const currentStepMode = this.getMode(this.state.descriptions, key, 0);\n      const nextStepMode = this.getMode(this.state.descriptions, key, 1);\n\n      if (currentStepMode === \"not_writing\" && (nextStepMode !== \"writing\" || nextStepMode === undefined)) {\n        // remove existing writing step\n        let items = this.removeWritingStep(this.state.descriptions); // select the current step\n\n        items = this.deselectAll(items);\n        items[this.getIndex(items, key, 0)].selected = true;\n        this.setState({\n          descriptions: items\n        });\n      }\n    }\n  }\n\n  handleDoubleClick(key) {\n    let items = this.deselectAll(this.state.descriptions); // update the selected step\n\n    const currentIndex = this.getIndex(items, key, 0);\n    const oldWritingIndex = this.getWritingIndex(items);\n\n    if (items[currentIndex].mode !== \"writing\") {\n      items[currentIndex].mode = \"writing\";\n\n      if (currentIndex > 0) {\n        items[currentIndex - 1].selected = true;\n      }\n\n      if (oldWritingIndex > 0) {\n        items = this.removeItem(items, oldWritingIndex);\n      }\n\n      this.setState({\n        descriptions: items\n      });\n    }\n  }\n\n  handleBlur(key, txt) {\n    let items = [...this.state.descriptions];\n\n    if (txt !== \"\") {\n      items = this.setModeByKey(items, key, \"not_writing\");\n      this.setState({\n        descriptions: items\n      });\n    } else if (txt === \"\" && this.state.descriptions.length > 1) {\n      items = this.removeWritingStep(items);\n      this.saveUserData(items, \"u1_v1\");\n      this.setState({\n        descriptions: items\n      });\n    }\n  }\n\n  handleKeyAction(key, txt, event) {\n    event.stopImmediatePropagation();\n    let items = [...this.state.descriptions];\n\n    if (event.which === 46) {\n      console.log(\"delete event\");\n      let currentStepIndex = null;\n\n      if (key === null) {\n        // delete (window listener)\n        currentStepIndex = this.getSelected(items);\n      } else {\n        // delete (<input> listener)\n        currentStepIndex = this.getIndex(items, key, 0);\n      }\n\n      if (items[currentStepIndex].selected && items.length >= 2) {\n        // select the previous/next step\n        items = this.deselectAll(items);\n        const descIndexList = this.getDescendents(items, currentStepIndex);\n\n        if (currentStepIndex === 0) {\n          items[currentStepIndex + descIndexList.length].selected = true;\n        } else {\n          const prevSiblingIndex = this.getPrevSibling(items, currentStepIndex);\n          let offset = 1;\n\n          if (!(prevSiblingIndex == null)) {\n            const prevStepDescIndexList = this.getDescendents(items, prevSiblingIndex);\n            offset = prevStepDescIndexList.length;\n          }\n\n          items[currentStepIndex - offset].selected = true;\n        } // do not delete everything\n\n\n        if (descIndexList.length < items.length) {\n          items = this.deleteItems(items, descIndexList);\n          this.setState({\n            descriptions: items\n          });\n        }\n      }\n    } // Enter --> nex step (writing)\n    else if (event.which === 13 && txt !== \"\") {\n      const currentStepMode = this.getMode(items, key, 0);\n      const curretnStepIndex = this.getIndex(items, key, 0);\n\n      if (currentStepMode === \"writing\" || currentStepMode === \"not_writing\" && items[curretnStepIndex].selected) {\n        // change the current step to non-writing and add one writing step after it\n        items = this.setModeByKey(items, key, \"not_writing\"); // deselect all\n\n        items = this.deselectAll(items);\n        items[curretnStepIndex].selected = true;\n        items = this.addStepAfter(items, key, \"writing\", null);\n        this.setState({\n          descriptions: items\n        });\n      }\n    } // Tab or Shift + Tab\n    // TODO: shif + tab --> update the selected step\n    else if (event.which === 9) {\n      event.preventDefault(); // perform indention if it is writing\n\n      const currentStepIndex = this.getIndex(items, key, 0);\n\n      if (currentStepIndex > 0) {\n        const descIndexList = this.getDescendents(items, currentStepIndex); // only tab\n\n        if (!event.shiftKey) {\n          if (items[currentStepIndex].mode === \"writing\" && items.length > 1) {\n            if (items[currentStepIndex - 1].level >= items[currentStepIndex].level && items[currentStepIndex].level <= 2) {\n              items[currentStepIndex].level += 1;\n              items = this.updateDescendents(items, descIndexList, \"level_increase\");\n            }\n          }\n        } else {\n          // shift + tab\n          if (items[currentStepIndex].level >= 2) items[currentStepIndex].level -= 1;\n          items = this.updateDescendents(items, descIndexList, \"level_decrease\");\n        }\n\n        this.setState({\n          descriptions: items\n        });\n      } // TODO:\n      // up-down arrows\n      // change the selected item\n      // if (event.which) {\n      //     index = this.getSelected(this.state.descriptions);\n      // }\n\n    } // TODO: drag to rearrange\n\n  } // TODO:\n  // 1) next-prev video\n  // 2) saving the description\n  // 3) styling the description pane\n  // 4) add guiddance (key bindings, ...)\n  // 5) record timestamp\n  // 6) record video control events (number of times, and types (jump to the future/past))\n\n\n  getIndex(stateItems, descriptionKey, offset) {\n    let items = [...stateItems];\n    let itemIndex = items.map(item => item.key).indexOf(parseInt(descriptionKey));\n\n    if (itemIndex >= 0) {\n      return itemIndex + offset;\n    }\n\n    return -1;\n  }\n\n  getWritingIndex(items) {\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].mode === \"writing\") {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  setModeByKey(stateItems, descriptionKey, mode) {\n    let items = [...stateItems];\n    let itemIndex = items.map(item => item.key).indexOf(parseInt(descriptionKey));\n\n    if (itemIndex >= 0) {\n      items[itemIndex].mode = mode;\n    } else {\n      console.log(\"step description does not exist\");\n    }\n\n    return items;\n  }\n\n  getMode(stateItems, descriptionKey, offset) {\n    let items = [...stateItems];\n    let itemIndex = items.map(item => item.key).indexOf(parseInt(descriptionKey));\n\n    if (items[itemIndex + offset] !== undefined) {\n      return items[itemIndex + offset].mode;\n    }\n\n    return undefined;\n  }\n\n  getSelected(items) {\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].selected) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  deselectAll(items) {\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].selected) {\n        items[i].selected = false;\n      }\n    }\n\n    return items;\n  }\n\n  addStepAfter(itemsState, key, mode, level) {\n    let items = [...itemsState];\n    let itemIndex = items.map(item => item.key).indexOf(parseInt(key));\n\n    if (items[itemIndex].mode !== \"writing\") {\n      // add the new step\n      let mLevel = level;\n\n      if (level === null) {\n        mLevel = items[itemIndex].level;\n      }\n\n      const descIndexList = this.getDescendents(items, itemIndex);\n      const newItemIndex = descIndexList[descIndexList.length - 1] + 1;\n      items.splice(newItemIndex, 0, {\n        key: this.counter,\n        mode: mode,\n        level: mLevel,\n        selected: false\n      });\n      this.counter += 1;\n    }\n\n    return items;\n  }\n\n  removeWritingStep(itemsState) {\n    let items = [...itemsState];\n    let newItems = [...items];\n\n    for (let i = 1; i < items.length; i++) {\n      if (items[i].mode === \"writing\") {\n        console.log(i);\n        newItems.splice(i, 1);\n        return newItems;\n      }\n    }\n\n    console.log(\"Didn't find the item, to remove\");\n    return newItems;\n  }\n\n  removeItem(items, index) {\n    items.splice(index, 1);\n    return items;\n  }\n\n  getDescendents(items, index) {\n    let descIndexList = [index];\n    const currentStepLevel = items[index].level;\n\n    for (let i = index + 1; i < items.length; i++) {\n      if (items[i].level > currentStepLevel) {\n        descIndexList.push(i);\n      } else {\n        break;\n      }\n    }\n\n    return descIndexList;\n  }\n\n  updateDescendents(items, desIndexList, action) {\n    for (let i = 1; i < desIndexList.length; i++) {\n      if (action === \"level_increase\") {\n        items[desIndexList[i]].level += 1;\n      } else if (action === \"level_decrease\") {\n        items[desIndexList[i]].level -= 1;\n      }\n    }\n\n    return items;\n  }\n\n  deleteItems(items, indexList) {\n    let newItems = [];\n    items.forEach((item, index) => {\n      if (!indexList.includes(index)) {\n        newItems.push(item);\n      }\n    });\n    return newItems;\n  }\n\n  getPrevSibling(items, index) {\n    // pre-condition: index > 0\n    for (let i = index - 1; i > 0; i--) {\n      if (items[i].level < items[index].level) {\n        return null;\n      }\n\n      if (items[index].level === items[i].level) {\n        return i;\n      }\n    }\n\n    return null;\n  }\n\n  saveUserData(descriptions, fileName) {\n    const descriptionsJson = JSON.stringify(descriptions);\n  }\n\n}","map":{"version":3,"sources":["/Users/kian/HAKEE/annotator_app/frontend/src/components/DescriptionPane.jsx"],"names":["React","StepDescription","DescriptionPane","Component","constructor","props","counter","state","descriptions","key","mode","level","selected","setModeByKey","bind","getMode","addStepAfter","removeWritingStep","getSelected","deselectAll","getIndex","getWritingIndex","removeItem","updateDescendents","getDescendents","deleteItems","getPrevSibling","handleSingleClick","handleDoubleClick","handleBlur","handleKeyAction","render","descriptionListG","stepDescriptionList","i","length","push","x","stepComponentsList","map","stepList","index","toString","item","componentDidMount","window","addEventListener","event","componentWillUnmount","removeEventListener","txt","items","setState","shiftKey","currentStepMode","nextStepMode","undefined","currentIndex","oldWritingIndex","saveUserData","stopImmediatePropagation","which","console","log","currentStepIndex","descIndexList","prevSiblingIndex","offset","prevStepDescIndexList","curretnStepIndex","preventDefault","stateItems","descriptionKey","itemIndex","indexOf","parseInt","itemsState","mLevel","newItemIndex","splice","newItems","currentStepLevel","desIndexList","action","indexList","forEach","includes","fileName","descriptionsJson","JSON","stringify"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nimport StepDescription from \"./StepDescription\";\n\nimport \"./DescriptionPane.css\";\n\nexport default class DescriptionPane extends React.Component {\n  constructor(props) {\n    super(props);\n    this.counter = 0;\n    this.state = {\n      descriptions: [{ key: 0, mode: \"writing\", level: 1, selected: false }],\n    };\n    this.counter += 1;\n\n    this.setModeByKey = this.setModeByKey.bind(this);\n    this.getMode = this.getMode.bind(this);\n    this.addStepAfter = this.addStepAfter.bind(this);\n    this.removeWritingStep = this.removeWritingStep.bind(this);\n    this.getSelected = this.getSelected.bind(this);\n    this.deselectAll = this.deselectAll.bind(this);\n    this.getIndex = this.getIndex.bind(this);\n    this.getWritingIndex = this.getWritingIndex.bind(this);\n    this.removeItem = this.removeItem.bind(this);\n    this.updateDescendents = this.updateDescendents.bind(this);\n    this.getDescendents = this.getDescendents.bind(this);\n    this.deleteItems = this.deleteItems.bind(this);\n    this.getPrevSibling = this.getPrevSibling.bind(this);\n\n    this.handleSingleClick = this.handleSingleClick.bind(this);\n    this.handleDoubleClick = this.handleDoubleClick.bind(this);\n    this.handleBlur = this.handleBlur.bind(this);\n    this.handleKeyAction = this.handleKeyAction.bind(this);\n  }\n\n  render() {\n    let descriptions = this.state.descriptions;\n    let descriptionListG = [];\n    let stepDescriptionList = [];\n    for (let i = 0; i < descriptions.length; i++) {\n      // new step\n      if (descriptions[i].level === 1) {\n        if (stepDescriptionList.length) {\n          descriptionListG.push(stepDescriptionList);\n        }\n        stepDescriptionList = [descriptions[i]];\n      } else {\n        // descendents\n        stepDescriptionList.push(descriptions[i]);\n      }\n      if (i === descriptions.length - 1) {\n        if (stepDescriptionList.length) {\n          descriptionListG.push(stepDescriptionList);\n        }\n      }\n    }\n\n    let x = 1;\n    let stepComponentsList = descriptionListG.map((stepList, index) => (\n      <div key={index.toString()} id={index.toString()} className=\"step-div\">\n        {stepList.map((item) => (\n          <StepDescription\n            id={item.key.toString()}\n            key={item.key.toString()}\n            onSingleClick={this.handleSingleClick}\n            onDoubleClick={this.handleDoubleClick}\n            onBlur={this.handleBlur}\n            onKeyPress={this.handleKeyAction}\n            mode={item.mode}\n            selected={item.selected}\n            level={item.level}\n          />\n        ))}\n      </div>\n    ));\n\n    // let descriptionList = descriptions.map((item) =>\n    //                        <StepDescription id={item.key.toString()}\n    //                                         key={item.key.toString()}\n    //                                         onSingleClick={this.handleSingleClick}\n    //                                         onDoubleClick={this.handleDoubleClick}\n    //                                         onBlur={this.handleBlur}\n    //                                         onKeyPress={this.handleKeyAction}\n    //                                         mode={item.mode}\n    //                                         selected={item.selected}\n    //                                         level={item.level}/>)\n    // return <React.Fragment >{descriptionList}</React.Fragment>\n    return <React.Fragment>{stepComponentsList}</React.Fragment>;\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"keydown\", (event) =>\n      this.handleKeyAction(null, \"\", event)\n    );\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"keydown\", (event) =>\n      this.handleKeyAction(null, \"\", event)\n    );\n  }\n\n  handleSingleClick(key, txt, event) {\n    if (txt === \"\") {\n      let items = this.setModeByKey(this.state.descriptions, key, \"writing\");\n      this.setState({ descriptions: items });\n    } else if (event.shiftKey) {\n      // it is non-writing\n      const currentStepMode = this.getMode(this.state.descriptions, key, 0);\n      const nextStepMode = this.getMode(this.state.descriptions, key, 1);\n      if (\n        currentStepMode === \"not_writing\" &&\n        (nextStepMode !== \"writing\" || nextStepMode === undefined)\n      ) {\n        // remove existing writing step\n        let items = this.removeWritingStep(this.state.descriptions);\n        // select the current step\n        items = this.deselectAll(items);\n        items[this.getIndex(items, key, 0)].selected = true;\n        this.setState({ descriptions: items });\n      }\n    }\n  }\n\n  handleDoubleClick(key) {\n    let items = this.deselectAll(this.state.descriptions);\n    // update the selected step\n    const currentIndex = this.getIndex(items, key, 0);\n    const oldWritingIndex = this.getWritingIndex(items);\n    if (items[currentIndex].mode !== \"writing\") {\n      items[currentIndex].mode = \"writing\";\n      if (currentIndex > 0) {\n        items[currentIndex - 1].selected = true;\n      }\n      if (oldWritingIndex > 0) {\n        items = this.removeItem(items, oldWritingIndex);\n      }\n      this.setState({ descriptions: items });\n    }\n  }\n\n  handleBlur(key, txt) {\n    let items = [...this.state.descriptions];\n    if (txt !== \"\") {\n      items = this.setModeByKey(items, key, \"not_writing\");\n      this.setState({ descriptions: items });\n    } else if (txt === \"\" && this.state.descriptions.length > 1) {\n      items = this.removeWritingStep(items);\n      this.saveUserData(items, \"u1_v1\");\n      this.setState({ descriptions: items });\n    }\n  }\n\n  handleKeyAction(key, txt, event) {\n    event.stopImmediatePropagation();\n    let items = [...this.state.descriptions];\n\n    if (event.which === 46) {\n      console.log(\"delete event\");\n      let currentStepIndex = null;\n      if (key === null) {\n        // delete (window listener)\n        currentStepIndex = this.getSelected(items);\n      } else {\n        // delete (<input> listener)\n        currentStepIndex = this.getIndex(items, key, 0);\n      }\n\n      if (items[currentStepIndex].selected && items.length >= 2) {\n        // select the previous/next step\n        items = this.deselectAll(items);\n        const descIndexList = this.getDescendents(items, currentStepIndex);\n        if (currentStepIndex === 0) {\n          items[currentStepIndex + descIndexList.length].selected = true;\n        } else {\n          const prevSiblingIndex = this.getPrevSibling(items, currentStepIndex);\n          let offset = 1;\n          if (!(prevSiblingIndex == null)) {\n            const prevStepDescIndexList = this.getDescendents(\n              items,\n              prevSiblingIndex\n            );\n            offset = prevStepDescIndexList.length;\n          }\n          items[currentStepIndex - offset].selected = true;\n        }\n        // do not delete everything\n        if (descIndexList.length < items.length) {\n          items = this.deleteItems(items, descIndexList);\n          this.setState({ descriptions: items });\n        }\n      }\n    }\n\n    // Enter --> nex step (writing)\n    else if (event.which === 13 && txt !== \"\") {\n      const currentStepMode = this.getMode(items, key, 0);\n      const curretnStepIndex = this.getIndex(items, key, 0);\n      if (\n        currentStepMode === \"writing\" ||\n        (currentStepMode === \"not_writing\" && items[curretnStepIndex].selected)\n      ) {\n        // change the current step to non-writing and add one writing step after it\n        items = this.setModeByKey(items, key, \"not_writing\");\n        // deselect all\n        items = this.deselectAll(items);\n        items[curretnStepIndex].selected = true;\n        items = this.addStepAfter(items, key, \"writing\", null);\n        this.setState({ descriptions: items });\n      }\n    }\n\n    // Tab or Shift + Tab\n    // TODO: shif + tab --> update the selected step\n    else if (event.which === 9) {\n      event.preventDefault();\n      // perform indention if it is writing\n      const currentStepIndex = this.getIndex(items, key, 0);\n\n      if (currentStepIndex > 0) {\n        const descIndexList = this.getDescendents(items, currentStepIndex);\n        // only tab\n        if (!event.shiftKey) {\n          if (items[currentStepIndex].mode === \"writing\" && items.length > 1) {\n            if (\n              items[currentStepIndex - 1].level >=\n                items[currentStepIndex].level &&\n              items[currentStepIndex].level <= 2\n            ) {\n              items[currentStepIndex].level += 1;\n              items = this.updateDescendents(\n                items,\n                descIndexList,\n                \"level_increase\"\n              );\n            }\n          }\n        } else {\n          // shift + tab\n          if (items[currentStepIndex].level >= 2)\n            items[currentStepIndex].level -= 1;\n          items = this.updateDescendents(\n            items,\n            descIndexList,\n            \"level_decrease\"\n          );\n        }\n        this.setState({ descriptions: items });\n      }\n\n      // TODO:\n      // up-down arrows\n      // change the selected item\n      // if (event.which) {\n      //     index = this.getSelected(this.state.descriptions);\n      // }\n    }\n\n    // TODO: drag to rearrange\n  }\n\n  // TODO:\n  // 1) next-prev video\n  // 2) saving the description\n  // 3) styling the description pane\n  // 4) add guiddance (key bindings, ...)\n  // 5) record timestamp\n  // 6) record video control events (number of times, and types (jump to the future/past))\n\n  getIndex(stateItems, descriptionKey, offset) {\n    let items = [...stateItems];\n    let itemIndex = items\n      .map((item) => item.key)\n      .indexOf(parseInt(descriptionKey));\n    if (itemIndex >= 0) {\n      return itemIndex + offset;\n    }\n    return -1;\n  }\n\n  getWritingIndex(items) {\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].mode === \"writing\") {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  setModeByKey(stateItems, descriptionKey, mode) {\n    let items = [...stateItems];\n    let itemIndex = items\n      .map((item) => item.key)\n      .indexOf(parseInt(descriptionKey));\n    if (itemIndex >= 0) {\n      items[itemIndex].mode = mode;\n    } else {\n      console.log(\"step description does not exist\");\n    }\n\n    return items;\n  }\n\n  getMode(stateItems, descriptionKey, offset) {\n    let items = [...stateItems];\n    let itemIndex = items\n      .map((item) => item.key)\n      .indexOf(parseInt(descriptionKey));\n    if (items[itemIndex + offset] !== undefined) {\n      return items[itemIndex + offset].mode;\n    }\n    return undefined;\n  }\n\n  getSelected(items) {\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].selected) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  deselectAll(items) {\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].selected) {\n        items[i].selected = false;\n      }\n    }\n    return items;\n  }\n\n  addStepAfter(itemsState, key, mode, level) {\n    let items = [...itemsState];\n    let itemIndex = items.map((item) => item.key).indexOf(parseInt(key));\n    if (items[itemIndex].mode !== \"writing\") {\n      // add the new step\n      let mLevel = level;\n      if (level === null) {\n        mLevel = items[itemIndex].level;\n      }\n      const descIndexList = this.getDescendents(items, itemIndex);\n      const newItemIndex = descIndexList[descIndexList.length - 1] + 1;\n      items.splice(newItemIndex, 0, {\n        key: this.counter,\n        mode: mode,\n        level: mLevel,\n        selected: false,\n      });\n      this.counter += 1;\n    }\n    return items;\n  }\n\n  removeWritingStep(itemsState) {\n    let items = [...itemsState];\n    let newItems = [...items];\n    for (let i = 1; i < items.length; i++) {\n      if (items[i].mode === \"writing\") {\n        console.log(i);\n        newItems.splice(i, 1);\n        return newItems;\n      }\n    }\n    console.log(\"Didn't find the item, to remove\");\n    return newItems;\n  }\n\n  removeItem(items, index) {\n    items.splice(index, 1);\n    return items;\n  }\n\n  getDescendents(items, index) {\n    let descIndexList = [index];\n    const currentStepLevel = items[index].level;\n    for (let i = index + 1; i < items.length; i++) {\n      if (items[i].level > currentStepLevel) {\n        descIndexList.push(i);\n      } else {\n        break;\n      }\n    }\n    return descIndexList;\n  }\n\n  updateDescendents(items, desIndexList, action) {\n    for (let i = 1; i < desIndexList.length; i++) {\n      if (action === \"level_increase\") {\n        items[desIndexList[i]].level += 1;\n      } else if (action === \"level_decrease\") {\n        items[desIndexList[i]].level -= 1;\n      }\n    }\n\n    return items;\n  }\n\n  deleteItems(items, indexList) {\n    let newItems = [];\n    items.forEach((item, index) => {\n      if (!indexList.includes(index)) {\n        newItems.push(item);\n      }\n    });\n    return newItems;\n  }\n\n  getPrevSibling(items, index) {\n    // pre-condition: index > 0\n    for (let i = index - 1; i > 0; i--) {\n      if (items[i].level < items[index].level) {\n        return null;\n      }\n      if (items[index].level === items[i].level) {\n        return i;\n      }\n    }\n    return null;\n  }\n\n  saveUserData(descriptions, fileName) {\n    const descriptionsJson = JSON.stringify(descriptions);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}