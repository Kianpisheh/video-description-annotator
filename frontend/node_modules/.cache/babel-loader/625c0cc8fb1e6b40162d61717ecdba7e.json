{"ast":null,"code":"export async function sendDataToServer(data, sessionTime, videoID) {\n  data = pruneData(data);\n  data = {\n    video_id: videoID,\n    session_time: sessionTime,\n    descriptions: data\n  };\n  return fetch('http://localhost:9000/userData', {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  }).then(data => data.json());\n}\n\nfunction pruneData(data) {\n  let newData = [];\n  data.forEach(d => {\n    newData.push({\n      level: d.level,\n      text: d.text\n    });\n  });\n  return newData;\n}","map":{"version":3,"sources":["/Users/kian/HAKEE/annotator_app/frontend/src/apiCalls.js"],"names":["sendDataToServer","data","sessionTime","videoID","pruneData","video_id","session_time","descriptions","fetch","method","headers","body","JSON","stringify","then","json","newData","forEach","d","push","level","text"],"mappings":"AACA,OAAO,eAAeA,gBAAf,CAAgCC,IAAhC,EAAsCC,WAAtC,EAAmDC,OAAnD,EAA4D;AAE/DF,EAAAA,IAAI,GAAGG,SAAS,CAACH,IAAD,CAAhB;AAEAA,EAAAA,IAAI,GAAG;AAACI,IAAAA,QAAQ,EAAEF,OAAX;AAAoBG,IAAAA,YAAY,EAAEJ,WAAlC;AAA+CK,IAAAA,YAAY,EAAEN;AAA7D,GAAP;AAEA,SAAOO,KAAK,CAAC,gCAAD,EAAmC;AAC3CC,IAAAA,MAAM,EAAE,KADmC;AAE3CC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX,KAFkC;AAK3CC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeZ,IAAf;AALqC,GAAnC,CAAL,CAONa,IAPM,CAODb,IAAI,IAAIA,IAAI,CAACc,IAAL,EAPP,CAAP;AAQH;;AAED,SAASX,SAAT,CAAmBH,IAAnB,EAAyB;AACrB,MAAIe,OAAO,GAAG,EAAd;AACAf,EAAAA,IAAI,CAACgB,OAAL,CAAaC,CAAC,IAAI;AACdF,IAAAA,OAAO,CAACG,IAAR,CAAa;AAACC,MAAAA,KAAK,EAAEF,CAAC,CAACE,KAAV;AAAiBC,MAAAA,IAAI,EAAEH,CAAC,CAACG;AAAzB,KAAb;AACH,GAFD;AAIA,SAAOL,OAAP;AACH","sourcesContent":["\nexport async function sendDataToServer(data, sessionTime, videoID) {\n\n    data = pruneData(data);\n\n    data = {video_id: videoID, session_time: sessionTime, descriptions: data}\n\n    return fetch('http://localhost:9000/userData', {\n        method: 'PUT',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n    })\n    .then(data => data.json())\n}\n\nfunction pruneData(data) {\n    let newData = [];\n    data.forEach(d => {\n        newData.push({level: d.level, text: d.text});\n    });\n\n    return newData\n}"]},"metadata":{},"sourceType":"module"}