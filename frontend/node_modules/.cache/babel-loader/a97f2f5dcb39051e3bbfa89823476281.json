{"ast":null,"code":"var _jsxFileName = \"/Users/kian/HAKEE/annotator_app/frontend/src/components/DescriptionPane.jsx\";\nimport React from \"react\";\nimport StepDescription from \"./StepDescription\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class DescriptionPane extends React.Component {\n  constructor(props) {\n    super(props);\n    this.counter = 0;\n    this.state = {\n      descriptions: [{\n        key: 0,\n        mode: \"writing\",\n        level: 1\n      }]\n    };\n    this.counter += 1;\n    this.setMode = this.setMode.bind(this);\n    this.handleSingleClick = this.handleSingleClick.bind(this);\n    this.handleDoubleClick = this.handleDoubleClick.bind(this);\n    this.handleBlur = this.handleBlur.bind(this);\n    this.handleKeyAction = this.handleKeyAction.bind(this);\n    this.addStepAfter = this.addStepAfter.bind(this);\n  }\n\n  render() {\n    let descriptions = this.state.descriptions;\n    let descriptionList = descriptions.map(item => /*#__PURE__*/_jsxDEV(StepDescription, {\n      id: item.key.toString(),\n      onSingleClick: this.handleSingleClick,\n      onDoubleClick: this.handleDoubleClick,\n      onBlur: this.handleBlur,\n      onKeyPress: this.handleKeyAction,\n      mode: item.mode,\n      level: item.level\n    }, item.key.toString(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 32\n    }, this));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: descriptionList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 16\n    }, this);\n  }\n\n  handleSingleClick(key, txt) {\n    if (txt === \"\") {\n      let items = this.setMode(key, \"writing\");\n      this.setState({\n        items\n      });\n    } else {\n      //TODO: add  writing description step below\n      let items = this.addStepAfter(key, \"writing\", 1);\n      console.log(items);\n      this.setState({\n        items\n      }); // remove the previous writing step-description\n    }\n  }\n\n  handleDoubleClick(key) {\n    let items = this.setMode(key, \"writing\");\n    this.setState({\n      items\n    }); // TODO: remove the following writing\n  }\n\n  handleBlur(key, txt) {\n    if (txt !== \"\") {\n      let items = this.setMode(key, \"not_writing\");\n      this.setState({\n        items\n      });\n    } else {\n      let items = this.setMode(key, \"writing\");\n      this.setState({\n        items\n      });\n    }\n  }\n\n  handleKeyAction(key, txt) {// Enter\n    //    key --> non-writing\n    //    key + 1 created in non-wiring mode\n    // Del or backspace\n    //    if non-writing\n    //       delete the key\n    // Space or Tab\n    //    if it is non-writing\n    //          indention \n    //    else \n    //         do nothing\n  }\n\n  setMode(descriptionKey, mode) {\n    let items = [...this.state.descriptions];\n    let itemIndex = items.map(item => item.key).indexOf(parseInt(descriptionKey));\n\n    if (itemIndex >= 0) {\n      items[itemIndex].mode = mode;\n    } else {\n      console.log(\"step description does not exist\");\n    }\n\n    return items;\n  }\n\n  getMode(descriptionKey) {\n    let items = [...this.state.descriptions];\n    let itemIndex = items.map(item => item.key).indexOf(parseInt(descriptionKey));\n\n    if (itemIndex >= 0) {\n      return items[itemIndex].mode;\n    }\n\n    return \"\";\n  }\n\n  addStepAfter(key, mode, level) {\n    let items = [...this.state.descriptions];\n    let itemIndex = items.map(item => item.key).indexOf(parseInt(key));\n    items.splice(itemIndex, 0, {\n      key: key,\n      mode: mode,\n      level: level\n    });\n    return items;\n  }\n\n}","map":{"version":3,"sources":["/Users/kian/HAKEE/annotator_app/frontend/src/components/DescriptionPane.jsx"],"names":["React","StepDescription","DescriptionPane","Component","constructor","props","counter","state","descriptions","key","mode","level","setMode","bind","handleSingleClick","handleDoubleClick","handleBlur","handleKeyAction","addStepAfter","render","descriptionList","map","item","toString","txt","items","setState","console","log","descriptionKey","itemIndex","indexOf","parseInt","getMode","splice"],"mappings":"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","sourcesContent":["import React from \"react\"\n\nimport StepDescription from \"./StepDescription\"\n\n\nexport default class DescriptionPane extends React.Component {\n    constructor(props) {\n        super(props);\n        this.counter = 0;\n        this.state = {descriptions: [{key: 0, mode: \"writing\", level: 1}]};\n        this.counter += 1;\n\n        this.setMode = this.setMode.bind(this);\n\n        this.handleSingleClick = this.handleSingleClick.bind(this);\n        this.handleDoubleClick = this.handleDoubleClick.bind(this);\n        this.handleBlur = this.handleBlur.bind(this);\n        this.handleKeyAction = this.handleKeyAction.bind(this);\n        this.addStepAfter = this.addStepAfter.bind(this);\n\n    }\n\n    render() {\n        let descriptions = this.state.descriptions;\n        let descriptionList = descriptions.map((item) => \n                               <StepDescription id={item.key.toString()} \n                                                key={item.key.toString()} \n                                                onSingleClick={this.handleSingleClick} \n                                                onDoubleClick={this.handleDoubleClick}\n                                                onBlur={this.handleBlur}\n                                                onKeyPress={this.handleKeyAction} \n                                                mode={item.mode} \n                                                level={item.level}/>)\n        return <div>{descriptionList}</div>\n        \n    }\n\n    handleSingleClick(key, txt) {\n        if (txt === \"\") {\n            let items = this.setMode(key, \"writing\");\n            this.setState({items});\n        } else {\n            //TODO: add  writing description step below\n            let items = this.addStepAfter(key, \"writing\", 1);\n            console.log(items);\n            this.setState({items});\n            // remove the previous writing step-description\n        }\n    }\n\n    handleDoubleClick(key) {\n        let items = this.setMode(key, \"writing\");\n        this.setState({items});\n        // TODO: remove the following writing\n    }\n\n    handleBlur(key, txt) {\n        if (txt !== \"\") {\n            let items = this.setMode(key, \"not_writing\");\n            this.setState({items});\n        } else {\n            let items = this.setMode(key, \"writing\");\n            this.setState({items});\n        }\n    }\n\n    handleKeyAction(key, txt) {\n        // Enter\n        //    key --> non-writing\n        //    key + 1 created in non-wiring mode\n\n        // Del or backspace\n        //    if non-writing\n        //       delete the key\n\n        // Space or Tab\n        //    if it is non-writing\n        //          indention \n        //    else \n        //         do nothing\n    }\n\n    setMode(descriptionKey, mode) {\n        let items = [...this.state.descriptions];\n        let itemIndex = items.map(item => item.key).indexOf(parseInt(descriptionKey));\n        if (itemIndex >= 0) {\n            items[itemIndex].mode = mode;\n        } else {\n            console.log(\"step description does not exist\")\n        }\n        \n        return items;\n    \n    }\n\n    getMode(descriptionKey) {\n        let items = [...this.state.descriptions];\n        let itemIndex = items.map(item => item.key).indexOf(parseInt(descriptionKey));\n        if (itemIndex >= 0) {\n            return items[itemIndex].mode;\n        }\n        return \"\"\n    }\n\n    addStepAfter(key, mode, level) {\n        let items = [...this.state.descriptions];\n        let itemIndex = items.map(item => item.key).indexOf(parseInt(key));\n        items.splice(itemIndex, 0, {key: key, mode: mode, level: level})\n        return items;\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}