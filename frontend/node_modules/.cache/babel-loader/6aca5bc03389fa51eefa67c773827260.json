{"ast":null,"code":"var _jsxFileName = \"/Users/kian/HAKEE/annotator_app/frontend/src/components/DescriptionPane.jsx\";\nimport React from \"react\";\nimport StepDescription from \"./StepDescription\";\nimport \"./DescriptionPane.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class DescriptionPane extends React.Component {\n  constructor(props) {\n    super(props);\n    this.counter = 0;\n    this.state = {\n      descriptions: [{\n        key: 0,\n        mode: \"writing\",\n        level: 1,\n        selected: true,\n        text: \"\"\n      }]\n    };\n    this.counter += 1;\n    this.setModeByKey = this.setModeByKey.bind(this);\n    this.getMode = this.getMode.bind(this);\n    this.addStepAfter = this.addStepAfter.bind(this);\n    this.removeWritingStep = this.removeWritingStep.bind(this);\n    this.getSelected = this.getSelected.bind(this);\n    this.getWritingStep = this.getWritingStep.bind(this);\n    this.deselectAll = this.deselectAll.bind(this);\n    this.getIndex = this.getIndex.bind(this);\n    this.getWritingIndex = this.getWritingIndex.bind(this);\n    this.removeItem = this.removeItem.bind(this);\n    this.updateDescendents = this.updateDescendents.bind(this);\n    this.getDescendents = this.getDescendents.bind(this);\n    this.deleteItems = this.deleteItems.bind(this);\n    this.getPrevSibling = this.getPrevSibling.bind(this);\n    this.handleSingleClick = this.handleSingleClick.bind(this); //this.handleDoubleClick = this.handleDoubleClick.bind(this);\n\n    this.handleBlur = this.handleBlur.bind(this);\n    this.handleKeyAction = this.handleKeyAction.bind(this);\n  }\n\n  render() {\n    let descriptions = this.state.descriptions;\n    let descriptionListG = [];\n    let stepDescriptionList = [];\n\n    for (let i = 0; i < descriptions.length; i++) {\n      // new step\n      if (descriptions[i].level === 1) {\n        if (stepDescriptionList.length) {\n          descriptionListG.push(stepDescriptionList);\n        }\n\n        stepDescriptionList = [descriptions[i]];\n      } else {\n        // descendents\n        stepDescriptionList.push(descriptions[i]);\n      }\n\n      if (i === descriptions.length - 1) {\n        if (stepDescriptionList.length) {\n          descriptionListG.push(stepDescriptionList);\n        }\n      }\n    }\n\n    let x = 1;\n    let stepComponentsList = descriptionListG.map((stepList, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      id: index.toString(),\n      className: \"step-div\",\n      children: stepList.map(item => /*#__PURE__*/_jsxDEV(StepDescription, {\n        id: item.key.toString(),\n        onSingleClick: this.handleSingleClick,\n        onDoubleClick: this.handleDoubleClick,\n        onBlur: this.handleBlur,\n        onKeyPress: this.handleKeyAction,\n        item: item\n      }, item.key.toString(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 6\n      }, this))\n    }, index.toString(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 4\n    }, this));\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: stepComponentsList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 10\n    }, this);\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"keydown\", event => this.handleKeyAction(null, \"\", event));\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"keydown\", event => this.handleKeyAction(null, \"\", event));\n  }\n\n  handleSingleClick(key, txt, event) {\n    let items = [...this.state.descriptions];\n\n    if (txt !== \"\") {\n      let index = this.getIndex(items, key, 0);\n      const oldWritingIndex = this.getWritingIndex(items);\n      items[index].mode = \"writing\";\n      items = this.deselectAll(items);\n      items[index].selected = true;\n      this.setState({\n        descriptions: items\n      }); // } else if (event.shiftKey) {\n      // \t// it is non-writing\n      // \tconst currentStepMode = this.getMode(this.state.descriptions, key, 0);\n      // \tconst nextStepMode = this.getMode(this.state.descriptions, key, 1);\n      // \tif (\n      // \t\tcurrentStepMode === \"not_writing\" &&\n      // \t\t(nextStepMode !== \"writing\" || nextStepMode === undefined)\n      // \t) {\n      // \t\t// remove existing writing step\n      // \t\tlet items = this.removeWritingStep(this.state.descriptions);\n      // \t\t// select the current step\n      // \t\titems = this.deselectAll(items);\n      // \t\titems[this.getIndex(items, key, 0)].selected = true;\n      // \t\tthis.setState({ descriptions: items });\n      // \t}\n    }\n  } // handleDoubleClick(key) {\n  // \tlet items = this.deselectAll(this.state.descriptions);\n  // \t// update the selected step\n  // \tconst currentIndex = this.getIndex(items, key, 0);\n  // \tconst oldWritingIndex = this.getWritingIndex(items);\n  // \tif (items[currentIndex].mode !== \"writing\") {\n  // \t\titems[currentIndex].mode = \"writing\";\n  // \t\titems[currentIndex].selected = true;\n  // \t\tif (oldWritingIndex > 0) {\n  // \t\t\titems = this.removeItem(items, oldWritingIndex);\n  // \t\t}\n  // \t\tthis.setState({ descriptions: items });\n  // \t}\n  // }\n\n\n  handleBlur(key, txt) {\n    let items = [...this.state.descriptions];\n\n    if (txt !== \"\") {\n      const index = this.getIndex(items, key, 0);\n      items[index].mode = \"not_writing\";\n      items[index].text = txt;\n    } else if (txt === \"\" && items.length > 1) {\n      items = this.removeWritingStep(items);\n    }\n\n    this.setState({\n      descriptions: items\n    });\n  }\n\n  handleKeyAction(key, txt, event) {\n    event.stopImmediatePropagation();\n    let items = [...this.state.descriptions]; // del --> delete step\n\n    if (event.which === 46) {\n      let currentStepIndex = null;\n\n      if (key === null) {\n        // delete (window listener)\n        currentStepIndex = this.getSelected(items);\n      } else {\n        // delete (<input> listener)\n        currentStepIndex = this.getIndex(items, key, 0);\n      }\n\n      if (items[currentStepIndex].selected && items.length >= 2) {\n        // select the previous/next step\n        items = this.deselectAll(items);\n        const descIndexList = this.getDescendents(items, currentStepIndex);\n\n        if (currentStepIndex === 0) {\n          items[currentStepIndex + descIndexList.length].selected = true;\n        } else {\n          const prevSiblingIndex = this.getPrevSibling(items, currentStepIndex);\n          let offset = 1;\n\n          if (!(prevSiblingIndex == null)) {\n            const prevStepDescIndexList = this.getDescendents(items, prevSiblingIndex);\n            offset = prevStepDescIndexList.length;\n          }\n\n          items[currentStepIndex - offset].selected = true;\n        } // do not delete everything\n\n\n        if (descIndexList.length < items.length) {\n          items = this.deleteItems(items, descIndexList);\n          this.setState({\n            descriptions: items\n          });\n        }\n      }\n    } // Enter --> nex step (writing)\n    else if (event.which === 13 && txt !== \"\") {\n      console.log(\"enter\");\n      const currentStepMode = this.getMode(items, key, 0);\n      const curretnStepIndex = this.getIndex(items, key, 0);\n      let newStepIndex = curretnStepIndex;\n\n      if (currentStepMode === \"writing\" || currentStepMode === \"not_writing\" && items[curretnStepIndex].selected) {\n        // change the current step to non-writing and add one writing step after it\n        items[curretnStepIndex].mode = \"not_writing\";\n        items[curretnStepIndex].text = txt; // select the current step\n\n        items = this.deselectAll(items);\n        [items, newStepIndex] = this.addStepAfter(items, key, \"writing\", null);\n        items[newStepIndex].selected = true;\n        this.setState({\n          descriptions: items\n        });\n      }\n    } // Tab or Shift + Tab\n    else if (event.which === 9) {\n      event.preventDefault(); // perform indention if it is writing\n\n      const currentStepIndex = this.getIndex(items, key, 0);\n\n      if (currentStepIndex > 0) {\n        const descIndexList = this.getDescendents(items, currentStepIndex); // only tab\n\n        if (!event.shiftKey) {\n          if (items[currentStepIndex].mode === \"writing\" && items.length > 1) {\n            if (items[currentStepIndex - 1].level >= items[currentStepIndex].level && items[currentStepIndex].level <= 2) {\n              items[currentStepIndex].level += 1;\n              items = this.updateDescendents(items, descIndexList, \"level_increase\");\n              this.setState({\n                descriptions: items\n              });\n            }\n          }\n        } else {\n          // shift + tab\n          if (items[currentStepIndex].level >= 2) {\n            items[currentStepIndex].level -= 1;\n            items = this.updateDescendents(items, descIndexList, \"level_decrease\");\n            this.setState({\n              descriptions: items\n            });\n          }\n        }\n      }\n    } else if (event.which === 40 || event.which === 38) {\n      items = [...this.state.descriptions];\n      let index = this.getSelected(items);\n      items[index].selected = false;\n      items[index].mode = \"not_writing\";\n\n      if (event.which === 40) {\n        if (index < items.length - 1) {\n          index += 1;\n        }\n      } else {\n        if (index > 0) index -= 1;\n      }\n\n      items[index].selected = true;\n      items[index].mode = \"writing\";\n      this.setState({\n        descriptions: items\n      });\n    } // up-down arrows\n    // change the selected item\n    // if (event.which) {\n    //     index = this.getSelected(this.state.descriptions);\n    // }\n\n  } // TODO: drag to rearrange\n  // TODO:\n  // 1) next-prev video\n  // 2) saving the description\n  // 4) add guiddance (key bindings, ...)\n  // 5) record timestamp\n  // 6) record video control events (number of times, and types (jump to the future/past))\n\n\n  getIndex(stateItems, descriptionKey, offset) {\n    let items = [...stateItems];\n    let itemIndex = items.map(item => item.key).indexOf(parseInt(descriptionKey));\n\n    if (itemIndex >= 0) {\n      return itemIndex + offset;\n    }\n\n    return -1;\n  }\n\n  getWritingIndex(items) {\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].mode === \"writing\") {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  setModeByKey(stateItems, descriptionKey, mode) {\n    let items = [...stateItems];\n    let itemIndex = items.map(item => item.key).indexOf(parseInt(descriptionKey));\n\n    if (itemIndex >= 0) {\n      items[itemIndex].mode = mode;\n    } else {\n      console.log(\"step description does not exist\");\n    }\n\n    return items;\n  }\n\n  getMode(stateItems, descriptionKey, offset) {\n    let items = [...stateItems];\n    let itemIndex = items.map(item => item.key).indexOf(parseInt(descriptionKey));\n\n    if (items[itemIndex + offset] !== undefined) {\n      return items[itemIndex + offset].mode;\n    }\n\n    return undefined;\n  }\n\n  getSelected(items) {\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].selected) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  getWritingStep(items) {\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].mode === \"writing\") {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  deselectAll(items) {\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].selected) {\n        items[i].selected = false;\n      }\n    }\n\n    return items;\n  }\n\n  addStepAfter(itemsState, key, mode, level) {\n    let items = [...itemsState];\n    let itemIndex = items.map(item => item.key).indexOf(parseInt(key)); // add the new step\n\n    let mLevel = level;\n\n    if (level === null) {\n      mLevel = items[itemIndex].level;\n    }\n\n    const descIndexList = this.getDescendents(items, itemIndex);\n    let newItemIndex = descIndexList[descIndexList.length - 1] + 1;\n    items.splice(newItemIndex, 0, {\n      key: this.counter,\n      mode: mode,\n      level: mLevel,\n      selected: true,\n      text: \"\"\n    });\n    this.counter += 1;\n    return [items, newItemIndex];\n  }\n\n  removeWritingStep(itemsState) {\n    let items = [...itemsState];\n    let newItems = [...items];\n\n    for (let i = 1; i < items.length; i++) {\n      if (items[i].mode === \"writing\") {\n        newItems.splice(i, 1);\n        return newItems;\n      }\n    }\n\n    console.log(\"Didn't find the item, to remove\");\n    return newItems;\n  }\n\n  removeItem(items, index) {\n    items.splice(index, 1);\n    return items;\n  }\n\n  getDescendents(items, index) {\n    let descIndexList = [index];\n    const currentStepLevel = items[index].level;\n\n    for (let i = index + 1; i < items.length; i++) {\n      if (items[i].level > currentStepLevel) {\n        descIndexList.push(i);\n      } else {\n        break;\n      }\n    }\n\n    return descIndexList;\n  }\n\n  updateDescendents(items, desIndexList, action) {\n    for (let i = 1; i < desIndexList.length; i++) {\n      if (action === \"level_increase\") {\n        items[desIndexList[i]].level += 1;\n      } else if (action === \"level_decrease\") {\n        items[desIndexList[i]].level -= 1;\n      }\n    }\n\n    return items;\n  }\n\n  deleteItems(items, indexList) {\n    let newItems = [];\n    items.forEach((item, index) => {\n      if (!indexList.includes(index)) {\n        newItems.push(item);\n      }\n    });\n    return newItems;\n  }\n\n  getPrevSibling(items, index) {\n    // pre-condition: index > 0\n    for (let i = index - 1; i > 0; i--) {\n      if (items[i].level < items[index].level) {\n        return null;\n      }\n\n      if (items[index].level === items[i].level) {\n        return i;\n      }\n    }\n\n    return null;\n  }\n\n  saveUserData(descriptions, fileName) {\n    const descriptionsJson = JSON.stringify(descriptions);\n  }\n\n}","map":{"version":3,"sources":["/Users/kian/HAKEE/annotator_app/frontend/src/components/DescriptionPane.jsx"],"names":["React","StepDescription","DescriptionPane","Component","constructor","props","counter","state","descriptions","key","mode","level","selected","text","setModeByKey","bind","getMode","addStepAfter","removeWritingStep","getSelected","getWritingStep","deselectAll","getIndex","getWritingIndex","removeItem","updateDescendents","getDescendents","deleteItems","getPrevSibling","handleSingleClick","handleBlur","handleKeyAction","render","descriptionListG","stepDescriptionList","i","length","push","x","stepComponentsList","map","stepList","index","toString","item","handleDoubleClick","componentDidMount","window","addEventListener","event","componentWillUnmount","removeEventListener","txt","items","oldWritingIndex","setState","stopImmediatePropagation","which","currentStepIndex","descIndexList","prevSiblingIndex","offset","prevStepDescIndexList","console","log","currentStepMode","curretnStepIndex","newStepIndex","preventDefault","shiftKey","stateItems","descriptionKey","itemIndex","indexOf","parseInt","undefined","itemsState","mLevel","newItemIndex","splice","newItems","currentStepLevel","desIndexList","action","indexList","forEach","includes","saveUserData","fileName","descriptionsJson","JSON","stringify"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nimport StepDescription from \"./StepDescription\";\n\nimport \"./DescriptionPane.css\";\n\nexport default class DescriptionPane extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.counter = 0;\n\t\tthis.state = {\n\t\t\tdescriptions: [{ key: 0, mode: \"writing\", level: 1, selected: true, text: \"\" }],\n\t\t};\n\t\tthis.counter += 1;\n\n\t\tthis.setModeByKey = this.setModeByKey.bind(this);\n\t\tthis.getMode = this.getMode.bind(this);\n\t\tthis.addStepAfter = this.addStepAfter.bind(this);\n\t\tthis.removeWritingStep = this.removeWritingStep.bind(this);\n\t\tthis.getSelected = this.getSelected.bind(this);\n\t\tthis.getWritingStep = this.getWritingStep.bind(this);\n\t\tthis.deselectAll = this.deselectAll.bind(this);\n\t\tthis.getIndex = this.getIndex.bind(this);\n\t\tthis.getWritingIndex = this.getWritingIndex.bind(this);\n\t\tthis.removeItem = this.removeItem.bind(this);\n\t\tthis.updateDescendents = this.updateDescendents.bind(this);\n\t\tthis.getDescendents = this.getDescendents.bind(this);\n\t\tthis.deleteItems = this.deleteItems.bind(this);\n\t\tthis.getPrevSibling = this.getPrevSibling.bind(this);\n\n\t\tthis.handleSingleClick = this.handleSingleClick.bind(this);\n\t\t//this.handleDoubleClick = this.handleDoubleClick.bind(this);\n\t\tthis.handleBlur = this.handleBlur.bind(this);\n\t\tthis.handleKeyAction = this.handleKeyAction.bind(this);\n\t}\n\n\trender() {\n\t\tlet descriptions = this.state.descriptions;\n\t\tlet descriptionListG = [];\n\t\tlet stepDescriptionList = [];\n\t\tfor (let i = 0; i < descriptions.length; i++) {\n\t\t\t// new step\n\t\t\tif (descriptions[i].level === 1) {\n\t\t\t\tif (stepDescriptionList.length) {\n\t\t\t\t\tdescriptionListG.push(stepDescriptionList);\n\t\t\t\t}\n\t\t\t\tstepDescriptionList = [descriptions[i]];\n\t\t\t} else {\n\t\t\t\t// descendents\n\t\t\t\tstepDescriptionList.push(descriptions[i]);\n\t\t\t}\n\t\t\tif (i === descriptions.length - 1) {\n\t\t\t\tif (stepDescriptionList.length) {\n\t\t\t\t\tdescriptionListG.push(stepDescriptionList);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlet x = 1;\n\t\tlet stepComponentsList = descriptionListG.map((stepList, index) => (\n\t\t\t<div key={index.toString()} id={index.toString()} className=\"step-div\">\n\t\t\t\t{stepList.map((item) => (\n\t\t\t\t\t<StepDescription\n\t\t\t\t\t\tid={item.key.toString()}\n\t\t\t\t\t\tkey={item.key.toString()}\n\t\t\t\t\t\tonSingleClick={this.handleSingleClick}\n\t\t\t\t\t\tonDoubleClick={this.handleDoubleClick}\n\t\t\t\t\t\tonBlur={this.handleBlur}\n\t\t\t\t\t\tonKeyPress={this.handleKeyAction}\n\t\t\t\t\t\titem={item}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t));\n\n\t\treturn <React.Fragment>{stepComponentsList}</React.Fragment>;\n\t}\n\n\tcomponentDidMount() {\n\t\twindow.addEventListener(\"keydown\", (event) =>\n\t\t\tthis.handleKeyAction(null, \"\", event)\n\t\t);\n\t}\n\n\tcomponentWillUnmount() {\n\t\twindow.removeEventListener(\"keydown\", (event) =>\n\t\t\tthis.handleKeyAction(null, \"\", event)\n\t\t);\n\t}\n\n\thandleSingleClick(key, txt, event) {\n\t\tlet items = [...this.state.descriptions];\n\t\tif (txt !== \"\") {\n\t\t\tlet index = this.getIndex(items, key, 0);\n\t\t\tconst oldWritingIndex = this.getWritingIndex(items);\n\t\t\titems[index].mode = \"writing\";\n\t\t\titems = this.deselectAll(items);\n\t\t\titems[index].selected = true;\n\t\t\tthis.setState({ descriptions: items });\n\t\t// } else if (event.shiftKey) {\n\t\t// \t// it is non-writing\n\t\t// \tconst currentStepMode = this.getMode(this.state.descriptions, key, 0);\n\t\t// \tconst nextStepMode = this.getMode(this.state.descriptions, key, 1);\n\t\t// \tif (\n\t\t// \t\tcurrentStepMode === \"not_writing\" &&\n\t\t// \t\t(nextStepMode !== \"writing\" || nextStepMode === undefined)\n\t\t// \t) {\n\t\t// \t\t// remove existing writing step\n\t\t// \t\tlet items = this.removeWritingStep(this.state.descriptions);\n\t\t// \t\t// select the current step\n\t\t// \t\titems = this.deselectAll(items);\n\t\t// \t\titems[this.getIndex(items, key, 0)].selected = true;\n\t\t// \t\tthis.setState({ descriptions: items });\n\t\t// \t}\n\n\t}\n}\n\n\t// handleDoubleClick(key) {\n\t// \tlet items = this.deselectAll(this.state.descriptions);\n\t// \t// update the selected step\n\t// \tconst currentIndex = this.getIndex(items, key, 0);\n\t// \tconst oldWritingIndex = this.getWritingIndex(items);\n\t// \tif (items[currentIndex].mode !== \"writing\") {\n\t// \t\titems[currentIndex].mode = \"writing\";\n\t// \t\titems[currentIndex].selected = true;\n\n\t// \t\tif (oldWritingIndex > 0) {\n\t// \t\t\titems = this.removeItem(items, oldWritingIndex);\n\t// \t\t}\n\t// \t\tthis.setState({ descriptions: items });\n\t// \t}\n\t// }\n\n\thandleBlur(key, txt) {\n\t\tlet items = [...this.state.descriptions];\n\t\tif (txt !== \"\") {\n\t\t\tconst index = this.getIndex(items, key, 0);\n\t\t\titems[index].mode = \"not_writing\";\n\t\t\titems[index].text = txt;\n\t\t} else if (txt === \"\" && items.length > 1) {\n\t\t\titems = this.removeWritingStep(items);\n\t\t}\n\t\tthis.setState({ descriptions: items });\n\t}\n\n\thandleKeyAction(key, txt, event) {\n\t\tevent.stopImmediatePropagation();\n\t\tlet items = [...this.state.descriptions];\n\n\t\t// del --> delete step\n\t\tif (event.which === 46) {\n\t\t\tlet currentStepIndex = null;\n\t\t\tif (key === null) {\n\t\t\t\t// delete (window listener)\n\t\t\t\tcurrentStepIndex = this.getSelected(items);\n\t\t\t} else {\n\t\t\t\t// delete (<input> listener)\n\t\t\t\tcurrentStepIndex = this.getIndex(items, key, 0);\n\t\t\t}\n\n\t\t\tif (items[currentStepIndex].selected && items.length >= 2) {\n\t\t\t\t// select the previous/next step\n\t\t\t\titems = this.deselectAll(items);\n\t\t\t\tconst descIndexList = this.getDescendents(items, currentStepIndex);\n\t\t\t\tif (currentStepIndex === 0) {\n\t\t\t\t\titems[currentStepIndex + descIndexList.length].selected = true;\n\t\t\t\t} else {\n\t\t\t\t\tconst prevSiblingIndex = this.getPrevSibling(items, currentStepIndex);\n\t\t\t\t\tlet offset = 1;\n\t\t\t\t\tif (!(prevSiblingIndex == null)) {\n\t\t\t\t\t\tconst prevStepDescIndexList = this.getDescendents(\n\t\t\t\t\t\t\titems,\n\t\t\t\t\t\t\tprevSiblingIndex\n\t\t\t\t\t\t);\n\t\t\t\t\t\toffset = prevStepDescIndexList.length;\n\t\t\t\t\t}\n\t\t\t\t\titems[currentStepIndex - offset].selected = true;\n\t\t\t\t}\n\t\t\t\t// do not delete everything\n\t\t\t\tif (descIndexList.length < items.length) {\n\t\t\t\t\titems = this.deleteItems(items, descIndexList);\n\t\t\t\t\tthis.setState({ descriptions: items });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Enter --> nex step (writing)\n\t\telse if (event.which === 13 && txt !== \"\") {\n\t\t\tconsole.log(\"enter\")\n\t\t\tconst currentStepMode = this.getMode(items, key, 0);\n\t\t\tconst curretnStepIndex = this.getIndex(items, key, 0);\n\t\t\tlet newStepIndex = curretnStepIndex;\n\t\t\tif (\n\t\t\t\tcurrentStepMode === \"writing\" ||\n\t\t\t\t(currentStepMode === \"not_writing\" && items[curretnStepIndex].selected)\n\t\t\t) {\n\t\t\t\t// change the current step to non-writing and add one writing step after it\n\t\t\t\titems[curretnStepIndex].mode = \"not_writing\";\n\t\t\t\titems[curretnStepIndex].text = txt;\n\t\t\t\t// select the current step\n\t\t\t\titems = this.deselectAll(items);\n\t\t\t\t[items, newStepIndex] = this.addStepAfter(items, key, \"writing\", null);\n\t\t\t\titems[newStepIndex].selected = true;\n\t\t\t\tthis.setState({ descriptions: items });\n\t\t\t}\n\t\t}\n\n\t\t// Tab or Shift + Tab\n\t\telse if (event.which === 9) {\n\t\t\tevent.preventDefault();\n\t\t\t// perform indention if it is writing\n\t\t\tconst currentStepIndex = this.getIndex(items, key, 0);\n\n\t\t\tif (currentStepIndex > 0) {\n\t\t\t\tconst descIndexList = this.getDescendents(items, currentStepIndex);\n\t\t\t\t// only tab\n\t\t\t\tif (!event.shiftKey) {\n\t\t\t\t\tif (items[currentStepIndex].mode === \"writing\" && items.length > 1) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\titems[currentStepIndex - 1].level >=\n\t\t\t\t\t\t\titems[currentStepIndex].level &&\n\t\t\t\t\t\t\titems[currentStepIndex].level <= 2\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\titems[currentStepIndex].level += 1;\n\t\t\t\t\t\t\titems = this.updateDescendents(\n\t\t\t\t\t\t\t\titems,\n\t\t\t\t\t\t\t\tdescIndexList,\n\t\t\t\t\t\t\t\t\"level_increase\"\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tthis.setState({ descriptions: items });\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// shift + tab\n\t\t\t\t\tif (items[currentStepIndex].level >= 2) {\n\t\t\t\t\t\titems[currentStepIndex].level -= 1;\n\t\t\t\t\t\titems = this.updateDescendents(\n\t\t\t\t\t\t\titems,\n\t\t\t\t\t\t\tdescIndexList,\n\t\t\t\t\t\t\t\"level_decrease\"\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis.setState({ descriptions: items });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\telse if (event.which === 40 || event.which === 38) {\n\t\t\titems = [...this.state.descriptions];\n\t\t\tlet index = this.getSelected(items);\n\t\t\titems[index].selected = false;\n\t\t\titems[index].mode = \"not_writing\";\n\t\t\tif (event.which === 40) {\n\t\t\t\tif (index < items.length - 1) {\n\t\t\t\t\tindex += 1;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (index > 0) index -= 1;\n\t\t\t}\n\t\t\titems[index].selected = true;\n\t\t\titems[index].mode = \"writing\";\n\t\t\tthis.setState({ descriptions: items });\n\t\t}\n\t\t// up-down arrows\n\t\t// change the selected item\n\t\t// if (event.which) {\n\t\t//     index = this.getSelected(this.state.descriptions);\n\t\t// }\n\n\t}\n\n\t// TODO: drag to rearrange\n\n\t// TODO:\n\t// 1) next-prev video\n\t// 2) saving the description\n\t// 4) add guiddance (key bindings, ...)\n\t// 5) record timestamp\n\t// 6) record video control events (number of times, and types (jump to the future/past))\n\n\tgetIndex(stateItems, descriptionKey, offset) {\n\t\tlet items = [...stateItems];\n\t\tlet itemIndex = items\n\t\t\t.map((item) => item.key)\n\t\t\t.indexOf(parseInt(descriptionKey));\n\t\tif (itemIndex >= 0) {\n\t\t\treturn itemIndex + offset;\n\t\t}\n\t\treturn -1;\n\t}\n\n\tgetWritingIndex(items) {\n\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\tif (items[i].mode === \"writing\") {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\n\tsetModeByKey(stateItems, descriptionKey, mode) {\n\t\tlet items = [...stateItems];\n\t\tlet itemIndex = items\n\t\t\t.map((item) => item.key)\n\t\t\t.indexOf(parseInt(descriptionKey));\n\t\tif (itemIndex >= 0) {\n\t\t\titems[itemIndex].mode = mode;\n\t\t} else {\n\t\t\tconsole.log(\"step description does not exist\");\n\t\t}\n\n\t\treturn items;\n\t}\n\n\tgetMode(stateItems, descriptionKey, offset) {\n\t\tlet items = [...stateItems];\n\t\tlet itemIndex = items\n\t\t\t.map((item) => item.key)\n\t\t\t.indexOf(parseInt(descriptionKey));\n\t\tif (items[itemIndex + offset] !== undefined) {\n\t\t\treturn items[itemIndex + offset].mode;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tgetSelected(items) {\n\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\tif (items[i].selected) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\n\tgetWritingStep(items) {\n\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\tif (items[i].mode === \"writing\") {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\n\tdeselectAll(items) {\n\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\tif (items[i].selected) {\n\t\t\t\titems[i].selected = false;\n\t\t\t}\n\t\t}\n\t\treturn items;\n\t}\n\n\taddStepAfter(itemsState, key, mode, level) {\n\t\tlet items = [...itemsState];\n\t\tlet itemIndex = items.map((item) => item.key).indexOf(parseInt(key));\n\t\t// add the new step\n\t\tlet mLevel = level;\n\t\tif (level === null) {\n\t\t\tmLevel = items[itemIndex].level;\n\t\t}\n\t\tconst descIndexList = this.getDescendents(items, itemIndex);\n\t\tlet newItemIndex = descIndexList[descIndexList.length - 1] + 1;\n\t\titems.splice(newItemIndex, 0, {\n\t\t\tkey: this.counter,\n\t\t\tmode: mode,\n\t\t\tlevel: mLevel,\n\t\t\tselected: true,\n\t\t\ttext: \"\"\n\t\t});\n\t\tthis.counter += 1;\n\n\t\treturn [items, newItemIndex];\n\t}\n\n\tremoveWritingStep(itemsState) {\n\t\tlet items = [...itemsState];\n\t\tlet newItems = [...items];\n\t\tfor (let i = 1; i < items.length; i++) {\n\t\t\tif (items[i].mode === \"writing\") {\n\t\t\t\tnewItems.splice(i, 1);\n\t\t\t\treturn newItems;\n\t\t\t}\n\t\t}\n\t\tconsole.log(\"Didn't find the item, to remove\");\n\t\treturn newItems;\n\t}\n\n\tremoveItem(items, index) {\n\t\titems.splice(index, 1);\n\t\treturn items;\n\t}\n\n\tgetDescendents(items, index) {\n\t\tlet descIndexList = [index];\n\t\tconst currentStepLevel = items[index].level;\n\t\tfor (let i = index + 1; i < items.length; i++) {\n\t\t\tif (items[i].level > currentStepLevel) {\n\t\t\t\tdescIndexList.push(i);\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn descIndexList;\n\t}\n\n\tupdateDescendents(items, desIndexList, action) {\n\t\tfor (let i = 1; i < desIndexList.length; i++) {\n\t\t\tif (action === \"level_increase\") {\n\t\t\t\titems[desIndexList[i]].level += 1;\n\t\t\t} else if (action === \"level_decrease\") {\n\t\t\t\titems[desIndexList[i]].level -= 1;\n\t\t\t}\n\t\t}\n\n\t\treturn items;\n\t}\n\n\tdeleteItems(items, indexList) {\n\t\tlet newItems = [];\n\t\titems.forEach((item, index) => {\n\t\t\tif (!indexList.includes(index)) {\n\t\t\t\tnewItems.push(item);\n\t\t\t}\n\t\t});\n\t\treturn newItems;\n\t}\n\n\tgetPrevSibling(items, index) {\n\t\t// pre-condition: index > 0\n\t\tfor (let i = index - 1; i > 0; i--) {\n\t\t\tif (items[i].level < items[index].level) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif (items[index].level === items[i].level) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tsaveUserData(descriptions, fileName) {\n\t\tconst descriptionsJson = JSON.stringify(descriptions);\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}