{"ast":null,"code":"var _jsxFileName = \"/Users/kian/HAKEE/annotator_app/frontend/src/components/StepDescription.jsx\";\nimport React from 'react';\nimport \"./StepDescription.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class StepDescription extends React.Component {\n  constructor(props) {\n    super(props);\n    this.textInputRef = /*#__PURE__*/React.createRef();\n  }\n\n  render() {\n    console.log(this.props.item.text);\n    var config = this.getConfig(this.props.item);\n    return /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"input-text_\" + this.props.id.toString(),\n      ref: this.textInputRef,\n      type: \"text\",\n      placeholder: \"type here...\",\n      maxLength: \"30\",\n      size: \"30\",\n      autoComplete: \"off\",\n      blur: config.blur,\n      focus: config.focus,\n      autoFocus: config.autofocus,\n      readOnly: config.readOnly,\n      style: config.style,\n      onClick: event => this.props.onSingleClick(this.props.id, this.textInputRef.current.value, event),\n      onKeyDown: event => this.props.onKeyPress(this.props.id, this.textInputRef.current.value, event),\n      onBlur: () => this.props.onBlur(this.props.id, this.textInputRef.current.value)\n    }, this.props.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 16\n    }, this);\n  }\n\n  componentDidUpdate() {\n    const mode = this.props.item.mode;\n    const text = this.props.item.text;\n\n    if (mode === \"writing\") {} else {\n      this.textInputRef.current.value = text;\n    }\n  }\n\n  componentDidMount() {\n    const mode = this.props.item.mode;\n    const text = this.props.item.text;\n\n    if (mode === \"writing\") {} else {\n      this.textInputRef.current.value = text;\n    }\n  }\n\n  getConfig(item) {\n    const {\n      mode,\n      selected,\n      level\n    } = item;\n    let textInputStyle = {};\n    let blur = \"false\";\n    let focus = \"true\";\n    let autofocus = true;\n    let readOnly = false;\n\n    if (mode === \"writing\") {\n      textInputStyle = {\n        cursor: \"text\",\n        backgroundColor: \"#11112112\"\n      };\n    } else if (mode === \"not_writing\") {\n      textInputStyle = {\n        cursor: \"pointer\",\n        backgroundColor: \"#20D0FF\"\n      };\n      blur = \"true\";\n      focus = \"false\";\n      readOnly = true;\n      autofocus = false;\n    } // level-related styling\n\n\n    textInputStyle.marginLeft = (level - 1) * 50;\n    textInputStyle.marginTop = 12;\n    textInputStyle.fontSize = 17;\n\n    if (level === 2) {\n      textInputStyle.marginTop = 4;\n      textInputStyle.fontSize = 15;\n    } else if (level === 3) {\n      textInputStyle.marginTop = 2;\n      textInputStyle.fontSize = 14;\n    }\n\n    return {\n      readOnly: readOnly,\n      style: textInputStyle,\n      focus: focus,\n      blur: blur,\n      autofocus: autofocus\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/kian/HAKEE/annotator_app/frontend/src/components/StepDescription.jsx"],"names":["React","StepDescription","Component","constructor","props","textInputRef","createRef","render","console","log","item","text","config","getConfig","id","toString","blur","focus","autofocus","readOnly","style","event","onSingleClick","current","value","onKeyPress","onBlur","componentDidUpdate","mode","componentDidMount","selected","level","textInputStyle","cursor","backgroundColor","marginLeft","marginTop","fontSize"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport \"./StepDescription.css\"\n\nexport default class StepDescription extends React.Component {\n    constructor(props) {\n        super(props);\n        this.textInputRef = React.createRef();\n\n    }\n\n    render() {\n        console.log(this.props.item.text);\n        var config = this.getConfig(this.props.item);\n\n        return <input id={\"input-text_\" + this.props.id.toString()}\n                      key={this.props.id}\n                      ref={this.textInputRef} \n                      type=\"text\" \n                      placeholder=\"type here...\" \n                      maxLength=\"30\" \n                      size=\"30\"\n                      autoComplete=\"off\"\n                      blur={config.blur} \n                      focus={config.focus}\n                      autoFocus={config.autofocus}\n                      readOnly={config.readOnly} \n                      style={config.style}\n                      onClick={(event) => this.props.onSingleClick(this.props.id, this.textInputRef.current.value, event)}\n                      onKeyDown={(event) => this.props.onKeyPress(this.props.id, this.textInputRef.current.value, event)}\n                      onBlur={() => this.props.onBlur(this.props.id, this.textInputRef.current.value)} />\n\n    }\n\n    componentDidUpdate() {\n        const mode = this.props.item.mode;\n        const text = this.props.item.text;\n        if (mode === \"writing\") { \n        } else {\n            this.textInputRef.current.value = text;\n        }\n    }\n\n    componentDidMount() {\n        const mode = this.props.item.mode;\n        const text = this.props.item.text;\n        if (mode === \"writing\") { \n        } else {\n            this.textInputRef.current.value = text;\n        }\n      }\n\n    getConfig(item) {\n\n        const {mode, selected, level} = item;\n\n        let textInputStyle = {};\n        let blur = \"false\";\n        let focus = \"true\";\n        let autofocus = true;\n        let readOnly = false;\n\n        if (mode === \"writing\") {\n            textInputStyle = {cursor: \"text\", backgroundColor: \"#11112112\"};\n\n        } else if (mode === \"not_writing\") {\n            textInputStyle = {cursor: \"pointer\", backgroundColor: \"#20D0FF\"};\n            blur = \"true\";\n            focus = \"false\";\n            readOnly = true;\n            autofocus = false;\n\n        }\n\n        // level-related styling\n        textInputStyle.marginLeft = (level - 1) * 50;\n        textInputStyle.marginTop = 12;\n        textInputStyle.fontSize = 17;\n        if (level === 2) {\n            textInputStyle.marginTop = 4;\n            textInputStyle.fontSize = 15;\n        } else if (level === 3) {\n            textInputStyle.marginTop = 2;\n            textInputStyle.fontSize = 14;\n        }      \n\n        return {readOnly: readOnly, style: textInputStyle, focus: focus, blur: blur, autofocus: autofocus}\n    }\n}"]},"metadata":{},"sourceType":"module"}