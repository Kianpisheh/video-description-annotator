{"ast":null,"code":"var _jsxFileName = \"/Users/kian/HAKEE/annotator_app/frontend/src/components/DescriptionPane.jsx\";\nimport React from \"react\";\nimport StepDescription from \"./StepDescription\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class DescriptionPane extends React.Component {\n  constructor(props) {\n    super(props);\n    this.counter = 0;\n    this.state = {\n      descriptions: [{\n        key: 0,\n        mode: \"selected\",\n        level: 1\n      }]\n    };\n    this.counter += 1;\n    this.handleSingleClick = this.handleSingleClick.bind(this);\n    this.handleDoubleClick = this.handleDoubleClick.bind(this);\n    this.handleBlur = this.handleBlur.bind(this);\n  }\n\n  handleSingleClick(key) {\n    console.log(\"got single click event in description pane\");\n    console.log(\"The key is \" + key); // add the writing input below the selected step if it is not empty\n    // if it is empty do nothing\n  }\n\n  handleDoubleClick(key) {}\n\n  handleBlur(key, txt) {\n    console.log(txt);\n    console.log(key); // if it is writing and non-empty make it solid\n\n    if (txt !== \"\") {\n      let items = [...this.state.descriptions];\n      console.log(items[0]);\n      let itemIndex = items.map(item => item.key).indexOf(key);\n      const index = items.findIndex(item => item.key === key);\n      console.log(itemIndex);\n    } // if it solid remove the writing input\n\n  }\n\n  render() {\n    let descriptions = this.state.descriptions;\n    let descriptionList = descriptions.map(item => /*#__PURE__*/_jsxDEV(StepDescription, {\n      id: item.key.toString(),\n      onSingleClick: this.handleSingleClick,\n      onDoubleClick: this.handleDoubleClick,\n      onBlur: this.handleBlur,\n      mode: item.mode,\n      level: item.level\n    }, item.key.toString(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 32\n    }, this));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: descriptionList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 16\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/kian/HAKEE/annotator_app/frontend/src/components/DescriptionPane.jsx"],"names":["React","StepDescription","DescriptionPane","Component","constructor","props","counter","state","descriptions","key","mode","level","handleSingleClick","bind","handleDoubleClick","handleBlur","console","log","txt","items","itemIndex","map","item","indexOf","index","findIndex","render","descriptionList","toString"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,eAAP,MAA4B,mBAA5B;;AAGA,eAAe,MAAMC,eAAN,SAA8BF,KAAK,CAACG,SAApC,CAA8C;AACzDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,OAAL,GAAe,CAAf;AACA,SAAKC,KAAL,GAAa;AAACC,MAAAA,YAAY,EAAE,CAAC;AAACC,QAAAA,GAAG,EAAE,CAAN;AAASC,QAAAA,IAAI,EAAE,UAAf;AAA2BC,QAAAA,KAAK,EAAE;AAAlC,OAAD;AAAf,KAAb;AACA,SAAKL,OAAL,IAAgB,CAAhB;AAEA,SAAKM,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBC,IAAvB,CAA4B,IAA5B,CAAzB;AACA,SAAKC,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBD,IAAvB,CAA4B,IAA5B,CAAzB;AACA,SAAKE,UAAL,GAAkB,KAAKA,UAAL,CAAgBF,IAAhB,CAAqB,IAArB,CAAlB;AAEH;;AAEDD,EAAAA,iBAAiB,CAACH,GAAD,EAAM;AACnBO,IAAAA,OAAO,CAACC,GAAR,CAAY,4CAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAgBR,GAA5B,EAFmB,CAInB;AAEA;AAEH;;AAEDK,EAAAA,iBAAiB,CAACL,GAAD,EAAM,CACtB;;AAEDM,EAAAA,UAAU,CAACN,GAAD,EAAMS,GAAN,EAAW;AACjBF,IAAAA,OAAO,CAACC,GAAR,CAAYC,GAAZ;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAYR,GAAZ,EAFiB,CAGjB;;AACA,QAAIS,GAAG,KAAK,EAAZ,EAAgB;AACZ,UAAIC,KAAK,GAAG,CAAC,GAAG,KAAKZ,KAAL,CAAWC,YAAf,CAAZ;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAYE,KAAK,CAAC,CAAD,CAAjB;AACA,UAAIC,SAAS,GAAGD,KAAK,CAACE,GAAN,CAAUC,IAAI,IAAIA,IAAI,CAACb,GAAvB,EAA4Bc,OAA5B,CAAoCd,GAApC,CAAhB;AACA,YAAMe,KAAK,GAAGL,KAAK,CAACM,SAAN,CAAgBH,IAAI,IAAIA,IAAI,CAACb,GAAL,KAAaA,GAArC,CAAd;AAEAO,MAAAA,OAAO,CAACC,GAAR,CAAYG,SAAZ;AAGH,KAbgB,CAcjB;;AAEH;;AAEDM,EAAAA,MAAM,GAAG;AACL,QAAIlB,YAAY,GAAG,KAAKD,KAAL,CAAWC,YAA9B;AACA,QAAImB,eAAe,GAAGnB,YAAY,CAACa,GAAb,CAAkBC,IAAD,iBAChB,QAAC,eAAD;AAAiB,MAAA,EAAE,EAAEA,IAAI,CAACb,GAAL,CAASmB,QAAT,EAArB;AAEiB,MAAA,aAAa,EAAE,KAAKhB,iBAFrC;AAGiB,MAAA,aAAa,EAAE,KAAKE,iBAHrC;AAIiB,MAAA,MAAM,EAAE,KAAKC,UAJ9B;AAKiB,MAAA,IAAI,EAAEO,IAAI,CAACZ,IAL5B;AAMiB,MAAA,KAAK,EAAEY,IAAI,CAACX;AAN7B,OACsBW,IAAI,CAACb,GAAL,CAASmB,QAAT,EADtB;AAAA;AAAA;AAAA;AAAA,YADD,CAAtB;AAQA,wBAAO;AAAA,gBAAMD;AAAN;AAAA;AAAA;AAAA;AAAA,YAAP;AAEH;;AAxDwD","sourcesContent":["import React from \"react\"\n\nimport StepDescription from \"./StepDescription\"\n\n\nexport default class DescriptionPane extends React.Component {\n    constructor(props) {\n        super(props);\n        this.counter = 0;\n        this.state = {descriptions: [{key: 0, mode: \"selected\", level: 1}]};\n        this.counter += 1;\n\n        this.handleSingleClick = this.handleSingleClick.bind(this);\n        this.handleDoubleClick = this.handleDoubleClick.bind(this);\n        this.handleBlur = this.handleBlur.bind(this);\n        \n    }\n\n    handleSingleClick(key) {\n        console.log(\"got single click event in description pane\")\n        console.log(\"The key is \" + key)\n\n        // add the writing input below the selected step if it is not empty\n\n        // if it is empty do nothing\n\n    }\n\n    handleDoubleClick(key) {\n    }\n\n    handleBlur(key, txt) {\n        console.log(txt)\n        console.log(key)\n        // if it is writing and non-empty make it solid\n        if (txt !== \"\") {\n            let items = [...this.state.descriptions];\n            console.log(items[0])\n            let itemIndex = items.map(item => item.key).indexOf(key);\n            const index = items.findIndex(item => item.key === key);\n\n            console.log(itemIndex)\n\n\n        }\n        // if it solid remove the writing input\n\n    }\n\n    render() {\n        let descriptions = this.state.descriptions;\n        let descriptionList = descriptions.map((item) => \n                               <StepDescription id={item.key.toString()} \n                                                key={item.key.toString()} \n                                                onSingleClick={this.handleSingleClick} \n                                                onDoubleClick={this.handleDoubleClick}\n                                                onBlur={this.handleBlur} \n                                                mode={item.mode} \n                                                level={item.level}/>)\n        return <div>{descriptionList}</div>\n        \n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}