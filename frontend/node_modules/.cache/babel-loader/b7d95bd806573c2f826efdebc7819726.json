{"ast":null,"code":"var _jsxFileName = \"/Users/kian/HAKEE/annotator_app/frontend/src/VideoPlayer.js\";\nimport React from 'react';\nimport videojs from 'video.js';\nimport 'video.js/dist/video-js.css'; // video.js player from the docs: https://github.com/videojs/video.js/blob/master/docs/guides/react.md\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass VideoPlayer extends React.Component {\n  componentDidMount() {\n    // instantiate Video.js\n    this.player = videojs(this.videoNode, this.props, function onPlayerReady() {\n      console.log('onPlayerReady', this);\n    });\n  } // destroy player on unmount\n\n\n  componentWillUnmount() {\n    if (this.player) {\n      this.player.dispose();\n    }\n  }\n\n  componentWillReceiveProps(newProps) {\n    // When a user moves from one title to the next, the VideoPlayer component will not be unmounted,\n    // instead its properties will be updated with the details of the new video. In this case,\n    // we can update the src of the existing player with the new video URL.\n    if (this.player) {\n      this.player.src({\n        type: newProps.video.mime_type,\n        src: newProps.video.video_url\n      });\n    }\n  } // wrap the player in a div with a `data-vjs-player` attribute\n  // so videojs won't create additional wrapper in the DOM\n  // see https://github.com/videojs/video.js/pull/3856\n  // use `ref` to give Video JS a reference to the video DOM element: https://reactjs.org/docs/refs-and-the-dom\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      \"data-vjs-player\": true,\n      children: /*#__PURE__*/_jsxDEV(\"video\", {\n        ref: node => this.videoNode = node,\n        className: \"video-js\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default VideoPlayer;","map":{"version":3,"sources":["/Users/kian/HAKEE/annotator_app/frontend/src/VideoPlayer.js"],"names":["React","videojs","VideoPlayer","Component","componentDidMount","player","videoNode","props","onPlayerReady","console","log","componentWillUnmount","dispose","componentWillReceiveProps","newProps","src","type","video","mime_type","video_url","render","node"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,UAApB;AACA,OAAO,4BAAP,C,CAEA;;;;AAEA,MAAMC,WAAN,SAA0BF,KAAK,CAACG,SAAhC,CAA0C;AACtCC,EAAAA,iBAAiB,GAAG;AAChB;AACA,SAAKC,MAAL,GAAcJ,OAAO,CAAC,KAAKK,SAAN,EAAiB,KAAKC,KAAtB,EAA6B,SAASC,aAAT,GAAyB;AACvEC,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6B,IAA7B;AACH,KAFoB,CAArB;AAGH,GANqC,CAQtC;;;AACAC,EAAAA,oBAAoB,GAAG;AACnB,QAAI,KAAKN,MAAT,EAAiB;AACb,WAAKA,MAAL,CAAYO,OAAZ;AACH;AACJ;;AAEDC,EAAAA,yBAAyB,CAACC,QAAD,EAAW;AAChC;AACA;AACA;AACA,QAAI,KAAKT,MAAT,EAAiB;AACb,WAAKA,MAAL,CAAYU,GAAZ,CAAgB;AACZC,QAAAA,IAAI,EAAEF,QAAQ,CAACG,KAAT,CAAeC,SADT;AAEZH,QAAAA,GAAG,EAAED,QAAQ,CAACG,KAAT,CAAeE;AAFR,OAAhB;AAIH;AACJ,GAzBqC,CA2BtC;AACA;AACA;AAEA;;;AACAC,EAAAA,MAAM,GAAG;AACL,wBACI;AAAK,6BAAL;AAAA,6BACI;AAAO,QAAA,GAAG,EAAEC,IAAI,IAAI,KAAKf,SAAL,GAAiBe,IAArC;AAA2C,QAAA,SAAS,EAAC;AAArD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH;;AAtCqC;;AAyC1C,eAAenB,WAAf","sourcesContent":["import React from 'react';\nimport videojs from 'video.js';\nimport 'video.js/dist/video-js.css';\n\n// video.js player from the docs: https://github.com/videojs/video.js/blob/master/docs/guides/react.md\n\nclass VideoPlayer extends React.Component {\n    componentDidMount() {\n        // instantiate Video.js\n        this.player = videojs(this.videoNode, this.props, function onPlayerReady() {\n            console.log('onPlayerReady', this)\n        });\n    }\n\n    // destroy player on unmount\n    componentWillUnmount() {\n        if (this.player) {\n            this.player.dispose();\n        }\n    }\n\n    componentWillReceiveProps(newProps) {\n        // When a user moves from one title to the next, the VideoPlayer component will not be unmounted,\n        // instead its properties will be updated with the details of the new video. In this case,\n        // we can update the src of the existing player with the new video URL.\n        if (this.player) {\n            this.player.src({\n                type: newProps.video.mime_type,\n                src: newProps.video.video_url\n            });\n        }\n    }\n\n    // wrap the player in a div with a `data-vjs-player` attribute\n    // so videojs won't create additional wrapper in the DOM\n    // see https://github.com/videojs/video.js/pull/3856\n\n    // use `ref` to give Video JS a reference to the video DOM element: https://reactjs.org/docs/refs-and-the-dom\n    render() {\n        return (\n            <div data-vjs-player>\n                <video ref={node => this.videoNode = node} className=\"video-js\"></video>\n            </div>\n        )\n    }\n}\n\nexport default VideoPlayer;"]},"metadata":{},"sourceType":"module"}