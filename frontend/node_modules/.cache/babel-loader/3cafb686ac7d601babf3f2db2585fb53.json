{"ast":null,"code":"var _jsxFileName = \"/Users/kian/HAKEE/annotator_app/frontend/src/components/StepDescription.jsx\";\nimport React from 'react';\nimport { Draggable } from 'react-beautiful-dnd';\nimport \"./StepDescription.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class StepDescription extends React.Component {\n  constructor(props) {\n    super(props);\n    this.textInputRef = /*#__PURE__*/React.createRef();\n  }\n\n  render() {\n    var config = this.getConfig(this.props.item);\n    return /*#__PURE__*/_jsxDEV(Draggable, {\n      draggableId: this.props.id.toString,\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"input-text_\" + this.props.id.toString(),\n        ref: this.textInputRef,\n        type: \"text\",\n        placeholder: \"type here...\",\n        maxLength: \"30\",\n        size: \"30\",\n        autoComplete: \"off\",\n        draggable: true,\n        blur: config.blur,\n        focus: config.focus,\n        autoFocus: config.autofocus,\n        readOnly: config.readOnly,\n        style: config.style,\n        onClick: event => this.props.onSingleClick(this.props.id, this.textInputRef.current.value, event),\n        onKeyDown: event => this.props.onKeyPress(this.props.id, this.textInputRef.current.value, event),\n        onBlur: () => this.props.onBlur(this.props.id, this.textInputRef.current.value)\n      }, this.props.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 16\n    }, this);\n  }\n\n  componentDidUpdate() {\n    this.textInputRef.current.value = this.props.item.text;\n\n    if (this.props.item.mode === \"writing\") {\n      this.textInputRef.current.focus();\n    } else {\n      this.textInputRef.current.blur();\n    }\n  }\n\n  componentDidMount() {\n    this.textInputRef.current.value = this.props.item.text;\n\n    if (this.props.item.mode === \"writing\") {\n      this.textInputRef.current.focus();\n    } else {\n      this.textInputRef.current.blur();\n    }\n  }\n\n  getConfig(item) {\n    const {\n      mode,\n      selected,\n      level\n    } = item;\n    let textInputStyle = {};\n    let blur = \"false\";\n    let focus = \"true\";\n    let autofocus = true;\n    let readOnly = false;\n\n    if (mode === \"writing\") {\n      textInputStyle = {\n        cursor: \"text\",\n        backgroundColor: \"#11112112\"\n      };\n    } else if (mode === \"not_writing\") {\n      textInputStyle = {\n        cursor: \"pointer\",\n        backgroundColor: \"#20D0FF\"\n      };\n      blur = \"true\";\n      focus = \"false\";\n      readOnly = true;\n      autofocus = false;\n    } // level-related styling\n\n\n    textInputStyle.marginLeft = (level - 1) * 50;\n    textInputStyle.marginTop = 12;\n    textInputStyle.fontSize = 17;\n\n    if (level === 2) {\n      textInputStyle.marginTop = 4;\n      textInputStyle.fontSize = 15;\n    } else if (level === 3) {\n      textInputStyle.marginTop = 2;\n      textInputStyle.fontSize = 14;\n    }\n\n    return {\n      readOnly: readOnly,\n      style: textInputStyle,\n      focus: focus,\n      blur: blur,\n      autofocus: autofocus\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/kian/HAKEE/annotator_app/frontend/src/components/StepDescription.jsx"],"names":["React","Draggable","StepDescription","Component","constructor","props","textInputRef","createRef","render","config","getConfig","item","id","toString","blur","focus","autofocus","readOnly","style","event","onSingleClick","current","value","onKeyPress","onBlur","componentDidUpdate","text","mode","componentDidMount","selected","level","textInputStyle","cursor","backgroundColor","marginLeft","marginTop","fontSize"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,qBAA1B;AAEA,OAAO,uBAAP;;AAEA,eAAe,MAAMC,eAAN,SAA8BF,KAAK,CAACG,SAApC,CAA8C;AACzDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,YAAL,gBAAoBN,KAAK,CAACO,SAAN,EAApB;AAEH;;AAEDC,EAAAA,MAAM,GAAG;AACL,QAAIC,MAAM,GAAG,KAAKC,SAAL,CAAe,KAAKL,KAAL,CAAWM,IAA1B,CAAb;AAEA,wBAAO,QAAC,SAAD;AAAW,MAAA,WAAW,EAAE,KAAKN,KAAL,CAAWO,EAAX,CAAcC,QAAtC;AAAA,6BACK;AAAO,QAAA,EAAE,EAAE,gBAAgB,KAAKR,KAAL,CAAWO,EAAX,CAAcC,QAAd,EAA3B;AAEY,QAAA,GAAG,EAAE,KAAKP,YAFtB;AAGY,QAAA,IAAI,EAAC,MAHjB;AAIY,QAAA,WAAW,EAAC,cAJxB;AAKY,QAAA,SAAS,EAAC,IALtB;AAMY,QAAA,IAAI,EAAC,IANjB;AAOY,QAAA,YAAY,EAAC,KAPzB;AAQY,QAAA,SAAS,EAAE,IARvB;AASY,QAAA,IAAI,EAAEG,MAAM,CAACK,IATzB;AAUY,QAAA,KAAK,EAAEL,MAAM,CAACM,KAV1B;AAWY,QAAA,SAAS,EAAEN,MAAM,CAACO,SAX9B;AAYY,QAAA,QAAQ,EAAEP,MAAM,CAACQ,QAZ7B;AAaY,QAAA,KAAK,EAAER,MAAM,CAACS,KAb1B;AAcY,QAAA,OAAO,EAAGC,KAAD,IAAW,KAAKd,KAAL,CAAWe,aAAX,CAAyB,KAAKf,KAAL,CAAWO,EAApC,EAAwC,KAAKN,YAAL,CAAkBe,OAAlB,CAA0BC,KAAlE,EAAyEH,KAAzE,CAdhC;AAeY,QAAA,SAAS,EAAGA,KAAD,IAAW,KAAKd,KAAL,CAAWkB,UAAX,CAAsB,KAAKlB,KAAL,CAAWO,EAAjC,EAAqC,KAAKN,YAAL,CAAkBe,OAAlB,CAA0BC,KAA/D,EAAsEH,KAAtE,CAflC;AAgBY,QAAA,MAAM,EAAE,MAAM,KAAKd,KAAL,CAAWmB,MAAX,CAAkB,KAAKnB,KAAL,CAAWO,EAA7B,EAAiC,KAAKN,YAAL,CAAkBe,OAAlB,CAA0BC,KAA3D;AAhB1B,SACiB,KAAKjB,KAAL,CAAWO,EAD5B;AAAA;AAAA;AAAA;AAAA;AADL;AAAA;AAAA;AAAA;AAAA,YAAP;AAmBH;;AAEDa,EAAAA,kBAAkB,GAAG;AACjB,SAAKnB,YAAL,CAAkBe,OAAlB,CAA0BC,KAA1B,GAAkC,KAAKjB,KAAL,CAAWM,IAAX,CAAgBe,IAAlD;;AACA,QAAI,KAAKrB,KAAL,CAAWM,IAAX,CAAgBgB,IAAhB,KAAyB,SAA7B,EAAwC;AACpC,WAAKrB,YAAL,CAAkBe,OAAlB,CAA0BN,KAA1B;AACH,KAFD,MAEO;AACH,WAAKT,YAAL,CAAkBe,OAAlB,CAA0BP,IAA1B;AACH;AACJ;;AAEDc,EAAAA,iBAAiB,GAAG;AAChB,SAAKtB,YAAL,CAAkBe,OAAlB,CAA0BC,KAA1B,GAAkC,KAAKjB,KAAL,CAAWM,IAAX,CAAgBe,IAAlD;;AACA,QAAI,KAAKrB,KAAL,CAAWM,IAAX,CAAgBgB,IAAhB,KAAyB,SAA7B,EAAwC;AACpC,WAAKrB,YAAL,CAAkBe,OAAlB,CAA0BN,KAA1B;AACH,KAFD,MAEO;AACH,WAAKT,YAAL,CAAkBe,OAAlB,CAA0BP,IAA1B;AACH;AACF;;AAEHJ,EAAAA,SAAS,CAACC,IAAD,EAAO;AAEZ,UAAM;AAACgB,MAAAA,IAAD;AAAOE,MAAAA,QAAP;AAAiBC,MAAAA;AAAjB,QAA0BnB,IAAhC;AAEA,QAAIoB,cAAc,GAAG,EAArB;AACA,QAAIjB,IAAI,GAAG,OAAX;AACA,QAAIC,KAAK,GAAG,MAAZ;AACA,QAAIC,SAAS,GAAG,IAAhB;AACA,QAAIC,QAAQ,GAAG,KAAf;;AAEA,QAAIU,IAAI,KAAK,SAAb,EAAwB;AACpBI,MAAAA,cAAc,GAAG;AAACC,QAAAA,MAAM,EAAE,MAAT;AAAiBC,QAAAA,eAAe,EAAE;AAAlC,OAAjB;AAEH,KAHD,MAGO,IAAIN,IAAI,KAAK,aAAb,EAA4B;AAC/BI,MAAAA,cAAc,GAAG;AAACC,QAAAA,MAAM,EAAE,SAAT;AAAoBC,QAAAA,eAAe,EAAE;AAArC,OAAjB;AACAnB,MAAAA,IAAI,GAAG,MAAP;AACAC,MAAAA,KAAK,GAAG,OAAR;AACAE,MAAAA,QAAQ,GAAG,IAAX;AACAD,MAAAA,SAAS,GAAG,KAAZ;AACH,KAnBW,CAqBZ;;;AACAe,IAAAA,cAAc,CAACG,UAAf,GAA4B,CAACJ,KAAK,GAAG,CAAT,IAAc,EAA1C;AACAC,IAAAA,cAAc,CAACI,SAAf,GAA2B,EAA3B;AACAJ,IAAAA,cAAc,CAACK,QAAf,GAA0B,EAA1B;;AACA,QAAIN,KAAK,KAAK,CAAd,EAAiB;AACbC,MAAAA,cAAc,CAACI,SAAf,GAA2B,CAA3B;AACAJ,MAAAA,cAAc,CAACK,QAAf,GAA0B,EAA1B;AACH,KAHD,MAGO,IAAIN,KAAK,KAAK,CAAd,EAAiB;AACpBC,MAAAA,cAAc,CAACI,SAAf,GAA2B,CAA3B;AACAJ,MAAAA,cAAc,CAACK,QAAf,GAA0B,EAA1B;AACH;;AAED,WAAO;AAACnB,MAAAA,QAAQ,EAAEA,QAAX;AAAqBC,MAAAA,KAAK,EAAEa,cAA5B;AAA4ChB,MAAAA,KAAK,EAAEA,KAAnD;AAA0DD,MAAAA,IAAI,EAAEA,IAAhE;AAAsEE,MAAAA,SAAS,EAAEA;AAAjF,KAAP;AACH;;AAnFwD","sourcesContent":["import React from 'react';\nimport { Draggable } from 'react-beautiful-dnd';\n\nimport \"./StepDescription.css\"\n\nexport default class StepDescription extends React.Component {\n    constructor(props) {\n        super(props);\n        this.textInputRef = React.createRef();\n\n    }\n\n    render() {\n        var config = this.getConfig(this.props.item);\n\n        return <Draggable draggableId={this.props.id.toString}>\n                    <input id={\"input-text_\" + this.props.id.toString()}\n                                key={this.props.id}\n                                ref={this.textInputRef} \n                                type=\"text\" \n                                placeholder=\"type here...\" \n                                maxLength=\"30\" \n                                size=\"30\"\n                                autoComplete=\"off\"\n                                draggable={true}\n                                blur={config.blur} \n                                focus={config.focus}\n                                autoFocus={config.autofocus}\n                                readOnly={config.readOnly} \n                                style={config.style}\n                                onClick={(event) => this.props.onSingleClick(this.props.id, this.textInputRef.current.value, event)}\n                                onKeyDown={(event) => this.props.onKeyPress(this.props.id, this.textInputRef.current.value, event)}\n                                onBlur={() => this.props.onBlur(this.props.id, this.textInputRef.current.value)} />\n                </Draggable>\n    }\n\n    componentDidUpdate() {\n        this.textInputRef.current.value = this.props.item.text;\n        if (this.props.item.mode === \"writing\") {\n            this.textInputRef.current.focus();\n        } else {\n            this.textInputRef.current.blur();\n        }\n    }\n\n    componentDidMount() {\n        this.textInputRef.current.value = this.props.item.text;\n        if (this.props.item.mode === \"writing\") {\n            this.textInputRef.current.focus();\n        } else {\n            this.textInputRef.current.blur();\n        }\n      }\n\n    getConfig(item) {\n\n        const {mode, selected, level} = item;\n\n        let textInputStyle = {};\n        let blur = \"false\";\n        let focus = \"true\";\n        let autofocus = true;\n        let readOnly = false;\n\n        if (mode === \"writing\") {\n            textInputStyle = {cursor: \"text\", backgroundColor: \"#11112112\"};\n\n        } else if (mode === \"not_writing\") {\n            textInputStyle = {cursor: \"pointer\", backgroundColor: \"#20D0FF\"};\n            blur = \"true\";\n            focus = \"false\";\n            readOnly = true;\n            autofocus = false;\n        }\n\n        // level-related styling\n        textInputStyle.marginLeft = (level - 1) * 50;\n        textInputStyle.marginTop = 12;\n        textInputStyle.fontSize = 17;\n        if (level === 2) {\n            textInputStyle.marginTop = 4;\n            textInputStyle.fontSize = 15;\n        } else if (level === 3) {\n            textInputStyle.marginTop = 2;\n            textInputStyle.fontSize = 14;\n        }      \n\n        return {readOnly: readOnly, style: textInputStyle, focus: focus, blur: blur, autofocus: autofocus}\n    }\n}"]},"metadata":{},"sourceType":"module"}