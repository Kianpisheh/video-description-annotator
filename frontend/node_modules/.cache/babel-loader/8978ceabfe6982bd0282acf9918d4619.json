{"ast":null,"code":"var _jsxFileName = \"/Users/kian/HAKEE/annotator_app/frontend/src/components/StepDescription.jsx\";\nimport React from 'react';\nimport \"./StepDescription.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class StepDescription extends React.Component {\n  constructor(props) {\n    super(props);\n    this.textInputRef = /*#__PURE__*/React.createRef();\n  }\n\n  render() {\n    var config = this.getConfig(this.props.item);\n    console.log(this.props.item.key + \" \" + this.props.item.mode);\n    console.log(this.props.item.key + \" \" + this.props.item.selected);\n    console.log(this.props.item.key + \" \" + config.style.backgroundColor);\n    return /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"input-text_\" + this.props.id.toString(),\n      ref: this.textInputRef,\n      type: \"text\",\n      placeholder: \"type here...\",\n      maxLength: \"30\",\n      size: \"30\",\n      autoComplete: \"off\",\n      blur: config.blur,\n      focus: config.focus,\n      autoFocus: config.autofocus,\n      readOnly: config.readOnly,\n      style: config.style,\n      onClick: event => this.props.onSingleClick(this.props.id, this.textInputRef.current.value, event),\n      onKeyDown: event => this.props.onKeyPress(this.props.id, this.textInputRef.current.value, event),\n      onBlur: () => this.props.onBlur(this.props.id, this.textInputRef.current.value)\n    }, this.props.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 16\n    }, this);\n  }\n\n  componentDidUpdate() {\n    this.textInputRef.current.value = this.props.item.text; // if (this.props.item.mode === \"writing\") {\n    //     this.textInputRef.current.style.backgroundColor = \"#11112112\";\n    // } else {\n    //     this.textInputRef.current.style.backgroundColor = \"#20D0FF\";\n    // }\n  }\n\n  componentDidMount() {\n    this.textInputRef.current.value = this.props.item.text; // if (this.props.item.mode === \"writing\") {\n    //     this.textInputRef.current.style.backgroundColor = \"#11112112\";\n    // } else {\n    //     this.textInputRef.current.style.backgroundColor = \"#20D0FF\";\n    // }\n  }\n\n  getConfig(item) {\n    const {\n      mode,\n      selected,\n      level\n    } = item;\n    let textInputStyle = {};\n    let blur = \"false\";\n    let focus = \"true\";\n    let autofocus = true;\n    let readOnly = false;\n\n    if (mode === \"writing\") {\n      textInputStyle = {\n        cursor: \"text\",\n        backgroundColor: \"#11112112\"\n      };\n    } else if (mode === \"not_writing\") {\n      textInputStyle = {\n        cursor: \"pointer\",\n        backgroundColor: \"#20D0FF\"\n      };\n      blur = \"true\";\n      focus = \"false\";\n      readOnly = true;\n      autofocus = false;\n    } // level-related styling\n\n\n    textInputStyle.marginLeft = (level - 1) * 50;\n    textInputStyle.marginTop = 12;\n    textInputStyle.fontSize = 17;\n\n    if (level === 2) {\n      textInputStyle.marginTop = 4;\n      textInputStyle.fontSize = 15;\n    } else if (level === 3) {\n      textInputStyle.marginTop = 2;\n      textInputStyle.fontSize = 14;\n    }\n\n    return {\n      readOnly: readOnly,\n      style: textInputStyle,\n      focus: focus,\n      blur: blur,\n      autofocus: autofocus\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/kian/HAKEE/annotator_app/frontend/src/components/StepDescription.jsx"],"names":["React","StepDescription","Component","constructor","props","textInputRef","createRef","render","config","getConfig","item","console","log","key","mode","selected","style","backgroundColor","id","toString","blur","focus","autofocus","readOnly","event","onSingleClick","current","value","onKeyPress","onBlur","componentDidUpdate","text","componentDidMount","level","textInputStyle","cursor","marginLeft","marginTop","fontSize"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport \"./StepDescription.css\"\n\nexport default class StepDescription extends React.Component {\n    constructor(props) {\n        super(props);\n        this.textInputRef = React.createRef();\n\n    }\n\n    render() {\n        var config = this.getConfig(this.props.item);\n        console.log(this.props.item.key + \" \" + this.props.item.mode);\n        console.log(this.props.item.key + \" \" + this.props.item.selected);\n        console.log(this.props.item.key + \" \" + config.style.backgroundColor);\n\n        return <input id={\"input-text_\" + this.props.id.toString()}\n                      key={this.props.id}\n                      ref={this.textInputRef} \n                      type=\"text\" \n                      placeholder=\"type here...\" \n                      maxLength=\"30\" \n                      size=\"30\"\n                      autoComplete=\"off\"\n                      blur={config.blur} \n                      focus={config.focus}\n                      autoFocus={config.autofocus}\n                      readOnly={config.readOnly} \n                      style={config.style}\n                      onClick={(event) => this.props.onSingleClick(this.props.id, this.textInputRef.current.value, event)}\n                      onKeyDown={(event) => this.props.onKeyPress(this.props.id, this.textInputRef.current.value, event)}\n                      onBlur={() => this.props.onBlur(this.props.id, this.textInputRef.current.value)} />\n    }\n\n    componentDidUpdate() {\n        this.textInputRef.current.value = this.props.item.text;\n        // if (this.props.item.mode === \"writing\") {\n        //     this.textInputRef.current.style.backgroundColor = \"#11112112\";\n        // } else {\n        //     this.textInputRef.current.style.backgroundColor = \"#20D0FF\";\n        // }\n    }\n\n    componentDidMount() {\n        this.textInputRef.current.value = this.props.item.text;\n        // if (this.props.item.mode === \"writing\") {\n        //     this.textInputRef.current.style.backgroundColor = \"#11112112\";\n        // } else {\n        //     this.textInputRef.current.style.backgroundColor = \"#20D0FF\";\n        // }\n      }\n\n    getConfig(item) {\n\n        const {mode, selected, level} = item;\n\n        let textInputStyle = {};\n        let blur = \"false\";\n        let focus = \"true\";\n        let autofocus = true;\n        let readOnly = false;\n\n        if (mode === \"writing\") {\n            textInputStyle = {cursor: \"text\", backgroundColor: \"#11112112\"};\n\n        } else if (mode === \"not_writing\") {\n            textInputStyle = {cursor: \"pointer\", backgroundColor: \"#20D0FF\"};\n            blur = \"true\";\n            focus = \"false\";\n            readOnly = true;\n            autofocus = false;\n        }\n\n        // level-related styling\n        textInputStyle.marginLeft = (level - 1) * 50;\n        textInputStyle.marginTop = 12;\n        textInputStyle.fontSize = 17;\n        if (level === 2) {\n            textInputStyle.marginTop = 4;\n            textInputStyle.fontSize = 15;\n        } else if (level === 3) {\n            textInputStyle.marginTop = 2;\n            textInputStyle.fontSize = 14;\n        }      \n\n        return {readOnly: readOnly, style: textInputStyle, focus: focus, blur: blur, autofocus: autofocus}\n    }\n}"]},"metadata":{},"sourceType":"module"}