{"ast":null,"code":"var _jsxFileName = \"/Users/kian/HAKEE/annotator_app/frontend/src/components/DescriptionPane.jsx\";\nimport React from \"react\";\nimport StepDescription from \"./StepDescription\";\nimport \"./DescriptionPane.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class DescriptionPane extends React.Component {\n  constructor(props) {\n    super(props);\n    this.counter = 0;\n    this.state = {\n      descriptions: [{\n        key: 0,\n        mode: \"writing\",\n        level: 1,\n        selected: false\n      }]\n    };\n    this.counter += 1;\n    this.setModeByKey = this.setModeByKey.bind(this);\n    this.getMode = this.getMode.bind(this);\n    this.addStepAfter = this.addStepAfter.bind(this);\n    this.removeWritingStep = this.removeWritingStep.bind(this);\n    this.getSelected = this.getSelected.bind(this);\n    this.deselectAll = this.deselectAll.bind(this);\n    this.getIndex = this.getIndex.bind(this);\n    this.getWritingIndex = this.getWritingIndex.bind(this);\n    this.removeItem = this.removeItem.bind(this);\n    this.updateDescendents = this.updateDescendents.bind(this);\n    this.getDescendents = this.getDescendents.bind(this);\n    this.deleteItems = this.deleteItems.bind(this);\n    this.getPrevSibling = this.getPrevSibling.bind(this);\n    this.handleSingleClick = this.handleSingleClick.bind(this);\n    this.handleDoubleClick = this.handleDoubleClick.bind(this);\n    this.handleBlur = this.handleBlur.bind(this);\n    this.handleKeyAction = this.handleKeyAction.bind(this);\n  }\n\n  render() {\n    let descriptions = this.state.descriptions;\n    let descriptionList = descriptions.map((item, index) => /*#__PURE__*/_jsxDEV(StepDescription, {\n      id: item.key.toString(),\n      onSingleClick: this.handleSingleClick,\n      onDoubleClick: this.handleDoubleClick,\n      onBlur: this.handleBlur,\n      onKeyPress: this.handleKeyAction,\n      mode: item.mode,\n      selected: item.selected,\n      level: item.level\n    }, item.key.toString(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 32\n    }, this));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"description-pane-container\",\n      children: descriptionList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 16\n    }, this);\n  } // componentDidMount() {\n  //     window.addEventListener(\"keydown\", (event) => this.handleKeyAction(null, \"\", event));\n  // }\n  // componentWillUnmount() {\n  //     window.removeEventListener(\"keydown\", (event) => this.handleKeyAction(null, \"\", event));\n  // }\n\n\n  handleSingleClick(key, txt, event) {\n    if (txt === \"\") {\n      let items = this.setModeByKey(this.state.descriptions, key, \"writing\");\n      this.setState({\n        descriptions: items\n      });\n    } else if (event.shiftKey) {\n      // it is non-writing\n      const currentStepMode = this.getMode(this.state.descriptions, key, 0);\n      const nextStepMode = this.getMode(this.state.descriptions, key, 1);\n\n      if (currentStepMode === \"not_writing\" && (nextStepMode !== \"writing\" || nextStepMode === undefined)) {\n        // remove existing writing step\n        let items = this.removeWritingStep(this.state.descriptions); // select the current step\n\n        items = this.deselectAll(items);\n        items[this.getIndex(items, key, 0)].selected = true;\n        this.setState({\n          descriptions: items\n        });\n      }\n    }\n  }\n\n  handleDoubleClick(key) {\n    let items = this.deselectAll(this.state.descriptions); // update the selected step\n\n    const currentIndex = this.getIndex(items, key, 0);\n    const oldWritingIndex = this.getWritingIndex(items);\n\n    if (items[currentIndex].mode !== 'writing') {\n      items[currentIndex].mode = \"writing\";\n\n      if (currentIndex > 0) {\n        items[currentIndex - 1].selected = true;\n      }\n\n      if (oldWritingIndex > 0) {\n        items = this.removeItem(items, oldWritingIndex);\n      }\n\n      this.setState({\n        descriptions: items\n      });\n    }\n  }\n\n  handleBlur(key, txt) {\n    let items = [...this.state.descriptions];\n\n    if (txt !== \"\") {\n      items = this.setModeByKey(items, key, \"not_writing\");\n      this.setState({\n        descriptions: items\n      });\n    } else if (txt === \"\" && this.state.descriptions.length > 1) {\n      items = this.removeWritingStep(items);\n      this.setState({\n        descriptions: items\n      });\n    }\n  }\n\n  handleKeyAction(key, txt, event) {\n    let items = [...this.state.descriptions];\n\n    if (event.which === 46) {\n      console.log(\"delete event\"); // event.stopImmediatePropagation()\n\n      let currentStepIndex = null;\n\n      if (key === null) {\n        // delete (window listener)\n        currentStepIndex = this.getSelected(items);\n      } else {\n        // delete (<input> listener)\n        currentStepIndex = this.getIndex(items, key, 0);\n      }\n\n      if (items[currentStepIndex].selected && items.length >= 2) {\n        // select the previous/next step\n        items = this.deselectAll(items);\n        const descIndexList = this.getDescendents(items, currentStepIndex);\n\n        if (currentStepIndex === 0) {\n          items[currentStepIndex + descIndexList.length].selected = true;\n        } else {\n          const prevSiblingIndex = this.getPrevSibling(items, currentStepIndex);\n          let offset = 1;\n\n          if (!(prevSiblingIndex == null)) {\n            const prevStepDescIndexList = this.getDescendents(items, prevSiblingIndex);\n            offset = prevStepDescIndexList.length;\n          }\n\n          items[currentStepIndex - offset].selected = true;\n        } //TODO: 0 items\n\n\n        if (descIndexList.length < items.length) {\n          items = this.deleteItems(items, descIndexList);\n          this.setState({\n            descriptions: items\n          });\n        }\n      }\n    } else if (event.which === 13 && txt !== \"\") {\n      const currentStepMode = this.getMode(items, key, 0);\n      const curretnStepIndex = this.getIndex(items, key, 0);\n\n      if (currentStepMode === \"writing\" || currentStepMode === \"not_writing\" && items[curretnStepIndex].selected) {\n        // change the current step to non-writing and add one writing step after it\n        items = this.setModeByKey(items, key, \"not_writing\");\n        items[curretnStepIndex].selected = true;\n        items = this.addStepAfter(items, key, \"writing\", null);\n        this.setState({\n          descriptions: items\n        });\n      }\n    } // Tab or Shift + Tab\n    else if (event.which === 9) {\n      event.preventDefault(); // perform indention if it is writing\n\n      const currentStepIndex = this.getIndex(items, key, 0);\n\n      if (currentStepIndex > 0) {\n        const descIndexList = this.getDescendents(items, currentStepIndex); // only tab\n\n        if (!event.shiftKey) {\n          if (items[currentStepIndex].mode === \"writing\" && items.length > 1) {\n            if (items[currentStepIndex - 1].level >= items[currentStepIndex].level && items[currentStepIndex].level <= 2) {\n              items[currentStepIndex].level += 1;\n              items = this.updateDescendents(items, descIndexList, \"level_increase\");\n            }\n          }\n        } else {\n          // shift + tab\n          if (items[currentStepIndex].level >= 2) items[currentStepIndex].level -= 1;\n          items = this.updateDescendents(items, descIndexList, \"level_decrease\");\n        }\n\n        this.setState({\n          descriptions: items\n        });\n      } // TODO: \n      // up-down arrows\n      // change the selected item\n      // if (event.which) {\n      //     index = this.getSelected(this.state.descriptions);\n      // }\n\n    } // TODO: drag to rearrange\n\n  }\n\n  getIndex(stateItems, descriptionKey, offset) {\n    let items = [...stateItems];\n    let itemIndex = items.map(item => item.key).indexOf(parseInt(descriptionKey));\n\n    if (itemIndex >= 0) {\n      return itemIndex + offset;\n    }\n\n    return -1;\n  }\n\n  getWritingIndex(items) {\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].mode === \"writing\") {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  setModeByKey(stateItems, descriptionKey, mode) {\n    let items = [...stateItems];\n    let itemIndex = items.map(item => item.key).indexOf(parseInt(descriptionKey));\n\n    if (itemIndex >= 0) {\n      items[itemIndex].mode = mode;\n    } else {\n      console.log(\"step description does not exist\");\n    }\n\n    return items;\n  }\n\n  getMode(stateItems, descriptionKey, offset) {\n    let items = [...stateItems];\n    let itemIndex = items.map(item => item.key).indexOf(parseInt(descriptionKey));\n\n    if (items[itemIndex + offset] !== undefined) {\n      return items[itemIndex + offset].mode;\n    }\n\n    return undefined;\n  }\n\n  getSelected(items) {\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].selected) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  deselectAll(items) {\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].selected) {\n        items[i].selected = false;\n      }\n    }\n\n    return items;\n  }\n\n  addStepAfter(itemsState, key, mode, level) {\n    let items = [...itemsState];\n    let itemIndex = items.map(item => item.key).indexOf(parseInt(key));\n\n    if (items[itemIndex].mode !== \"writing\") {\n      // deselect all\n      items = this.deselectAll(items); // add the new step\n\n      let mLevel = level;\n\n      if (level === null) {\n        mLevel = items[itemIndex].level;\n      }\n\n      const descIndexList = this.getDescendents(items, itemIndex);\n      const newItemIndex = descIndexList[descIndexList.length - 1] + 1;\n      items.splice(newItemIndex, 0, {\n        key: this.counter,\n        mode: mode,\n        level: mLevel,\n        selected: false\n      });\n      this.counter += 1;\n    }\n\n    return items;\n  }\n\n  removeWritingStep(itemsState) {\n    let items = [...itemsState];\n    let newItems = [...items];\n\n    for (let i = 1; i < items.length; i++) {\n      if (items[i].mode === \"writing\") {\n        console.log(i);\n        newItems.splice(i, 1);\n        return newItems;\n      }\n    }\n\n    console.log(\"Didn't find the item, to remove\");\n    return newItems;\n  }\n\n  removeItem(items, index) {\n    items.splice(index, 1);\n    return items;\n  }\n\n  getDescendents(items, index) {\n    let descIndexList = [index];\n    const currentStepLevel = items[index].level;\n\n    for (let i = index + 1; i < items.length; i++) {\n      if (items[i].level > currentStepLevel) {\n        descIndexList.push(i);\n      } else {\n        break;\n      }\n    }\n\n    return descIndexList;\n  }\n\n  updateDescendents(items, desIndexList, action) {\n    for (let i = 1; i < desIndexList.length; i++) {\n      if (action === \"level_increase\") {\n        items[desIndexList[i]].level += 1;\n      } else if (action === \"level_decrease\") {\n        items[desIndexList[i]].level -= 1;\n      }\n    }\n\n    return items;\n  }\n\n  deleteItems(items, indexList) {\n    let newItems = [];\n    items.forEach((item, index) => {\n      if (!indexList.includes(index)) {\n        newItems.push(item);\n      }\n    });\n    return newItems;\n  }\n\n  getPrevSibling(items, index) {\n    // pre-condition: index > 0\n    for (let i = index - 1; i > 0; i--) {\n      if (items[i].level < items[index].level) {\n        return null;\n      }\n\n      if (items[index].level === items[i].level) {\n        return i;\n      }\n    }\n\n    return null;\n  }\n\n}","map":{"version":3,"sources":["/Users/kian/HAKEE/annotator_app/frontend/src/components/DescriptionPane.jsx"],"names":["React","StepDescription","DescriptionPane","Component","constructor","props","counter","state","descriptions","key","mode","level","selected","setModeByKey","bind","getMode","addStepAfter","removeWritingStep","getSelected","deselectAll","getIndex","getWritingIndex","removeItem","updateDescendents","getDescendents","deleteItems","getPrevSibling","handleSingleClick","handleDoubleClick","handleBlur","handleKeyAction","render","descriptionList","map","item","index","toString","txt","event","items","setState","shiftKey","currentStepMode","nextStepMode","undefined","currentIndex","oldWritingIndex","length","which","console","log","currentStepIndex","descIndexList","prevSiblingIndex","offset","prevStepDescIndexList","curretnStepIndex","preventDefault","stateItems","descriptionKey","itemIndex","indexOf","parseInt","i","itemsState","mLevel","newItemIndex","splice","newItems","currentStepLevel","push","desIndexList","action","indexList","forEach","includes"],"mappings":"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","sourcesContent":["import React from \"react\"\n\nimport StepDescription from \"./StepDescription\"\n\nimport \"./DescriptionPane.css\"\n\n\nexport default class DescriptionPane extends React.Component {\n    constructor(props) {\n        super(props);\n        this.counter = 0;\n        this.state = {descriptions: [{key: 0, mode: \"writing\", level: 1, selected: false}]};\n        this.counter += 1;\n\n        this.setModeByKey = this.setModeByKey.bind(this);\n        this.getMode = this.getMode.bind(this);\n        this.addStepAfter = this.addStepAfter.bind(this);\n        this.removeWritingStep = this.removeWritingStep.bind(this);\n        this.getSelected = this.getSelected.bind(this);\n        this.deselectAll = this.deselectAll.bind(this);\n        this.getIndex = this.getIndex.bind(this);\n        this.getWritingIndex = this.getWritingIndex.bind(this);\n        this.removeItem = this.removeItem.bind(this);\n        this.updateDescendents = this.updateDescendents.bind(this);\n        this.getDescendents = this.getDescendents.bind(this);\n        this.deleteItems = this.deleteItems.bind(this);\n        this.getPrevSibling = this.getPrevSibling.bind(this);\n\n        this.handleSingleClick = this.handleSingleClick.bind(this);\n        this.handleDoubleClick = this.handleDoubleClick.bind(this);\n        this.handleBlur = this.handleBlur.bind(this);\n        this.handleKeyAction = this.handleKeyAction.bind(this);\n\n\n    }\n\n    render() {\n        let descriptions = this.state.descriptions;\n        let descriptionList = descriptions.map((item, index) => \n                               <StepDescription id={item.key.toString()} \n                                                key={item.key.toString()} \n                                                onSingleClick={this.handleSingleClick} \n                                                onDoubleClick={this.handleDoubleClick}\n                                                onBlur={this.handleBlur}\n                                                onKeyPress={this.handleKeyAction} \n                                                mode={item.mode}\n                                                selected={item.selected} \n                                                level={item.level}/>)\n        return <div id=\"description-pane-container\">{descriptionList}</div>\n        \n    }\n\n    // componentDidMount() {\n    //     window.addEventListener(\"keydown\", (event) => this.handleKeyAction(null, \"\", event));\n    // }\n\n    // componentWillUnmount() {\n    //     window.removeEventListener(\"keydown\", (event) => this.handleKeyAction(null, \"\", event));\n    // }\n\n\n    handleSingleClick(key, txt, event) {\n        if (txt === \"\") {\n            let items = this.setModeByKey(this.state.descriptions, key, \"writing\");\n            this.setState({descriptions: items});\n        } else if (event.shiftKey) { // it is non-writing\n            const currentStepMode = this.getMode(this.state.descriptions, key, 0);\n            const nextStepMode = this.getMode(this.state.descriptions, key, 1);\n            if (currentStepMode === \"not_writing\" && (nextStepMode !== \"writing\" || nextStepMode === undefined)) {\n                // remove existing writing step\n                let items = this.removeWritingStep(this.state.descriptions)\n                // select the current step\n                items = this.deselectAll(items);\n                items[this.getIndex(items, key, 0)].selected = true;\n                this.setState({descriptions: items});\n            }\n        }\n    }\n\n    handleDoubleClick(key) {\n        let items = this.deselectAll(this.state.descriptions);\n        // update the selected step\n        const currentIndex = this.getIndex(items, key, 0);\n        const oldWritingIndex = this.getWritingIndex(items);\n        if (items[currentIndex].mode !== 'writing') {\n            items[currentIndex].mode = \"writing\";\n            if (currentIndex > 0) {\n                items[currentIndex-1].selected = true;\n            }\n            if (oldWritingIndex > 0) {\n                items = this.removeItem(items, oldWritingIndex)\n            }\n            this.setState({descriptions: items});\n        }\n    }\n\n    handleBlur(key, txt) {\n        let items = [...this.state.descriptions];\n        if (txt !== \"\") {\n            items = this.setModeByKey(items, key, \"not_writing\");\n            this.setState({descriptions: items});\n        } else if(txt === \"\" && this.state.descriptions.length > 1) {\n            items = this.removeWritingStep(items);\n            this.setState({descriptions: items});\n        }\n    }\n\n    handleKeyAction(key, txt, event) {\n        let items = [...this.state.descriptions];\n\n        if (event.which === 46) {\n            console.log(\"delete event\")\n            // event.stopImmediatePropagation()\n            let currentStepIndex = null;\n            if (key === null) {    // delete (window listener)\n                currentStepIndex = this.getSelected(items);\n            } else {              // delete (<input> listener)\n                currentStepIndex = this.getIndex(items, key, 0);\n            }\n\n            if (items[currentStepIndex].selected && items.length >= 2) {\n                // select the previous/next step\n                items = this.deselectAll(items);\n                const descIndexList = this.getDescendents(items, currentStepIndex);\n                if (currentStepIndex === 0) {\n                    items[currentStepIndex + descIndexList.length].selected = true;\n                } else {\n                    const prevSiblingIndex = this.getPrevSibling(items, currentStepIndex);\n                    let offset = 1;\n                    if (!(prevSiblingIndex == null)) { \n                        const prevStepDescIndexList = this.getDescendents(items, prevSiblingIndex);\n                        offset =  prevStepDescIndexList.length\n                    }\n                    items[currentStepIndex - offset].selected = true;\n                }\n                //TODO: 0 items\n                if (descIndexList.length < items.length) {\n                    items = this.deleteItems(items, descIndexList);\n                    this.setState({descriptions: items});\n                }\n            }\n        }\n\n        else if (event.which === 13 && txt !== \"\") {\n            const currentStepMode = this.getMode(items, key, 0);\n            const curretnStepIndex = this.getIndex(items, key, 0);\n            if (currentStepMode === \"writing\" || (currentStepMode === \"not_writing\" && items[curretnStepIndex].selected)) {\n                // change the current step to non-writing and add one writing step after it\n                items = this.setModeByKey(items, key, \"not_writing\");\n                items[curretnStepIndex].selected = true;\n                items = this.addStepAfter(items, key, \"writing\", null);\n                this.setState({descriptions: items});\n            }\n        }\n\n        // Tab or Shift + Tab\n        else if (event.which === 9) { \n            event.preventDefault();\n            // perform indention if it is writing\n            const currentStepIndex = this.getIndex(items, key, 0);\n            \n            if (currentStepIndex > 0) {\n                const descIndexList = this.getDescendents(items, currentStepIndex);\n                // only tab\n                if (!event.shiftKey) {\n                    if (items[currentStepIndex].mode === \"writing\" && items.length > 1) {\n                        if (items[currentStepIndex-1].level >= items[currentStepIndex].level && items[currentStepIndex].level <=2) {\n                            items[currentStepIndex].level += 1;\n                            items = this.updateDescendents(items, descIndexList, \"level_increase\");\n                        } \n                    }\n                } else { // shift + tab\n                    if (items[currentStepIndex].level >= 2)\n                    items[currentStepIndex].level -= 1\n                    items = this.updateDescendents(items, descIndexList, \"level_decrease\");\n                }\n                this.setState({descriptions: items});\n            }\n            \n        // TODO: \n        // up-down arrows\n        // change the selected item\n        // if (event.which) {\n        //     index = this.getSelected(this.state.descriptions);\n        // }\n        \n        }\n\n    // TODO: drag to rearrange\n    }\n\n    getIndex(stateItems, descriptionKey, offset) {\n        let items = [...stateItems];\n        let itemIndex = items.map(item => item.key).indexOf(parseInt(descriptionKey));\n        if (itemIndex >= 0) {\n            return itemIndex + offset;\n        }\n        return -1;\n    }\n\n    getWritingIndex(items) {\n        for (let i = 0; i < items.length; i++) {\n            if (items[i].mode === \"writing\") {\n                return i;\n            }\n        }\n        return -1 \n    }\n\n    setModeByKey(stateItems, descriptionKey, mode) {\n        let items = [...stateItems];\n        let itemIndex = items.map(item => item.key).indexOf(parseInt(descriptionKey));\n        if (itemIndex >= 0) {\n            items[itemIndex].mode = mode;\n        } else {\n            console.log(\"step description does not exist\")\n        }\n        \n        return items;\n    \n    }\n\n\n    getMode(stateItems, descriptionKey, offset) {\n        let items = [...stateItems];\n        let itemIndex = items.map(item => item.key).indexOf(parseInt(descriptionKey));\n        if (items[itemIndex + offset] !== undefined) {\n            return items[itemIndex + offset].mode; \n        } \n        return undefined\n    }\n\n\n    getSelected(items) {\n        for (let i = 0; i < items.length; i++) {\n            if (items[i].selected) {\n                return i;\n            }\n        }\n        return -1\n    }\n\n    deselectAll(items) {\n        for (let i = 0; i < items.length; i++) {\n            if(items[i].selected) {\n                items[i].selected = false;\n            }\n        }\n        return items\n    }\n\n    addStepAfter(itemsState, key, mode, level) {\n        let items = [...itemsState];\n        let itemIndex = items.map(item => item.key).indexOf(parseInt(key));\n        if (items[itemIndex].mode !== \"writing\") {\n            // deselect all\n            items = this.deselectAll(items)\n            // add the new step\n            let mLevel = level;\n            if (level === null) {\n                mLevel = items[itemIndex].level;\n            }\n            const descIndexList = this.getDescendents(items, itemIndex);\n            const newItemIndex =  descIndexList[descIndexList.length-1] + 1;\n            items.splice(newItemIndex, 0, {key: this.counter, mode: mode, level: mLevel, selected: false})\n            this.counter += 1\n        }\n        return items;\n    }\n\n    removeWritingStep(itemsState) {\n        let items = [...itemsState];\n        let newItems = [...items];\n        for (let i = 1; i < items.length; i++) {\n            if (items[i].mode === \"writing\") {\n                console.log(i)\n                newItems.splice(i, 1)\n                return newItems\n            }\n        }\n        console.log(\"Didn't find the item, to remove\")\n        return newItems  \n\n    }\n\n    removeItem(items, index) {\n        items.splice(index, 1);\n        return items;\n    }\n\n    getDescendents(items, index) {\n        let descIndexList = [index]\n        const currentStepLevel = items[index].level;\n        for (let i = index + 1; i < items.length; i++) {\n            if (items[i].level > currentStepLevel) {\n                descIndexList.push(i);\n            } else {\n                break;\n            }\n        }\n        return descIndexList;\n\n    }\n\n    updateDescendents(items, desIndexList, action) {\n        for (let i = 1; i < desIndexList.length; i ++) {\n            if (action === \"level_increase\") {\n                items[desIndexList[i]].level += 1;\n            } else if (action === \"level_decrease\") {\n                items[desIndexList[i]].level -= 1;\n            }\n        }\n\n        return items;\n    }\n\n    deleteItems(items, indexList) {\n        let newItems = []\n        items.forEach((item, index) => {\n            if (!indexList.includes(index)) {\n                newItems.push(item)\n            }\n        });\n        return newItems;\n    }\n\n    getPrevSibling(items, index) {\n        // pre-condition: index > 0\n        for (let i = index - 1; i > 0; i--) {\n            if (items[i].level < items[index].level) {\n                return null;\n            }\n            if (items[index].level === items[i].level) {\n                return i;\n            }\n        }\n        return null;\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}