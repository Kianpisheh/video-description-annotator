{"ast":null,"code":"var _jsxFileName = \"/Users/kian/HAKEE/annotator_app/frontend/src/components/StepDescription.jsx\";\nimport React from 'react';\nimport { Draggable } from 'react-beautiful-dnd';\nimport \"./StepDescription.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class StepDescription extends React.Component {\n  constructor(props) {\n    super(props);\n    this.textInputRef = /*#__PURE__*/React.createRef();\n  }\n\n  render() {\n    var config = this.getConfig(this.props.item);\n    return /*#__PURE__*/_jsxDEV(Draggable, {\n      draggableId: this.props.id.toString(),\n      index: this.props.index,\n      children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"description-item\",\n        id: \"description-item_\" + this.props.id.toString(),\n        ...provided.draggableProps,\n        ...provided.dragHandleProps,\n        ref: provided.innerRef,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"description-text_\" + this.props.id.toString(),\n          className: \"description-text\",\n          ref: this.textInputRef,\n          type: \"text\",\n          placeholder: \"type here...\",\n          maxLength: \"30\",\n          size: \"30\",\n          autoComplete: \"off\",\n          draggable: true,\n          blur: config.blur,\n          focus: config.focus,\n          autoFocus: config.autofocus,\n          readOnly: config.readOnly,\n          style: config.style,\n          onClick: event => this.props.onSingleClick(this.props.id, this.textInputRef.current.value, event),\n          onKeyDown: event => this.props.onKeyPress(this.props.id, this.textInputRef.current.value, event),\n          onBlur: () => this.props.onBlur(this.props.id, this.textInputRef.current.value)\n        }, this.props.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 21\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 32\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 16\n    }, this);\n  }\n\n  componentDidUpdate() {\n    this.textInputRef.current.value = this.props.item.text;\n\n    if (this.props.item.mode === \"writing\") {\n      this.textInputRef.current.focus();\n    } else {\n      this.textInputRef.current.blur();\n    }\n  }\n\n  componentDidMount() {\n    this.textInputRef.current.value = this.props.item.text;\n\n    if (this.props.item.mode === \"writing\") {\n      this.textInputRef.current.focus();\n    } else {\n      this.textInputRef.current.blur();\n    }\n  }\n\n  getConfig(item) {\n    const {\n      mode,\n      selected,\n      level\n    } = item;\n    let textInputStyle = {};\n    let blur = \"false\";\n    let focus = \"true\";\n    let autofocus = true;\n    let readOnly = false;\n\n    if (mode === \"writing\") {\n      textInputStyle = {\n        cursor: \"text\",\n        backgroundColor: \"#11112112\"\n      };\n    } else if (mode === \"not_writing\") {\n      textInputStyle = {\n        cursor: \"pointer\",\n        backgroundColor: \"#20D0FF\"\n      };\n      blur = \"true\";\n      focus = \"false\";\n      readOnly = true;\n      autofocus = false;\n    } // level-related styling\n\n\n    textInputStyle.marginLeft = (level - 1) * 50;\n    textInputStyle.marginTop = 12;\n    textInputStyle.fontSize = 17;\n\n    if (level === 2) {\n      textInputStyle.marginTop = 4;\n      textInputStyle.fontSize = 15;\n    } else if (level === 3) {\n      textInputStyle.marginTop = 2;\n      textInputStyle.fontSize = 14;\n    }\n\n    return {\n      readOnly: readOnly,\n      style: textInputStyle,\n      focus: focus,\n      blur: blur,\n      autofocus: autofocus\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/kian/HAKEE/annotator_app/frontend/src/components/StepDescription.jsx"],"names":["React","Draggable","StepDescription","Component","constructor","props","textInputRef","createRef","render","config","getConfig","item","id","toString","index","provided","draggableProps","dragHandleProps","innerRef","blur","focus","autofocus","readOnly","style","event","onSingleClick","current","value","onKeyPress","onBlur","componentDidUpdate","text","mode","componentDidMount","selected","level","textInputStyle","cursor","backgroundColor","marginLeft","marginTop","fontSize"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Draggable } from 'react-beautiful-dnd';\n\nimport \"./StepDescription.css\"\n\nexport default class StepDescription extends React.Component {\n    constructor(props) {\n        super(props);\n        this.textInputRef = React.createRef();\n\n    }\n\n    render() {\n        var config = this.getConfig(this.props.item);\n\n        return <Draggable draggableId={this.props.id.toString()} index={this.props.index} >\n            {\n                (provided) => (<div className=\"description-item\" id={\"description-item_\" + this.props.id.toString()}  {...provided.draggableProps} {...provided.dragHandleProps} ref={provided.innerRef}>\n                    <input id={\"description-text_\" + this.props.id.toString()}\n                        className=\"description-text\"\n                        key={this.props.id}\n                        ref={this.textInputRef}\n                        type=\"text\"\n                        placeholder=\"type here...\"\n                        maxLength=\"30\"\n                        size=\"30\"\n                        autoComplete=\"off\"\n                        draggable={true}\n                        blur={config.blur}\n                        focus={config.focus}\n                        autoFocus={config.autofocus}\n                        readOnly={config.readOnly}\n                        style={config.style}\n                        onClick={(event) => this.props.onSingleClick(this.props.id, this.textInputRef.current.value, event)}\n                        onKeyDown={(event) => this.props.onKeyPress(this.props.id, this.textInputRef.current.value, event)}\n                        onBlur={() => this.props.onBlur(this.props.id, this.textInputRef.current.value)} /> </div>)\n            }\n\n        </Draggable>\n    }\n\n    componentDidUpdate() {\n        this.textInputRef.current.value = this.props.item.text;\n        if (this.props.item.mode === \"writing\") {\n            this.textInputRef.current.focus();\n        } else {\n            this.textInputRef.current.blur();\n        }\n    }\n    \n    componentDidMount() {\n        this.textInputRef.current.value = this.props.item.text;\n        if (this.props.item.mode === \"writing\") {\n            this.textInputRef.current.focus();\n        } else {\n            this.textInputRef.current.blur();\n        }\n    }\n\n    getConfig(item) {\n\n        const { mode, selected, level } = item;\n\n        let textInputStyle = {};\n        let blur = \"false\";\n        let focus = \"true\";\n        let autofocus = true;\n        let readOnly = false;\n\n        if (mode === \"writing\") {\n            textInputStyle = { cursor: \"text\", backgroundColor: \"#11112112\" };\n\n        } else if (mode === \"not_writing\") {\n            textInputStyle = { cursor: \"pointer\", backgroundColor: \"#20D0FF\" };\n            blur = \"true\";\n            focus = \"false\";\n            readOnly = true;\n            autofocus = false;\n        }\n\n        // level-related styling\n        textInputStyle.marginLeft = (level - 1) * 50;\n        textInputStyle.marginTop = 12;\n        textInputStyle.fontSize = 17;\n        if (level === 2) {\n            textInputStyle.marginTop = 4;\n            textInputStyle.fontSize = 15;\n        } else if (level === 3) {\n            textInputStyle.marginTop = 2;\n            textInputStyle.fontSize = 14;\n        }\n\n        return { readOnly: readOnly, style: textInputStyle, focus: focus, blur: blur, autofocus: autofocus }\n    }\n}"]},"metadata":{},"sourceType":"module"}