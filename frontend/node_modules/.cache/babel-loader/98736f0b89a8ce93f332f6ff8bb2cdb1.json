{"ast":null,"code":"var _jsxFileName = \"/Users/kian/HAKEE/annotator_app/frontend/src/components/PropositionsPane.jsx\";\nimport React from \"react\";\nimport StepProposition from \"./StepProposition\";\nimport add_btn from \"../statics/add_btn.svg\";\nimport StudyDataContext from \"../contexts/StudyDataContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class DescriptionPane extends React.Component {\n  constructor(props) {\n    super(props);\n    this.containerRef = /*#__PURE__*/React.createRef();\n    this.handleFreqencySelected = this.handleFreqencySelected.bind(this);\n    this.handlePropositionSelected = this.handlePropositionSelected.bind(this);\n    this.handlePropositionUnselected = this.handlePropositionUnselected.bind(this);\n    this.handleAddButtonClick = this.handleAddButtonClick.bind(this);\n    this.createProposition = this.createProposition.bind(this);\n    this.removeEmptyProposition = this.removeEmptyProposition.bind(this);\n    this.getIndex = this.getIndex.bind(this);\n    this.counter = 0;\n    this.state = {\n      propositions: [this.createProposition(this.counter)]\n    };\n  }\n\n  render() {\n    const {\n      rows,\n      cols,\n      options,\n      height,\n      width\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"proposition-pane-cantainer\",\n      ref: this.containerRef,\n      style: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        justifyContent: \"flex-start\",\n        padding: \"10px\",\n        boxShadow: \"1px 3px 8px #c9c9c9be\",\n        width: width,\n        height: height,\n        overflow: \"auto\"\n      },\n      children: [this.state.propositions.map(proposition => /*#__PURE__*/_jsxDEV(StepProposition, {\n        id: proposition.key.toString(),\n        rows: rows,\n        cols: cols,\n        options: options,\n        data: proposition,\n        handleFreqencySelected: this.handleFreqencySelected,\n        handleSelected: this.handlePropositionSelected,\n        handleUnselected: this.handlePropositionUnselected\n      }, proposition.key.toString(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(AddButton, {\n        handleClick: this.handleAddButtonClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this);\n  }\n\n  componentDidUpdate() {\n    this.containerRef.current.scrollTop = this.containerRef.current.scrollHeight;\n  }\n\n  handleFreqencySelected(propositionKey, optionIdx, text) {\n    if (text === \"\") return;\n    let propositions = [...this.state.propositions];\n    const idx = this.getIndex(propositions, propositionKey);\n\n    for (let i = 0; i < propositions.length; i++) {\n      if (i === idx) {\n        propositions[i].freq = this.props.options[optionIdx];\n        propositions[i].text = text;\n        propositions[i].selected = false;\n      }\n    }\n\n    const {\n      task,\n      user,\n      sessionTime\n    } = this.context;\n    this.props.handleNewData({\n      propositions: propositions,\n      user: user,\n      sessionTime: sessionTime,\n      task: task\n    });\n    this.setState({\n      propositions: propositions\n    });\n  } // get called onFocus\n\n\n  handlePropositionSelected(propositionKey) {\n    let propositions = [...this.state.propositions];\n    const idx = this.getIndex(propositions, propositionKey);\n\n    for (let i = 0; i < propositions.length; i++) {\n      propositions[i].selected = false;\n\n      if (i === idx) {\n        propositions[i].selected = true;\n      }\n    }\n\n    const {\n      task,\n      user,\n      sessionTime\n    } = this.context;\n    this.props.handleNewData({\n      propositions: propositions,\n      user: user,\n      sessionTime: sessionTime,\n      task: task\n    });\n    this.setState({\n      propositions: propositions\n    });\n  } // get called onBLur\n\n\n  handlePropositionUnselected(propositionKey, text, event) {\n    let propositions = [...this.state.propositions];\n    const idx = this.getIndex(propositions, propositionKey);\n    propositions[idx].selected = false;\n    propositions[idx].text = text;\n    propositions = this.removeEmptyProposition(propositions, false); // do not update the states if the add-buton or a radio button is clicked\n\n    if (event.relatedTarget) {\n      let tid = event.relatedTarget.id;\n\n      if (tid === \"add-btn\" || tid.slice(0, 9) === \"radio-btn\") {\n        return;\n      }\n    }\n\n    let {\n      task,\n      user,\n      sessionTime\n    } = this.context;\n    task.task4idx = this.props.id;\n    this.props.handleNewData({\n      propositions: propositions,\n      user: user,\n      sessionTime: sessionTime,\n      task: task\n    });\n    this.setState({\n      propositions: propositions\n    });\n  }\n\n  handleAddButtonClick() {\n    let propositions = [...this.state.propositions];\n    if (propositions[propositions.length - 1].text === \"\") return;\n    propositions = this.removeEmptyProposition(propositions, false);\n    propositions.push(this.createProposition(this.counter));\n    const {\n      task,\n      user,\n      sessionTime\n    } = this.context;\n    this.props.handleNewData({\n      propositions: propositions,\n      user: user,\n      sessionTime: sessionTime,\n      task: task\n    });\n    this.setState({\n      propositions: propositions\n    });\n  }\n\n  removeEmptyProposition(propositions, lastItem) {\n    if (propositions.length < 2) return propositions;\n    const j = lastItem ? 0 : 1;\n    let items = []; // ignor the last one\n\n    for (let i = 0; i < propositions.length - j; i++) {\n      if (propositions[i].text !== \"\") {\n        items.push(propositions[i]);\n      }\n    }\n\n    return propositions;\n  }\n\n  getIndex(propositions, propositionKey) {\n    let items = [...propositions];\n    let itemIndex = items.map(proposition => proposition.key).indexOf(propositionKey);\n\n    if (itemIndex >= 0) {\n      return itemIndex;\n    }\n\n    return -1;\n  }\n\n  createProposition(keyNum) {\n    this.counter += 1;\n    return {\n      key: keyNum,\n      selected: true,\n      text: \"\",\n      freq: null\n    };\n  }\n\n}\nDescriptionPane.contextType = StudyDataContext;\n\nfunction AddButton(props) {\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"add-btn\",\n      style: {\n        border: \"none\",\n        cursor: \"pointer\",\n        width: \"auto\",\n        height: \"auto\",\n        backgroundColor: \"transparent\",\n        marginTop: \"10px\"\n      },\n      onClick: props.handleClick,\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        id: \"add-btn-img\",\n        src: add_btn,\n        alt: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 9\n  }, this);\n}\n\n_c = AddButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddButton\");","map":{"version":3,"sources":["/Users/kian/HAKEE/annotator_app/frontend/src/components/PropositionsPane.jsx"],"names":["React","StepProposition","StudyDataContext","DescriptionPane","Component","constructor","props","containerRef","createRef","handleFreqencySelected","bind","handlePropositionSelected","handlePropositionUnselected","handleAddButtonClick","createProposition","removeEmptyProposition","getIndex","counter","state","propositions","render","rows","cols","options","height","width","display","flexDirection","alignItems","justifyContent","padding","boxShadow","overflow","map","proposition","key","toString","componentDidUpdate","current","scrollTop","scrollHeight","propositionKey","optionIdx","text","idx","i","length","freq","selected","task","user","sessionTime","context","handleNewData","setState","event","relatedTarget","tid","id","slice","task4idx","push","lastItem","j","items","itemIndex","indexOf","keyNum","contextType","AddButton","border","cursor","backgroundColor","marginTop","handleClick","add_btn"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport StepProposition from \"./StepProposition\";\n\nimport add_btn from \"../statics/add_btn.svg\";\nimport StudyDataContext from \"../contexts/StudyDataContext\";\n\nexport default class DescriptionPane extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.containerRef = React.createRef();\n\n        this.handleFreqencySelected = this.handleFreqencySelected.bind(this);\n        this.handlePropositionSelected = this.handlePropositionSelected.bind(this);\n        this.handlePropositionUnselected = this.handlePropositionUnselected.bind(this);\n        this.handleAddButtonClick = this.handleAddButtonClick.bind(this);\n\n        this.createProposition = this.createProposition.bind(this);\n        this.removeEmptyProposition = this.removeEmptyProposition.bind(this);\n        this.getIndex = this.getIndex.bind(this);\n\n        this.counter = 0;\n        this.state = { propositions: [this.createProposition(this.counter)] };\n    }\n\n    static contextType = StudyDataContext;\n\n\n    render() {\n        const { rows, cols, options, height, width } = this.props;\n\n        return (\n            <div\n                id=\"proposition-pane-cantainer\"\n                ref={this.containerRef}\n                style={{\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    alignItems: \"center\",\n                    justifyContent: \"flex-start\",\n                    padding: \"10px\",\n                    boxShadow: \"1px 3px 8px #c9c9c9be\",\n                    width: width,\n                    height: height,\n                    overflow: \"auto\",\n                }}\n            >\n                {this.state.propositions.map((proposition) => (\n                    <StepProposition\n                        key={proposition.key.toString()}\n                        id={proposition.key.toString()}\n                        rows={rows}\n                        cols={cols}\n                        options={options}\n                        data={proposition}\n                        handleFreqencySelected={this.handleFreqencySelected}\n                        handleSelected={this.handlePropositionSelected}\n                        handleUnselected={this.handlePropositionUnselected}\n                    ></StepProposition>\n                ))}\n                <AddButton handleClick={this.handleAddButtonClick}></AddButton>\n            </div>\n        );\n    }\n\n    componentDidUpdate() {\n        this.containerRef.current.scrollTop = this.containerRef.current.scrollHeight;\n    }\n\n\n\n    handleFreqencySelected(propositionKey, optionIdx, text) {\n        if (text === \"\") return\n\n        let propositions = [...this.state.propositions];\n        const idx = this.getIndex(propositions, propositionKey);\n        for (let i = 0; i < propositions.length; i++) {\n            if (i === idx) {\n                propositions[i].freq = this.props.options[optionIdx];\n                propositions[i].text = text;\n                propositions[i].selected = false;\n            }\n        }\n        const { task, user, sessionTime } = this.context;\n        this.props.handleNewData({ propositions: propositions, user: user, sessionTime: sessionTime, task: task })\n        this.setState({ propositions: propositions });\n    }\n\n    // get called onFocus\n    handlePropositionSelected(propositionKey) {\n        let propositions = [...this.state.propositions];\n        const idx = this.getIndex(propositions, propositionKey);\n        for (let i = 0; i < propositions.length; i++) {\n            propositions[i].selected = false;\n            if (i === idx) {\n                propositions[i].selected = true;\n            }\n        }\n        const { task, user, sessionTime } = this.context;\n        this.props.handleNewData({ propositions: propositions, user: user, sessionTime: sessionTime, task: task })\n        this.setState({ propositions: propositions });\n    }\n\n    // get called onBLur\n    handlePropositionUnselected(propositionKey, text, event) {\n        let propositions = [...this.state.propositions];\n        const idx = this.getIndex(propositions, propositionKey);\n        propositions[idx].selected = false;\n        propositions[idx].text = text;\n        propositions = this.removeEmptyProposition(propositions, false);\n\n        // do not update the states if the add-buton or a radio button is clicked\n        if (event.relatedTarget) {\n            let tid = event.relatedTarget.id;\n            if (tid === \"add-btn\" || tid.slice(0, 9) === \"radio-btn\") {\n                return\n            }\n        }\n        let { task, user, sessionTime } = this.context;\n        task.task4idx = this.props.id;\n        this.props.handleNewData({ propositions: propositions, user: user, sessionTime: sessionTime, task: task })\n        this.setState({ propositions: propositions });\n    }\n\n    handleAddButtonClick() {\n        let propositions = [...this.state.propositions];\n        if (propositions[propositions.length - 1].text === \"\") return\n\n        propositions = this.removeEmptyProposition(propositions, false);\n        propositions.push(this.createProposition(this.counter));\n\n        const { task, user, sessionTime } = this.context;\n        this.props.handleNewData({ propositions: propositions, user: user, sessionTime: sessionTime, task: task })\n        this.setState({ propositions: propositions });\n    }\n\n    removeEmptyProposition(propositions, lastItem) {\n        if (propositions.length < 2) return propositions;\n\n        const j = lastItem ? 0 : 1;\n        let items = [];\n        // ignor the last one\n        for (let i = 0; i < propositions.length - j; i++) {\n            if (propositions[i].text !== \"\") {\n                items.push(propositions[i]);\n            }\n        }\n\n        return propositions;\n    }\n\n    getIndex(propositions, propositionKey) {\n        let items = [...propositions];\n        let itemIndex = items\n            .map((proposition) => proposition.key)\n            .indexOf(propositionKey);\n        if (itemIndex >= 0) {\n            return itemIndex;\n        }\n        return -1;\n    }\n\n    createProposition(keyNum) {\n        this.counter += 1;\n        return { key: keyNum, selected: true, text: \"\", freq: null };\n    }\n}\n\nfunction AddButton(props) {\n    return (\n        <React.Fragment>\n            <button\n                id=\"add-btn\"\n                style={{\n                    border: \"none\",\n                    cursor: \"pointer\",\n                    width: \"auto\",\n                    height: \"auto\",\n                    backgroundColor: \"transparent\",\n                    marginTop: \"10px\",\n                }}\n                onClick={props.handleClick}\n            >\n                <img id=\"add-btn-img\" src={add_btn} alt=\"+\"></img>\n            </button>\n        </React.Fragment >\n    );\n}\n"]},"metadata":{},"sourceType":"module"}