{"ast":null,"code":"var _jsxFileName = \"/Users/kian/HAKEE/annotator_app/frontend/src/components/DescriptionPane.jsx\";\nimport React from \"react\";\nimport StepDescription from \"./StepDescription\";\nimport \"./DescriptionPane.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class DescriptionPane extends React.Component {\n  constructor(props) {\n    super(props);\n    this.counter = 0;\n    this.state = {\n      descriptions: [{\n        key: 0,\n        mode: \"writing\",\n        level: 1,\n        selected: true\n      }]\n    };\n    this.counter += 1;\n    this.setModeByKey = this.setModeByKey.bind(this);\n    this.getMode = this.getMode.bind(this);\n    this.addStepAfter = this.addStepAfter.bind(this);\n    this.removeWritingStep = this.removeWritingStep.bind(this);\n    this.getSelected = this.getSelected.bind(this);\n    this.deselectAll = this.deselectAll.bind(this);\n    this.getIndex = this.getIndex.bind(this);\n    this.getWritingIndex = this.getWritingIndex.bind(this);\n    this.removeItem = this.removeItem.bind(this);\n    this.updateDescendents = this.updateDescendents.bind(this);\n    this.getDescendents = this.getDescendents.bind(this);\n    this.deleteItems = this.deleteItems.bind(this);\n    this.getPrevSibling = this.getPrevSibling.bind(this);\n    this.handleSingleClick = this.handleSingleClick.bind(this);\n    this.handleDoubleClick = this.handleDoubleClick.bind(this);\n    this.handleBlur = this.handleBlur.bind(this);\n    this.handleKeyAction = this.handleKeyAction.bind(this);\n  }\n\n  render() {\n    let descriptions = this.state.descriptions;\n    let descriptionListG = [];\n    let stepDescriptionList = [];\n\n    for (let i = 0; i < descriptions.length; i++) {\n      // new step\n      if (descriptions[i].level === 1) {\n        if (stepDescriptionList.length) {\n          descriptionListG.push(stepDescriptionList);\n        }\n\n        stepDescriptionList = [descriptions[i]];\n      } else {\n        // descendents\n        stepDescriptionList.push(descriptions[i]);\n      }\n\n      if (i === descriptions.length - 1) {\n        if (stepDescriptionList.length) {\n          descriptionListG.push(stepDescriptionList);\n        }\n      }\n    }\n\n    let x = 1;\n    let stepComponentsList = descriptionListG.map((stepList, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      id: index.toString(),\n      className: \"step-div\",\n      children: stepList.map(item => /*#__PURE__*/_jsxDEV(StepDescription, {\n        id: item.key.toString(),\n        onSingleClick: this.handleSingleClick,\n        onDoubleClick: this.handleDoubleClick,\n        onBlur: this.handleBlur,\n        onKeyPress: this.handleKeyAction,\n        mode: item.mode,\n        selected: item.selected,\n        level: item.level\n      }, item.key.toString(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 6\n      }, this))\n    }, index.toString(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 4\n    }, this));\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: stepComponentsList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 10\n    }, this);\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"keydown\", event => this.handleKeyAction(null, \"\", event));\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"keydown\", event => this.handleKeyAction(null, \"\", event));\n  }\n\n  handleSingleClick(key, txt, event) {\n    if (txt === \"\") {\n      let items = this.setModeByKey(this.state.descriptions, key, \"writing\");\n      this.setState({\n        descriptions: items\n      });\n    } else if (event.shiftKey) {\n      // it is non-writing\n      const currentStepMode = this.getMode(this.state.descriptions, key, 0);\n      const nextStepMode = this.getMode(this.state.descriptions, key, 1);\n\n      if (currentStepMode === \"not_writing\" && (nextStepMode !== \"writing\" || nextStepMode === undefined)) {\n        // remove existing writing step\n        let items = this.removeWritingStep(this.state.descriptions); // select the current step\n\n        items = this.deselectAll(items);\n        items[this.getIndex(items, key, 0)].selected = true;\n        this.setState({\n          descriptions: items\n        });\n      }\n    }\n  }\n\n  handleDoubleClick(key) {\n    let items = this.deselectAll(this.state.descriptions); // update the selected step\n\n    const currentIndex = this.getIndex(items, key, 0);\n    const oldWritingIndex = this.getWritingIndex(items);\n\n    if (items[currentIndex].mode !== \"writing\") {\n      items[currentIndex].mode = \"writing\";\n\n      if (currentIndex > 0) {\n        items[currentIndex - 1].selected = true;\n      }\n\n      if (oldWritingIndex > 0) {\n        items = this.removeItem(items, oldWritingIndex);\n      }\n\n      this.setState({\n        descriptions: items\n      });\n    }\n  }\n\n  handleBlur(key, txt) {\n    let items = [...this.state.descriptions];\n\n    if (txt !== \"\") {\n      items = this.setModeByKey(items, key, \"not_writing\");\n      this.setState({\n        descriptions: items\n      });\n    } else if (txt === \"\" && this.state.descriptions.length > 1) {\n      items = this.removeWritingStep(items);\n      this.saveUserData(items, \"u1_v1\");\n      this.setState({\n        descriptions: items\n      });\n    }\n  }\n\n  handleKeyAction(key, txt, event) {\n    event.stopImmediatePropagation();\n    let items = [...this.state.descriptions]; // del --> delete step\n\n    if (event.which === 46) {\n      let currentStepIndex = null;\n\n      if (key === null) {\n        // delete (window listener)\n        currentStepIndex = this.getSelected(items);\n      } else {\n        // delete (<input> listener)\n        currentStepIndex = this.getIndex(items, key, 0);\n      }\n\n      if (items[currentStepIndex].selected && items.length >= 2) {\n        // select the previous/next step\n        items = this.deselectAll(items);\n        const descIndexList = this.getDescendents(items, currentStepIndex);\n\n        if (currentStepIndex === 0) {\n          items[currentStepIndex + descIndexList.length].selected = true;\n        } else {\n          const prevSiblingIndex = this.getPrevSibling(items, currentStepIndex);\n          let offset = 1;\n\n          if (!(prevSiblingIndex == null)) {\n            const prevStepDescIndexList = this.getDescendents(items, prevSiblingIndex);\n            offset = prevStepDescIndexList.length;\n          }\n\n          items[currentStepIndex - offset].selected = true;\n        } // do not delete everything\n\n\n        if (descIndexList.length < items.length) {\n          items = this.deleteItems(items, descIndexList);\n          this.setState({\n            descriptions: items\n          });\n        }\n      }\n    } // Enter --> nex step (writing)\n    else if (event.which === 13 && txt !== \"\") {\n      const currentStepMode = this.getMode(items, key, 0);\n      const curretnStepIndex = this.getIndex(items, key, 0);\n      let newStepIndex = curretnStepIndex;\n\n      if (currentStepMode === \"writing\" || currentStepMode === \"not_writing\" && items[curretnStepIndex].selected) {\n        // change the current step to non-writing and add one writing step after it\n        items[curretnStepIndex].mode = \"not_writing\"; // deselect all\n\n        items = this.deselectAll(items);\n        [items, newStepIndex] = this.addStepAfter(items, key, \"writing\", null);\n        items[newStepIndex].selected = true;\n        this.setState({\n          descriptions: items\n        });\n      }\n    } // Tab or Shift + Tab\n    // TODO: shif + tab --> update the selected step\n    else if (event.which === 9) {\n      event.preventDefault(); // perform indention if it is writing\n\n      const currentStepIndex = this.getIndex(items, key, 0);\n\n      if (currentStepIndex > 0) {\n        const descIndexList = this.getDescendents(items, currentStepIndex); // only tab\n\n        if (!event.shiftKey) {\n          if (items[currentStepIndex].mode === \"writing\" && items.length > 1) {\n            if (items[currentStepIndex - 1].level >= items[currentStepIndex].level && items[currentStepIndex].level <= 2) {\n              items[currentStepIndex].level += 1;\n              items = this.updateDescendents(items, descIndexList, \"level_increase\");\n            }\n          }\n        } else {\n          // shift + tab\n          if (items[currentStepIndex].level >= 2) items[currentStepIndex].level -= 1;\n          items = this.updateDescendents(items, descIndexList, \"level_decrease\");\n        }\n\n        this.setState({\n          descriptions: items\n        });\n      }\n    }\n\n    if (event.which === 40 || event.which === 38) {\n      items = [...this.state.descriptions];\n      let index = this.getSelected(items);\n      items[index].selected = false;\n\n      if (event.which === 40) {\n        if (index < items.length - 1) {\n          index += 1;\n        }\n      } else {\n        if (index > 0) index -= 1;\n      }\n\n      items[index].selected = true;\n      this.setState({\n        descriptions: items\n      });\n    } // up-down arrows\n    // change the selected item\n    // if (event.which) {\n    //     index = this.getSelected(this.state.descriptions);\n    // }\n\n  } // TODO: drag to rearrange\n  // TODO:\n  // 1) next-prev video\n  // 2) saving the description\n  // 4) add guiddance (key bindings, ...)\n  // 5) record timestamp\n  // 6) record video control events (number of times, and types (jump to the future/past))\n\n\n  getIndex(stateItems, descriptionKey, offset) {\n    let items = [...stateItems];\n    let itemIndex = items.map(item => item.key).indexOf(parseInt(descriptionKey));\n\n    if (itemIndex >= 0) {\n      return itemIndex + offset;\n    }\n\n    return -1;\n  }\n\n  getWritingIndex(items) {\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].mode === \"writing\") {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  setModeByKey(stateItems, descriptionKey, mode) {\n    let items = [...stateItems];\n    let itemIndex = items.map(item => item.key).indexOf(parseInt(descriptionKey));\n\n    if (itemIndex >= 0) {\n      items[itemIndex].mode = mode;\n    } else {\n      console.log(\"step description does not exist\");\n    }\n\n    return items;\n  }\n\n  getMode(stateItems, descriptionKey, offset) {\n    let items = [...stateItems];\n    let itemIndex = items.map(item => item.key).indexOf(parseInt(descriptionKey));\n\n    if (items[itemIndex + offset] !== undefined) {\n      return items[itemIndex + offset].mode;\n    }\n\n    return undefined;\n  }\n\n  getSelected(items) {\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].selected) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  deselectAll(items) {\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].selected) {\n        items[i].selected = false;\n      }\n    }\n\n    return items;\n  }\n\n  addStepAfter(itemsState, key, mode, level) {\n    let items = [...itemsState];\n    let itemIndex = items.map(item => item.key).indexOf(parseInt(key)); // add the new step\n\n    let mLevel = level;\n\n    if (level === null) {\n      mLevel = items[itemIndex].level;\n    }\n\n    const descIndexList = this.getDescendents(items, itemIndex);\n    let newItemIndex = descIndexList[descIndexList.length - 1] + 1;\n    items.splice(newItemIndex, 0, {\n      key: this.counter,\n      mode: mode,\n      level: mLevel,\n      selected: false\n    });\n    this.counter += 1;\n    return [items, newItemIndex];\n  }\n\n  removeWritingStep(itemsState) {\n    let items = [...itemsState];\n    let newItems = [...items];\n\n    for (let i = 1; i < items.length; i++) {\n      if (items[i].mode === \"writing\") {\n        console.log(i);\n        newItems.splice(i, 1);\n        return newItems;\n      }\n    }\n\n    console.log(\"Didn't find the item, to remove\");\n    return newItems;\n  }\n\n  removeItem(items, index) {\n    items.splice(index, 1);\n    return items;\n  }\n\n  getDescendents(items, index) {\n    let descIndexList = [index];\n    const currentStepLevel = items[index].level;\n\n    for (let i = index + 1; i < items.length; i++) {\n      if (items[i].level > currentStepLevel) {\n        descIndexList.push(i);\n      } else {\n        break;\n      }\n    }\n\n    return descIndexList;\n  }\n\n  updateDescendents(items, desIndexList, action) {\n    for (let i = 1; i < desIndexList.length; i++) {\n      if (action === \"level_increase\") {\n        items[desIndexList[i]].level += 1;\n      } else if (action === \"level_decrease\") {\n        items[desIndexList[i]].level -= 1;\n      }\n    }\n\n    return items;\n  }\n\n  deleteItems(items, indexList) {\n    let newItems = [];\n    items.forEach((item, index) => {\n      if (!indexList.includes(index)) {\n        newItems.push(item);\n      }\n    });\n    return newItems;\n  }\n\n  getPrevSibling(items, index) {\n    // pre-condition: index > 0\n    for (let i = index - 1; i > 0; i--) {\n      if (items[i].level < items[index].level) {\n        return null;\n      }\n\n      if (items[index].level === items[i].level) {\n        return i;\n      }\n    }\n\n    return null;\n  }\n\n  saveUserData(descriptions, fileName) {\n    const descriptionsJson = JSON.stringify(descriptions);\n  }\n\n}","map":{"version":3,"sources":["/Users/kian/HAKEE/annotator_app/frontend/src/components/DescriptionPane.jsx"],"names":["React","StepDescription","DescriptionPane","Component","constructor","props","counter","state","descriptions","key","mode","level","selected","setModeByKey","bind","getMode","addStepAfter","removeWritingStep","getSelected","deselectAll","getIndex","getWritingIndex","removeItem","updateDescendents","getDescendents","deleteItems","getPrevSibling","handleSingleClick","handleDoubleClick","handleBlur","handleKeyAction","render","descriptionListG","stepDescriptionList","i","length","push","x","stepComponentsList","map","stepList","index","toString","item","componentDidMount","window","addEventListener","event","componentWillUnmount","removeEventListener","txt","items","setState","shiftKey","currentStepMode","nextStepMode","undefined","currentIndex","oldWritingIndex","saveUserData","stopImmediatePropagation","which","currentStepIndex","descIndexList","prevSiblingIndex","offset","prevStepDescIndexList","curretnStepIndex","newStepIndex","preventDefault","stateItems","descriptionKey","itemIndex","indexOf","parseInt","console","log","itemsState","mLevel","newItemIndex","splice","newItems","currentStepLevel","desIndexList","action","indexList","forEach","includes","fileName","descriptionsJson","JSON","stringify"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nimport StepDescription from \"./StepDescription\";\n\nimport \"./DescriptionPane.css\";\n\nexport default class DescriptionPane extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.counter = 0;\n\t\tthis.state = {\n\t\t\tdescriptions: [{ key: 0, mode: \"writing\", level: 1, selected: true }],\n\t\t};\n\t\tthis.counter += 1;\n\n\t\tthis.setModeByKey = this.setModeByKey.bind(this);\n\t\tthis.getMode = this.getMode.bind(this);\n\t\tthis.addStepAfter = this.addStepAfter.bind(this);\n\t\tthis.removeWritingStep = this.removeWritingStep.bind(this);\n\t\tthis.getSelected = this.getSelected.bind(this);\n\t\tthis.deselectAll = this.deselectAll.bind(this);\n\t\tthis.getIndex = this.getIndex.bind(this);\n\t\tthis.getWritingIndex = this.getWritingIndex.bind(this);\n\t\tthis.removeItem = this.removeItem.bind(this);\n\t\tthis.updateDescendents = this.updateDescendents.bind(this);\n\t\tthis.getDescendents = this.getDescendents.bind(this);\n\t\tthis.deleteItems = this.deleteItems.bind(this);\n\t\tthis.getPrevSibling = this.getPrevSibling.bind(this);\n\n\t\tthis.handleSingleClick = this.handleSingleClick.bind(this);\n\t\tthis.handleDoubleClick = this.handleDoubleClick.bind(this);\n\t\tthis.handleBlur = this.handleBlur.bind(this);\n\t\tthis.handleKeyAction = this.handleKeyAction.bind(this);\n\t}\n\n\trender() {\n\t\tlet descriptions = this.state.descriptions;\n\t\tlet descriptionListG = [];\n\t\tlet stepDescriptionList = [];\n\t\tfor (let i = 0; i < descriptions.length; i++) {\n\t\t\t// new step\n\t\t\tif (descriptions[i].level === 1) {\n\t\t\t\tif (stepDescriptionList.length) {\n\t\t\t\t\tdescriptionListG.push(stepDescriptionList);\n\t\t\t\t}\n\t\t\t\tstepDescriptionList = [descriptions[i]];\n\t\t\t} else {\n\t\t\t\t// descendents\n\t\t\t\tstepDescriptionList.push(descriptions[i]);\n\t\t\t}\n\t\t\tif (i === descriptions.length - 1) {\n\t\t\t\tif (stepDescriptionList.length) {\n\t\t\t\t\tdescriptionListG.push(stepDescriptionList);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlet x = 1;\n\t\tlet stepComponentsList = descriptionListG.map((stepList, index) => (\n\t\t\t<div key={index.toString()} id={index.toString()} className=\"step-div\">\n\t\t\t\t{stepList.map((item) => (\n\t\t\t\t\t<StepDescription\n\t\t\t\t\t\tid={item.key.toString()}\n\t\t\t\t\t\tkey={item.key.toString()}\n\t\t\t\t\t\tonSingleClick={this.handleSingleClick}\n\t\t\t\t\t\tonDoubleClick={this.handleDoubleClick}\n\t\t\t\t\t\tonBlur={this.handleBlur}\n\t\t\t\t\t\tonKeyPress={this.handleKeyAction}\n\t\t\t\t\t\tmode={item.mode}\n\t\t\t\t\t\tselected={item.selected}\n\t\t\t\t\t\tlevel={item.level}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t));\n\n\t\treturn <React.Fragment>{stepComponentsList}</React.Fragment>;\n\t}\n\n\tcomponentDidMount() {\n\t\twindow.addEventListener(\"keydown\", (event) =>\n\t\t\tthis.handleKeyAction(null, \"\", event)\n\t\t);\n\t}\n\n\tcomponentWillUnmount() {\n\t\twindow.removeEventListener(\"keydown\", (event) =>\n\t\t\tthis.handleKeyAction(null, \"\", event)\n\t\t);\n\t}\n\n\thandleSingleClick(key, txt, event) {\n\t\tif (txt === \"\") {\t\t\t\n\t\t\tlet items = this.setModeByKey(this.state.descriptions, key, \"writing\");\n\t\t\tthis.setState({ descriptions: items });\n\t\t} else if (event.shiftKey) {\n\t\t\t// it is non-writing\n\t\t\tconst currentStepMode = this.getMode(this.state.descriptions, key, 0);\n\t\t\tconst nextStepMode = this.getMode(this.state.descriptions, key, 1);\n\t\t\tif (\n\t\t\t\tcurrentStepMode === \"not_writing\" &&\n\t\t\t\t(nextStepMode !== \"writing\" || nextStepMode === undefined)\n\t\t\t) {\n\t\t\t\t// remove existing writing step\n\t\t\t\tlet items = this.removeWritingStep(this.state.descriptions);\n\t\t\t\t// select the current step\n\t\t\t\titems = this.deselectAll(items);\n\t\t\t\titems[this.getIndex(items, key, 0)].selected = true;\n\t\t\t\tthis.setState({ descriptions: items });\n\t\t\t}\n\t\t}\n\t}\n\n\thandleDoubleClick(key) {\n\t\tlet items = this.deselectAll(this.state.descriptions);\n\t\t// update the selected step\n\t\tconst currentIndex = this.getIndex(items, key, 0);\n\t\tconst oldWritingIndex = this.getWritingIndex(items);\n\t\tif (items[currentIndex].mode !== \"writing\") {\n\t\t\titems[currentIndex].mode = \"writing\";\n\t\t\tif (currentIndex > 0) {\n\t\t\t\titems[currentIndex - 1].selected = true;\n\t\t\t}\n\t\t\tif (oldWritingIndex > 0) {\n\t\t\t\titems = this.removeItem(items, oldWritingIndex);\n\t\t\t}\n\t\t\tthis.setState({ descriptions: items });\n\t\t}\n\t}\n\n\thandleBlur(key, txt) {\n\t\tlet items = [...this.state.descriptions];\n\t\tif (txt !== \"\") {\n\t\t\titems = this.setModeByKey(items, key, \"not_writing\");\n\t\t\tthis.setState({ descriptions: items });\n\t\t} else if (txt === \"\" && this.state.descriptions.length > 1) {\n\t\t\titems = this.removeWritingStep(items);\n\t\t\tthis.saveUserData(items, \"u1_v1\");\n\t\t\tthis.setState({ descriptions: items });\n\t\t}\n\t}\n\n\thandleKeyAction(key, txt, event) {\n\t\tevent.stopImmediatePropagation();\n\t\tlet items = [...this.state.descriptions];\n\n\t\t// del --> delete step\n\t\tif (event.which === 46) {\n\t\t\tlet currentStepIndex = null;\n\t\t\tif (key === null) {\n\t\t\t\t// delete (window listener)\n\t\t\t\tcurrentStepIndex = this.getSelected(items);\n\t\t\t} else {\n\t\t\t\t// delete (<input> listener)\n\t\t\t\tcurrentStepIndex = this.getIndex(items, key, 0);\n\t\t\t}\n\n\t\t\tif (items[currentStepIndex].selected && items.length >= 2) {\n\t\t\t\t// select the previous/next step\n\t\t\t\titems = this.deselectAll(items);\n\t\t\t\tconst descIndexList = this.getDescendents(items, currentStepIndex);\n\t\t\t\tif (currentStepIndex === 0) {\n\t\t\t\t\titems[currentStepIndex + descIndexList.length].selected = true;\n\t\t\t\t} else {\n\t\t\t\t\tconst prevSiblingIndex = this.getPrevSibling(items, currentStepIndex);\n\t\t\t\t\tlet offset = 1;\n\t\t\t\t\tif (!(prevSiblingIndex == null)) {\n\t\t\t\t\t\tconst prevStepDescIndexList = this.getDescendents(\n\t\t\t\t\t\t\titems,\n\t\t\t\t\t\t\tprevSiblingIndex\n\t\t\t\t\t\t);\n\t\t\t\t\t\toffset = prevStepDescIndexList.length;\n\t\t\t\t\t}\n\t\t\t\t\titems[currentStepIndex - offset].selected = true;\n\t\t\t\t}\n\t\t\t\t// do not delete everything\n\t\t\t\tif (descIndexList.length < items.length) {\n\t\t\t\t\titems = this.deleteItems(items, descIndexList);\n\t\t\t\t\tthis.setState({ descriptions: items });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Enter --> nex step (writing)\n\t\telse if (event.which === 13 && txt !== \"\") {\n\t\t\tconst currentStepMode = this.getMode(items, key, 0);\n\t\t\tconst curretnStepIndex = this.getIndex(items, key, 0);\n\t\t\tlet newStepIndex = curretnStepIndex;\n\t\t\tif (\n\t\t\t\tcurrentStepMode === \"writing\" ||\n\t\t\t\t(currentStepMode === \"not_writing\" && items[curretnStepIndex].selected)\n\t\t\t) {\n\t\t\t\t// change the current step to non-writing and add one writing step after it\n\t\t\t\titems[curretnStepIndex].mode = \"not_writing\";\n\t\t\t\t// deselect all\n\t\t\t\titems = this.deselectAll(items);\n\t\t\t\t[items, newStepIndex] = this.addStepAfter(items, key, \"writing\", null);\n\t\t\t\titems[newStepIndex].selected = true;\n\t\t\t\tthis.setState({ descriptions: items });\n\t\t\t}\n\t\t}\n\n\t\t// Tab or Shift + Tab\n\t\t// TODO: shif + tab --> update the selected step\n\t\telse if (event.which === 9) {\n\t\t\tevent.preventDefault();\n\t\t\t// perform indention if it is writing\n\t\t\tconst currentStepIndex = this.getIndex(items, key, 0);\n\n\t\t\tif (currentStepIndex > 0) {\n\t\t\t\tconst descIndexList = this.getDescendents(items, currentStepIndex);\n\t\t\t\t// only tab\n\t\t\t\tif (!event.shiftKey) {\n\t\t\t\t\tif (items[currentStepIndex].mode === \"writing\" && items.length > 1) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\titems[currentStepIndex - 1].level >=\n\t\t\t\t\t\t\titems[currentStepIndex].level &&\n\t\t\t\t\t\t\titems[currentStepIndex].level <= 2\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\titems[currentStepIndex].level += 1;\n\t\t\t\t\t\t\titems = this.updateDescendents(\n\t\t\t\t\t\t\t\titems,\n\t\t\t\t\t\t\t\tdescIndexList,\n\t\t\t\t\t\t\t\t\"level_increase\"\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// shift + tab\n\t\t\t\t\tif (items[currentStepIndex].level >= 2)\n\t\t\t\t\t\titems[currentStepIndex].level -= 1;\n\t\t\t\t\titems = this.updateDescendents(\n\t\t\t\t\t\titems,\n\t\t\t\t\t\tdescIndexList,\n\t\t\t\t\t\t\"level_decrease\"\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tthis.setState({ descriptions: items });\n\t\t\t}\n\n\n\t\t}\n\n\t\tif (event.which === 40 || event.which === 38) {\n\t\t\titems = [...this.state.descriptions];\n\t\t\tlet index = this.getSelected(items);\n\t\t\titems[index].selected = false;\n\t\t\tif (event.which === 40) {\n\t\t\t\tif (index < items.length - 1) {\n\t\t\t\t\tindex += 1;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (index > 0) index -= 1;\n\t\t\t}\n\t\t\titems[index].selected = true;\n\t\t\tthis.setState({ descriptions: items });\n\t\t}\n\t\t// up-down arrows\n\t\t// change the selected item\n\t\t// if (event.which) {\n\t\t//     index = this.getSelected(this.state.descriptions);\n\t\t// }\n\t}\n\n\t// TODO: drag to rearrange\n\n\t// TODO:\n\t// 1) next-prev video\n\t// 2) saving the description\n\t// 4) add guiddance (key bindings, ...)\n\t// 5) record timestamp\n\t// 6) record video control events (number of times, and types (jump to the future/past))\n\n\tgetIndex(stateItems, descriptionKey, offset) {\n\t\tlet items = [...stateItems];\n\t\tlet itemIndex = items\n\t\t\t.map((item) => item.key)\n\t\t\t.indexOf(parseInt(descriptionKey));\n\t\tif (itemIndex >= 0) {\n\t\t\treturn itemIndex + offset;\n\t\t}\n\t\treturn -1;\n\t}\n\n\tgetWritingIndex(items) {\n\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\tif (items[i].mode === \"writing\") {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\n\tsetModeByKey(stateItems, descriptionKey, mode) {\n\t\tlet items = [...stateItems];\n\t\tlet itemIndex = items\n\t\t\t.map((item) => item.key)\n\t\t\t.indexOf(parseInt(descriptionKey));\n\t\tif (itemIndex >= 0) {\n\t\t\titems[itemIndex].mode = mode;\n\t\t} else {\n\t\t\tconsole.log(\"step description does not exist\");\n\t\t}\n\n\t\treturn items;\n\t}\n\n\tgetMode(stateItems, descriptionKey, offset) {\n\t\tlet items = [...stateItems];\n\t\tlet itemIndex = items\n\t\t\t.map((item) => item.key)\n\t\t\t.indexOf(parseInt(descriptionKey));\n\t\tif (items[itemIndex + offset] !== undefined) {\n\t\t\treturn items[itemIndex + offset].mode;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tgetSelected(items) {\n\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\tif (items[i].selected) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\n\tdeselectAll(items) {\n\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\tif (items[i].selected) {\n\t\t\t\titems[i].selected = false;\n\t\t\t}\n\t\t}\n\t\treturn items;\n\t}\n\n\taddStepAfter(itemsState, key, mode, level) {\n\t\tlet items = [...itemsState];\n\t\tlet itemIndex = items.map((item) => item.key).indexOf(parseInt(key));\n\t\t// add the new step\n\t\tlet mLevel = level;\n\t\tif (level === null) {\n\t\t\tmLevel = items[itemIndex].level;\n\t\t}\n\t\tconst descIndexList = this.getDescendents(items, itemIndex);\n\t\tlet newItemIndex = descIndexList[descIndexList.length - 1] + 1;\n\t\titems.splice(newItemIndex, 0, {\n\t\t\tkey: this.counter,\n\t\t\tmode: mode,\n\t\t\tlevel: mLevel,\n\t\t\tselected: false,\n\t\t});\n\t\tthis.counter += 1;\n\t\t\n\t\treturn [items, newItemIndex];\n\t}\n\n\tremoveWritingStep(itemsState) {\n\t\tlet items = [...itemsState];\n\t\tlet newItems = [...items];\n\t\tfor (let i = 1; i < items.length; i++) {\n\t\t\tif (items[i].mode === \"writing\") {\n\t\t\t\tconsole.log(i);\n\t\t\t\tnewItems.splice(i, 1);\n\t\t\t\treturn newItems;\n\t\t\t}\n\t\t}\n\t\tconsole.log(\"Didn't find the item, to remove\");\n\t\treturn newItems;\n\t}\n\n\tremoveItem(items, index) {\n\t\titems.splice(index, 1);\n\t\treturn items;\n\t}\n\n\tgetDescendents(items, index) {\n\t\tlet descIndexList = [index];\n\t\tconst currentStepLevel = items[index].level;\n\t\tfor (let i = index + 1; i < items.length; i++) {\n\t\t\tif (items[i].level > currentStepLevel) {\n\t\t\t\tdescIndexList.push(i);\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn descIndexList;\n\t}\n\n\tupdateDescendents(items, desIndexList, action) {\n\t\tfor (let i = 1; i < desIndexList.length; i++) {\n\t\t\tif (action === \"level_increase\") {\n\t\t\t\titems[desIndexList[i]].level += 1;\n\t\t\t} else if (action === \"level_decrease\") {\n\t\t\t\titems[desIndexList[i]].level -= 1;\n\t\t\t}\n\t\t}\n\n\t\treturn items;\n\t}\n\n\tdeleteItems(items, indexList) {\n\t\tlet newItems = [];\n\t\titems.forEach((item, index) => {\n\t\t\tif (!indexList.includes(index)) {\n\t\t\t\tnewItems.push(item);\n\t\t\t}\n\t\t});\n\t\treturn newItems;\n\t}\n\n\tgetPrevSibling(items, index) {\n\t\t// pre-condition: index > 0\n\t\tfor (let i = index - 1; i > 0; i--) {\n\t\t\tif (items[i].level < items[index].level) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif (items[index].level === items[i].level) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tsaveUserData(descriptions, fileName) {\n\t\tconst descriptionsJson = JSON.stringify(descriptions);\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}