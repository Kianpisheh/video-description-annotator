{"ast":null,"code":"var _jsxFileName = \"/Users/kian/HAKEE/annotator_app/frontend/src/components/DescriptionPane.jsx\";\nimport React from \"react\";\nimport StepDescription from \"./StepDescription\";\nimport \"./DescriptionPane.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class DescriptionPane extends React.Component {\n  constructor(props) {\n    super(props);\n    this.counter = 0;\n    this.state = {\n      descriptions: [{\n        key: 0,\n        mode: \"writing\",\n        level: 1,\n        selected: false\n      }]\n    };\n    this.counter += 1;\n    this.setModeByKey = this.setModeByKey.bind(this);\n    this.getMode = this.getMode.bind(this);\n    this.addStepAfter = this.addStepAfter.bind(this);\n    this.removeWritingStep = this.removeWritingStep.bind(this);\n    this.getSelected = this.getSelected.bind(this);\n    this.deselectAll = this.deselectAll.bind(this);\n    this.getIndex = this.getIndex.bind(this);\n    this.getWritingIndex = this.getWritingIndex.bind(this);\n    this.handleSingleClick = this.handleSingleClick.bind(this);\n    this.handleDoubleClick = this.handleDoubleClick.bind(this);\n    this.handleBlur = this.handleBlur.bind(this);\n    this.handleKeyAction = this.handleKeyAction.bind(this);\n  }\n\n  render() {\n    let descriptions = this.state.descriptions;\n    let descriptionList = descriptions.map((item, index) => /*#__PURE__*/_jsxDEV(StepDescription, {\n      id: item.key.toString(),\n      onSingleClick: this.handleSingleClick,\n      onDoubleClick: this.handleDoubleClick,\n      onBlur: this.handleBlur,\n      onKeyPress: this.handleKeyAction,\n      mode: item.mode,\n      selected: item.selected,\n      level: item.level,\n      parentLevel: descriptions[index - 1]\n    }, item.key.toString(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 32\n    }, this));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"description-pane-container\",\n      children: descriptionList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 16\n    }, this);\n  }\n\n  handleSingleClick(key, txt, event) {\n    if (txt === \"\") {\n      let items = this.setModeByKey(this.state.descriptions, key, \"writing\");\n      this.setState({\n        descriptions: items\n      });\n    } else if (event.shiftKey) {\n      // it is non-writing\n      const currentStepMode = this.getMode(this.state.descriptions, key, 0);\n      const nextStepMode = this.getMode(this.state.descriptions, key, 1);\n\n      if (currentStepMode === \"not_writing\" && (nextStepMode !== \"writing\" || nextStepMode === undefined)) {\n        // remove existing writing step\n        let items = this.removeWritingStep(this.state.descriptions);\n        items = this.addStepAfter(items, key, \"writing\", 1);\n        this.setState({\n          descriptions: items\n        });\n      }\n    }\n  }\n\n  handleDoubleClick(key) {\n    let items = this.deselectAll(this.state.descriptions); // update the selected step\n\n    let currentIndex = this.getIndex(items, key, 0);\n    items = this.removeWritingStep(this.state.descriptions);\n    items[currentIndex].mode = \"writing\";\n\n    if (currentIndex > 0) {\n      items[currentIndex - 1].selected = true;\n    }\n\n    this.setState({\n      descriptions: items\n    });\n  }\n\n  handleBlur(key, txt) {\n    let items = [...this.state.descriptions];\n\n    if (txt !== \"\") {\n      items = this.setModeByKey(items, key, \"not_writing\");\n      this.setState({\n        descriptions: items\n      });\n    } else if (txt === \"\" && this.state.descriptions.length > 1) {\n      items = this.removeWritingStep(items);\n      this.setState({\n        descriptions: items\n      });\n    }\n  }\n\n  handleKeyAction(key, txt, event) {\n    if (event.which === 13 && txt !== \"\") {\n      const currentStepMode = this.getMode(this.state.descriptions, key, 0);\n\n      if (currentStepMode === \"writing\") {\n        // change the current step to non-writing and add one writing step after it\n        let items = this.setModeByKey(this.state.descriptions, key, \"not_writing\");\n        items = this.addStepAfter(items, key, \"writing\", null);\n        this.setState({\n          descriptions: items\n        });\n      }\n    } // TODO: \n    // Del or backspace\n    //    if non-writing\n    //       delete the key\n    // TODO: move all descendents as well\n\n\n    if (event.which === 9) {\n      event.preventDefault(); // perform indention if it is writing\n\n      let items = [...this.state.descriptions];\n      const currentStepIndex = this.getIndex(this.state.descriptions, key, 0);\n\n      if (currentStepIndex > 0) {\n        // only tab\n        if (!event.shiftKey) {\n          if (items[currentStepIndex].mode === \"writing\" && items.length > 1) {\n            if (items[currentStepIndex - 1].level >= items[currentStepIndex].level && items[currentStepIndex].level <= 2) {\n              items[currentStepIndex].level += 1;\n            }\n          }\n        } else {\n          // shift + tab\n          if (items[currentStepIndex].level >= 2) items[currentStepIndex].level -= 1;\n        }\n\n        this.setState({\n          descriptions: items\n        });\n      } // TODO: \n      // up-down arrows\n      // change the selected item\n      // if (event.which) {\n      //     index = this.getSelected(this.state.descriptions);\n      // }\n\n    } // TODO: drag to rearrange\n\n  }\n\n  getIndex(stateItems, descriptionKey, offset) {\n    let items = [...stateItems];\n    let itemIndex = items.map(item => item.key).indexOf(parseInt(descriptionKey));\n\n    if (itemIndex >= 0) {\n      return itemIndex + offset;\n    }\n\n    return -1;\n  }\n\n  getWritingIndex(items) {\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].mode === \"writing\") {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  setModeByKey(stateItems, descriptionKey, mode) {\n    let items = [...stateItems];\n    let itemIndex = items.map(item => item.key).indexOf(parseInt(descriptionKey));\n\n    if (itemIndex >= 0) {\n      items[itemIndex].mode = mode;\n    } else {\n      console.log(\"step description does not exist\");\n    }\n\n    return items;\n  }\n\n  getMode(stateItems, descriptionKey, offset) {\n    let items = [...stateItems];\n    let itemIndex = items.map(item => item.key).indexOf(parseInt(descriptionKey));\n\n    if (items[itemIndex + offset] !== undefined) {\n      return items[itemIndex + offset].mode;\n    }\n\n    return undefined;\n  }\n\n  getSelected(items) {\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].selected) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  deselectAll(items) {\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].selected) {\n        items[i].selected = false;\n      }\n    }\n\n    return items;\n  }\n\n  addStepAfter(itemsState, key, mode, level) {\n    let items = [...itemsState];\n    let itemIndex = items.map(item => item.key).indexOf(parseInt(key));\n\n    if (items[itemIndex].mode !== \"writing\") {\n      // deselect all\n      items = this.deselectAll(items); // select the current step\n\n      items[itemIndex].selected = true; // add the new step\n\n      let mLevel = level;\n\n      if (level === null) {\n        mLevel = items[itemIndex].level;\n      }\n\n      items.splice(itemIndex + 1, 0, {\n        key: this.counter,\n        mode: mode,\n        level: mLevel,\n        selected: false\n      });\n      this.counter += 1;\n    }\n\n    return items;\n  }\n\n  removeWritingStep(itemsState) {\n    let items = [...itemsState];\n    let newItems = [...items];\n\n    for (let i = 1; i < items.length; i++) {\n      if (items[i].mode === \"writing\") {\n        console.log(i);\n        newItems.splice(i, 1);\n        return newItems;\n      }\n    }\n\n    console.log(\"Didn't find the item, to remove\");\n    return newItems;\n  }\n\n}","map":{"version":3,"sources":["/Users/kian/HAKEE/annotator_app/frontend/src/components/DescriptionPane.jsx"],"names":["React","StepDescription","DescriptionPane","Component","constructor","props","counter","state","descriptions","key","mode","level","selected","setModeByKey","bind","getMode","addStepAfter","removeWritingStep","getSelected","deselectAll","getIndex","getWritingIndex","handleSingleClick","handleDoubleClick","handleBlur","handleKeyAction","render","descriptionList","map","item","index","toString","txt","event","items","setState","shiftKey","currentStepMode","nextStepMode","undefined","currentIndex","length","which","preventDefault","currentStepIndex","stateItems","descriptionKey","offset","itemIndex","indexOf","parseInt","i","console","log","itemsState","mLevel","splice","newItems"],"mappings":"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","sourcesContent":["import React from \"react\"\n\nimport StepDescription from \"./StepDescription\"\n\nimport \"./DescriptionPane.css\"\n\n\nexport default class DescriptionPane extends React.Component {\n    constructor(props) {\n        super(props);\n        this.counter = 0;\n        this.state = {descriptions: [{key: 0, mode: \"writing\", level: 1, selected: false}]};\n        this.counter += 1;\n\n        this.setModeByKey = this.setModeByKey.bind(this);\n        this.getMode = this.getMode.bind(this);\n        this.addStepAfter = this.addStepAfter.bind(this);\n        this.removeWritingStep = this.removeWritingStep.bind(this);\n        this.getSelected = this.getSelected.bind(this);\n        this.deselectAll = this.deselectAll.bind(this);\n        this.getIndex = this.getIndex.bind(this);\n        this.getWritingIndex = this.getWritingIndex.bind(this);\n\n        this.handleSingleClick = this.handleSingleClick.bind(this);\n        this.handleDoubleClick = this.handleDoubleClick.bind(this);\n        this.handleBlur = this.handleBlur.bind(this);\n        this.handleKeyAction = this.handleKeyAction.bind(this);\n\n\n    }\n\n    render() {\n        let descriptions = this.state.descriptions;\n        let descriptionList = descriptions.map((item, index) => \n                               <StepDescription id={item.key.toString()} \n                                                key={item.key.toString()} \n                                                onSingleClick={this.handleSingleClick} \n                                                onDoubleClick={this.handleDoubleClick}\n                                                onBlur={this.handleBlur}\n                                                onKeyPress={this.handleKeyAction} \n                                                mode={item.mode}\n                                                selected={item.selected} \n                                                level={item.level}\n                                                parentLevel={descriptions[index-1]}/>)\n        return <div id=\"description-pane-container\">{descriptionList}</div>\n        \n    }\n\n    handleSingleClick(key, txt, event) {\n        if (txt === \"\") {\n            let items = this.setModeByKey(this.state.descriptions, key, \"writing\");\n            this.setState({descriptions: items});\n        } else if (event.shiftKey) { // it is non-writing\n            const currentStepMode = this.getMode(this.state.descriptions, key, 0);\n            const nextStepMode = this.getMode(this.state.descriptions, key, 1);\n            if (currentStepMode === \"not_writing\" && (nextStepMode !== \"writing\" || nextStepMode === undefined)) {\n                // remove existing writing step\n                let items = this.removeWritingStep(this.state.descriptions)\n                items = this.addStepAfter(items, key, \"writing\", 1);\n                this.setState({descriptions: items});\n            }\n        }\n    }\n\n    handleDoubleClick(key) {\n        let items = this.deselectAll(this.state.descriptions);\n        // update the selected step\n        let currentIndex = this.getIndex(items, key, 0);\n        items = this.removeWritingStep(this.state.descriptions);\n        items[currentIndex].mode = \"writing\";\n        if (currentIndex > 0) {\n            items[currentIndex-1].selected = true;\n        }\n        this.setState({descriptions: items});\n    }\n\n    handleBlur(key, txt) {\n        let items = [...this.state.descriptions];\n        if (txt !== \"\") {\n            items = this.setModeByKey(items, key, \"not_writing\");\n            this.setState({descriptions: items});\n        } else if(txt === \"\" && this.state.descriptions.length > 1) {\n            items = this.removeWritingStep(items);\n            this.setState({descriptions: items});\n        }\n    }\n\n    handleKeyAction(key, txt, event) {\n        if (event.which === 13 && txt !== \"\") {\n            const currentStepMode = this.getMode(this.state.descriptions, key, 0);\n            if (currentStepMode === \"writing\") {\n                // change the current step to non-writing and add one writing step after it\n                let items = this.setModeByKey(this.state.descriptions,key, \"not_writing\")\n                items = this.addStepAfter(items, key, \"writing\", null);\n                this.setState({descriptions: items});\n            }\n        }\n\n        // TODO: \n        // Del or backspace\n        //    if non-writing\n        //       delete the key\n\n        // TODO: move all descendents as well\n        if (event.which === 9) { \n            event.preventDefault();\n            // perform indention if it is writing\n            let items = [...this.state.descriptions];\n            const currentStepIndex = this.getIndex(this.state.descriptions, key, 0);\n            \n            if (currentStepIndex > 0) {\n                // only tab\n                if (!event.shiftKey) {\n                    if (items[currentStepIndex].mode === \"writing\" && items.length > 1) {\n                        if (items[currentStepIndex-1].level >= items[currentStepIndex].level && items[currentStepIndex].level <=2) {\n                            items[currentStepIndex].level += 1;\n                        } \n                    }\n                } else { // shift + tab\n                    if (items[currentStepIndex].level >= 2)\n                    items[currentStepIndex].level -= 1\n                }\n                this.setState({descriptions: items});\n            }\n            \n        // TODO: \n        // up-down arrows\n        // change the selected item\n        // if (event.which) {\n        //     index = this.getSelected(this.state.descriptions);\n        // }\n        \n        }\n\n    // TODO: drag to rearrange\n    }\n\n    getIndex(stateItems, descriptionKey, offset) {\n        let items = [...stateItems];\n        let itemIndex = items.map(item => item.key).indexOf(parseInt(descriptionKey));\n        if (itemIndex >= 0) {\n            return itemIndex + offset;\n        }\n        return -1;\n    }\n\n    getWritingIndex(items) {\n        for (let i = 0; i < items.length; i++) {\n            if (items[i].mode === \"writing\") {\n                return i;\n            }\n        }\n        return -1 \n    }\n\n    setModeByKey(stateItems, descriptionKey, mode) {\n        let items = [...stateItems];\n        let itemIndex = items.map(item => item.key).indexOf(parseInt(descriptionKey));\n        if (itemIndex >= 0) {\n            items[itemIndex].mode = mode;\n        } else {\n            console.log(\"step description does not exist\")\n        }\n        \n        return items;\n    \n    }\n\n\n    getMode(stateItems, descriptionKey, offset) {\n        let items = [...stateItems];\n        let itemIndex = items.map(item => item.key).indexOf(parseInt(descriptionKey));\n        if (items[itemIndex + offset] !== undefined) {\n            return items[itemIndex + offset].mode; \n        } \n        return undefined\n    }\n\n\n    getSelected(items) {\n        for (let i = 0; i < items.length; i++) {\n            if (items[i].selected) {\n                return i;\n            }\n        }\n        return -1\n    }\n\n    deselectAll(items) {\n        for (let i = 0; i < items.length; i++) {\n            if(items[i].selected) {\n                items[i].selected = false;\n            }\n        }\n        return items\n    }\n\n    addStepAfter(itemsState, key, mode, level) {\n        let items = [...itemsState];\n        let itemIndex = items.map(item => item.key).indexOf(parseInt(key));\n        if (items[itemIndex].mode !== \"writing\") {\n            // deselect all\n            items = this.deselectAll(items)\n            // select the current step\n            items[itemIndex].selected = true;\n            // add the new step\n            let mLevel = level;\n            if (level === null) {\n                mLevel = items[itemIndex].level;\n            }\n            items.splice(itemIndex+1, 0, {key: this.counter, mode: mode, level: mLevel, selected: false})\n            this.counter += 1\n        }\n        return items;\n    }\n\n    removeWritingStep(itemsState) {\n        let items = [...itemsState];\n        let newItems = [...items];\n        for (let i = 1; i < items.length; i++) {\n            if (items[i].mode === \"writing\") {\n                console.log(i)\n                newItems.splice(i, 1)\n                return newItems\n            }\n        }\n        console.log(\"Didn't find the item, to remove\")\n        return newItems  \n\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}