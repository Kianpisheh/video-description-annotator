{"ast":null,"code":"var _jsxFileName = \"/Users/kian/HAKEE/annotator_app/frontend/src/components/DescriptionPane.jsx\";\nimport React from \"react\";\nimport StepDescription from \"./StepDescription\";\nimport \"./DescriptionPane.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class DescriptionPane extends React.Component {\n  constructor(props) {\n    super(props);\n    this.counter = 0;\n    this.state = {\n      descriptions: [{\n        key: 0,\n        mode: \"writing\",\n        level: 1,\n        selected: false\n      }]\n    };\n    this.counter += 1;\n    this.setModeByKey = this.setModeByKey.bind(this);\n    this.getMode = this.getMode.bind(this);\n    this.handleSingleClick = this.handleSingleClick.bind(this);\n    this.handleDoubleClick = this.handleDoubleClick.bind(this);\n    this.handleBlur = this.handleBlur.bind(this);\n    this.handleKeyAction = this.handleKeyAction.bind(this);\n    this.addStepAfter = this.addStepAfter.bind(this);\n    this.removeWritingStep = this.removeWritingStep.bind(this);\n    this.getSelected = this.getSelected.bind(this);\n    this.deselectAll = this.deselectAll.bind(this);\n  }\n\n  render() {\n    let descriptions = this.state.descriptions;\n    let descriptionList = descriptions.map(item => /*#__PURE__*/_jsxDEV(StepDescription, {\n      id: item.key.toString(),\n      onSingleClick: this.handleSingleClick,\n      onDoubleClick: this.handleDoubleClick,\n      onBlur: this.handleBlur,\n      onKeyPress: this.handleKeyAction,\n      mode: item.mode,\n      selected: item.selected,\n      level: item.level\n    }, item.key.toString(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 32\n    }, this));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"description-pane-container\",\n      children: descriptionList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 16\n    }, this);\n  }\n\n  handleSingleClick(key, txt, event) {\n    if (txt === \"\") {\n      let items = this.setModeByKey(this.state.descriptions, key, \"writing\");\n      this.setState({\n        descriptions: items\n      });\n    } else if (event.shiftKey) {\n      // it is non-writing\n      const currentStepMode = this.getMode(this.state.descriptions, key, 0);\n      const nextStepMode = this.getMode(this.state.descriptions, key, 1);\n\n      if (currentStepMode === \"not_writing\" && (nextStepMode !== \"writing\" || nextStepMode === undefined)) {\n        // remove existing writing step\n        let items = this.removeWritingStep(this.state.descriptions);\n        items = this.addStepAfter(items, key, \"writing\", 1);\n        this.setState({\n          descriptions: items\n        });\n      }\n    }\n  }\n\n  handleDoubleClick(key) {\n    let items = this.removeWritingStep(this.state.descriptions);\n    items = this.deselectAll(items); // update the selected step\n\n    items = this.setModeByKey(items, key, \"writing\");\n    this.setState({\n      descriptions: items\n    });\n  }\n\n  handleBlur(key, txt) {\n    if (txt !== \"\") {\n      let items = this.setModeByKey(this.state.descriptions, key, \"not_writing\");\n      this.setState({\n        descriptions: items\n      });\n    } else {\n      let items = this.setModeByKey(this.state.descriptions, key, \"writing\");\n      this.setState({\n        descriptions: items\n      });\n    }\n  }\n\n  handleKeyAction(key, txt, event) {\n    if (event.which === 13 && txt !== \"\") {\n      const currentStepMode = this.getMode(this.state.descriptions, key, 0);\n\n      if (currentStepMode === \"writing\") {\n        // change the current step to non-writing and add one writing step after it\n        let items = this.setModeByKey(this.state.descriptions, key, \"not_writing\");\n        items = this.addStepAfter(items, key, \"writing\", 1);\n        this.setState({\n          descriptions: items\n        });\n      }\n    } // Del or backspace\n    //    if non-writing\n    //       delete the key\n    // Space or Tab\n    //    if it is non-writing\n    //          indention \n    //    else \n    //         do nothing\n    // up-down arrows\n    // change the selected item\n    // if (event.which) {\n    //     index = this.getSelected(this.state.descriptions);\n    // }\n\n  }\n\n  getIndex(stateItems, descriptionKey, offset) {\n    let items = [...stateItems];\n    let itemIndex = items.map(item => item.key).indexOf(parseInt(descriptionKey));\n\n    if (itemIndex >= 0) {\n      return itemIndex + offset;\n    }\n\n    return -1;\n  }\n\n  setModeByKey(stateItems, descriptionKey, mode) {\n    let items = [...stateItems];\n    let itemIndex = items.map(item => item.key).indexOf(parseInt(descriptionKey));\n\n    if (itemIndex >= 0) {\n      items[itemIndex].mode = mode;\n\n      if (mode === \"writing\" && itemIndex >= 1) {\n        items[itemIndex - 1].selected = true;\n      }\n    } else {\n      console.log(\"step description does not exist\");\n    }\n\n    return items;\n  }\n\n  getMode(stateItems, descriptionKey, offset) {\n    let items = [...stateItems];\n    let itemIndex = items.map(item => item.key).indexOf(parseInt(descriptionKey));\n\n    if (items[itemIndex + offset] !== undefined) {\n      return items[itemIndex + offset].mode;\n    }\n\n    return undefined;\n  }\n\n  getSelected(items) {\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].selected) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  deselectAll(items) {\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].selected) {\n        items[i].selected = false;\n      }\n    }\n\n    return items;\n  }\n\n  addStepAfter(itemsState, key, mode, level) {\n    let items = [...itemsState];\n    let itemIndex = items.map(item => item.key).indexOf(parseInt(key));\n\n    if (items[itemIndex].mode !== \"writing\") {\n      // deselect all\n      items = this.deselectAll(items); // select the current step\n\n      items[itemIndex].selected = true; // add the new step\n\n      items.splice(itemIndex + 1, 0, {\n        key: this.counter,\n        mode: mode,\n        level: level,\n        selected: false\n      });\n      this.counter += 1;\n    }\n\n    return items;\n  }\n\n  removeWritingStep(itemsState) {\n    let items = [...itemsState];\n    let newItems = [...items];\n\n    for (let i = 1; i < items.length; i++) {\n      if (items[i].mode === \"writing\") {\n        console.log(i);\n        newItems.splice(i, 1);\n        return newItems;\n      }\n    }\n\n    console.log(\"Didn't find the item, to remove\");\n    return newItems;\n  }\n\n}","map":{"version":3,"sources":["/Users/kian/HAKEE/annotator_app/frontend/src/components/DescriptionPane.jsx"],"names":["React","StepDescription","DescriptionPane","Component","constructor","props","counter","state","descriptions","key","mode","level","selected","setModeByKey","bind","getMode","handleSingleClick","handleDoubleClick","handleBlur","handleKeyAction","addStepAfter","removeWritingStep","getSelected","deselectAll","render","descriptionList","map","item","toString","txt","event","items","setState","shiftKey","currentStepMode","nextStepMode","undefined","which","getIndex","stateItems","descriptionKey","offset","itemIndex","indexOf","parseInt","console","log","i","length","itemsState","splice","newItems"],"mappings":"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","sourcesContent":["import React from \"react\"\n\nimport StepDescription from \"./StepDescription\"\n\nimport \"./DescriptionPane.css\"\n\n\nexport default class DescriptionPane extends React.Component {\n    constructor(props) {\n        super(props);\n        this.counter = 0;\n        this.state = {descriptions: [{key: 0, mode: \"writing\", level: 1, selected: false}]};\n        this.counter += 1;\n\n        this.setModeByKey = this.setModeByKey.bind(this);\n        this.getMode = this.getMode.bind(this);\n\n        this.handleSingleClick = this.handleSingleClick.bind(this);\n        this.handleDoubleClick = this.handleDoubleClick.bind(this);\n        this.handleBlur = this.handleBlur.bind(this);\n        this.handleKeyAction = this.handleKeyAction.bind(this);\n        this.addStepAfter = this.addStepAfter.bind(this);\n        this.removeWritingStep = this.removeWritingStep.bind(this);\n        this.getSelected = this.getSelected.bind(this);\n        this.deselectAll = this.deselectAll.bind(this);\n\n    }\n\n    render() {\n        let descriptions = this.state.descriptions;\n        let descriptionList = descriptions.map((item) => \n                               <StepDescription id={item.key.toString()} \n                                                key={item.key.toString()} \n                                                onSingleClick={this.handleSingleClick} \n                                                onDoubleClick={this.handleDoubleClick}\n                                                onBlur={this.handleBlur}\n                                                onKeyPress={this.handleKeyAction} \n                                                mode={item.mode}\n                                                selected={item.selected} \n                                                level={item.level}/>)\n        return <div id=\"description-pane-container\">{descriptionList}</div>\n        \n    }\n\n    handleSingleClick(key, txt, event) {\n        if (txt === \"\") {\n            let items = this.setModeByKey(this.state.descriptions, key, \"writing\");\n            this.setState({descriptions: items});\n        } else if (event.shiftKey) { // it is non-writing\n            const currentStepMode = this.getMode(this.state.descriptions, key, 0);\n            const nextStepMode = this.getMode(this.state.descriptions, key, 1);\n            if (currentStepMode === \"not_writing\" && (nextStepMode !== \"writing\" || nextStepMode === undefined)) {\n                // remove existing writing step\n                let items = this.removeWritingStep(this.state.descriptions)\n                items = this.addStepAfter(items, key, \"writing\", 1);\n                this.setState({descriptions: items});\n            }\n        }\n    }\n\n    handleDoubleClick(key) {\n        let items = this.removeWritingStep(this.state.descriptions);\n        items = this.deselectAll(items);\n        // update the selected step\n        items = this.setModeByKey(items, key, \"writing\");\n        this.setState({descriptions: items});\n    }\n\n    handleBlur(key, txt) {\n        if (txt !== \"\") {\n            let items = this.setModeByKey(this.state.descriptions, key, \"not_writing\");\n            this.setState({descriptions: items});\n        } else {\n            let items = this.setModeByKey(this.state.descriptions, key, \"writing\");\n            this.setState({descriptions: items});\n        }\n    }\n\n    handleKeyAction(key, txt, event) {\n        if (event.which === 13 && txt !== \"\") {\n            const currentStepMode = this.getMode(this.state.descriptions, key, 0);\n            if (currentStepMode === \"writing\") {\n                // change the current step to non-writing and add one writing step after it\n                let items = this.setModeByKey(this.state.descriptions,key, \"not_writing\")\n                items = this.addStepAfter(items, key, \"writing\", 1);\n                this.setState({descriptions: items});\n            }\n        }\n\n        // Del or backspace\n        //    if non-writing\n        //       delete the key\n\n        // Space or Tab\n        //    if it is non-writing\n        //          indention \n        //    else \n        //         do nothing\n\n        // up-down arrows\n        // change the selected item\n        // if (event.which) {\n        //     index = this.getSelected(this.state.descriptions);\n        // }\n        \n    }\n\n    getIndex(stateItems, descriptionKey, offset) {\n        let items = [...stateItems];\n        let itemIndex = items.map(item => item.key).indexOf(parseInt(descriptionKey));\n        if (itemIndex >= 0) {\n            return itemIndex + offset;\n        }\n        return -1;\n    }\n\n    setModeByKey(stateItems, descriptionKey, mode) {\n        let items = [...stateItems];\n        let itemIndex = items.map(item => item.key).indexOf(parseInt(descriptionKey));\n        if (itemIndex >= 0) {\n            items[itemIndex].mode = mode;\n            if (mode === \"writing\" && itemIndex >= 1) {\n                items[itemIndex-1].selected = true;\n            }\n        } else {\n            console.log(\"step description does not exist\")\n        }\n        \n        return items;\n    \n    }\n\n\n    getMode(stateItems, descriptionKey, offset) {\n        let items = [...stateItems];\n        let itemIndex = items.map(item => item.key).indexOf(parseInt(descriptionKey));\n        if (items[itemIndex + offset] !== undefined) {\n            return items[itemIndex + offset].mode; \n        } \n        return undefined\n    }\n\n\n    getSelected(items) {\n        for (let i = 0; i < items.length; i++) {\n            if (items[i].selected) {\n                return i;\n            }\n        }\n        return -1\n    }\n\n    deselectAll(items) {\n        for (let i = 0; i < items.length; i++) {\n            if(items[i].selected) {\n                items[i].selected = false;\n            }\n        }\n        return items\n    }\n\n    addStepAfter(itemsState, key, mode, level) {\n        let items = [...itemsState];\n        let itemIndex = items.map(item => item.key).indexOf(parseInt(key));\n        if (items[itemIndex].mode !== \"writing\") {\n            // deselect all\n            items = this.deselectAll(items)\n            // select the current step\n            items[itemIndex].selected = true;\n            // add the new step\n            items.splice(itemIndex+1, 0, {key: this.counter, mode: mode, level: level, selected: false})\n            this.counter += 1\n        }\n        return items;\n    }\n\n    removeWritingStep(itemsState) {\n        let items = [...itemsState];\n        let newItems = [...items];\n        for (let i = 1; i < items.length; i++) {\n            if (items[i].mode === \"writing\") {\n                console.log(i)\n                newItems.splice(i, 1)\n                return newItems\n            }\n        }\n        console.log(\"Didn't find the item, to remove\")\n        return newItems  \n\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}