{"ast":null,"code":"var _jsxFileName = \"/Users/kian/HAKEE/annotator_app/frontend/src/components/StepDescription.jsx\";\nimport React from 'react';\nimport \"./StepDescription.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class StepDescription extends React.Component {\n  constructor(props) {\n    super(props);\n    this.textInputRef = /*#__PURE__*/React.createRef();\n  }\n\n  render() {\n    var config = this.getConfig(this.props.item);\n    console.log(this.props.item.key + \" rendered\");\n    return /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"input-text_\" + this.props.id.toString(),\n      ref: this.textInputRef,\n      type: \"text\",\n      placeholder: \"type here...\",\n      maxLength: \"30\",\n      size: \"30\",\n      blur: config.blur,\n      focus: config.focus,\n      autoFocus: config.autofocus,\n      readOnly: config.readOnly,\n      style: config.style,\n      onClick: event => this.props.onSingleClick(this.props.id, this.textInputRef.current.value, event),\n      onDoubleClick: () => this.props.onDoubleClick(this.props.id),\n      onKeyDown: event => this.props.onKeyPress(this.props.id, this.textInputRef.current.value, event),\n      onBlur: () => this.props.onBlur(this.props.id, this.textInputRef.current.value)\n    }, this.props.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 16\n    }, this);\n  }\n\n  componentDidUpdate() {\n    const mode = this.props.item.mode;\n    const text = this.props.item.text;\n\n    if (mode === \"writing\") {\n      this.textInputRef.current.selectionStart = this.textInputRef.current.selectionEnd;\n    } else {\n      console.log(this.props.item.key + \" updated\");\n      this.textInputRef.current.value = text;\n    }\n\n    console.log(\"---------------------------------------------\");\n  }\n\n  componentDidMount() {\n    this.textInputRef.current.addEventListener('keydown', event => this.props.onKeyPress(this.props.id, this.textInputRef.current.value, event));\n  }\n\n  componentWillUnmount() {\n    this.textInputRef.current.removeEventListener(\"keydown\", event => this.props.onKeyPress(this.props.id, this.textInputRef.current.value, event));\n  }\n\n  getConfig(item) {\n    const {\n      mode,\n      selected,\n      level\n    } = item;\n    let textInputStyle = {};\n    let blur = \"false\";\n    let focus = \"true\";\n    let autofocus = true;\n    let readOnly = false;\n\n    if (mode === \"writing\") {\n      textInputStyle = {\n        cursor: \"text\",\n        backgroundColor: \"white\"\n      };\n    } else if (mode === \"not_writing\") {\n      textInputStyle = {\n        cursor: \"pointer\",\n        backgroundColor: \"#20D0FF\"\n      };\n      blur = \"true\";\n      focus = \"false\";\n      readOnly = true;\n      autofocus = false;\n\n      if (selected) {\n        textInputStyle.backgroundColor = \"#11112112\";\n      }\n    } // level-related styling\n\n\n    textInputStyle.marginLeft = (level - 1) * 50;\n    textInputStyle.marginTop = 12;\n    textInputStyle.fontSize = 17;\n\n    if (level === 2) {\n      textInputStyle.marginTop = 4;\n      textInputStyle.fontSize = 15;\n    } else if (level === 3) {\n      textInputStyle.marginTop = 2;\n      textInputStyle.fontSize = 14;\n    }\n\n    return {\n      readOnly: readOnly,\n      style: textInputStyle,\n      focus: focus,\n      blur: blur,\n      autofocus: autofocus\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/kian/HAKEE/annotator_app/frontend/src/components/StepDescription.jsx"],"names":["React","StepDescription","Component","constructor","props","textInputRef","createRef","render","config","getConfig","item","console","log","key","id","toString","blur","focus","autofocus","readOnly","style","event","onSingleClick","current","value","onDoubleClick","onKeyPress","onBlur","componentDidUpdate","mode","text","selectionStart","selectionEnd","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","selected","level","textInputStyle","cursor","backgroundColor","marginLeft","marginTop","fontSize"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport \"./StepDescription.css\"\n\nexport default class StepDescription extends React.Component {\n    constructor(props) {\n        super(props);\n        this.textInputRef = React.createRef();\n\n    }\n\n    render() {\n        var config = this.getConfig(this.props.item);\n        console.log(this.props.item.key + \" rendered\");\n\n        return <input id={\"input-text_\" + this.props.id.toString()}\n                      key={this.props.id}\n                      ref={this.textInputRef} \n                      type=\"text\" \n                      placeholder=\"type here...\" \n                      maxLength=\"30\" \n                      size=\"30\"\n                      blur={config.blur} \n                      focus={config.focus}\n                      autoFocus={config.autofocus}\n                      readOnly={config.readOnly} \n                      style={config.style}\n                      onClick={(event) => this.props.onSingleClick(this.props.id, this.textInputRef.current.value, event)}\n                      onDoubleClick={() => this.props.onDoubleClick(this.props.id)}\n                      onKeyDown={(event) => this.props.onKeyPress(this.props.id, this.textInputRef.current.value, event)}\n                      onBlur={() => this.props.onBlur(this.props.id, this.textInputRef.current.value)} />\n\n    }\n\n    componentDidUpdate() {\n        const mode = this.props.item.mode;\n        const text = this.props.item.text;\n        if (mode === \"writing\") { \n            this.textInputRef.current.selectionStart = this.textInputRef.current.selectionEnd;\n        } else {\n            console.log(this.props.item.key + \" updated\");\n            this.textInputRef.current.value = text;\n        }\n        console.log(\"---------------------------------------------\");\n    }\n\n    componentDidMount() {\n        this.textInputRef.current.addEventListener('keydown', (event) => this.props.onKeyPress(this.props.id, this.textInputRef.current.value, event));\n      }\n    \n    componentWillUnmount() {\n        this.textInputRef.current.removeEventListener(\"keydown\", (event) => this.props.onKeyPress(this.props.id, this.textInputRef.current.value, event));\n    }\n    \n\n    getConfig(item) {\n\n        const {mode, selected, level} = item;\n\n        let textInputStyle = {};\n        let blur = \"false\";\n        let focus = \"true\";\n        let autofocus = true;\n        let readOnly = false;\n\n        if (mode === \"writing\") {\n            textInputStyle = {cursor: \"text\", backgroundColor: \"white\"};\n\n        } else if (mode === \"not_writing\") {\n            textInputStyle = {cursor: \"pointer\", backgroundColor: \"#20D0FF\"};\n            blur = \"true\";\n            focus = \"false\";\n            readOnly = true;\n            autofocus = false;\n\n            if (selected) {\n                textInputStyle.backgroundColor = \"#11112112\"\n            }\n        }\n\n        // level-related styling\n        textInputStyle.marginLeft = (level - 1) * 50;\n        textInputStyle.marginTop = 12;\n        textInputStyle.fontSize = 17;\n        if (level === 2) {\n            textInputStyle.marginTop = 4;\n            textInputStyle.fontSize = 15;\n        } else if (level === 3) {\n            textInputStyle.marginTop = 2;\n            textInputStyle.fontSize = 14;\n        }      \n\n        return {readOnly: readOnly, style: textInputStyle, focus: focus, blur: blur, autofocus: autofocus}\n    }\n}"]},"metadata":{},"sourceType":"module"}